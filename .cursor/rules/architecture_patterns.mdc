---
description: 
globs: 
alwaysApply: true
---
# Architecture Patterns - Pod Protocol Core

## Core Architecture

### Five-Layer Architecture

1. **Infrastructure Layer**: Blockchain (Solana), state compression, cryptography
2. **Protocol Layer**: Smart contract program (`pod-com`)  
3. **Service Layer**: Not applicable for core protocol (external services in full stack)
4. **SDK Layer**: Rust and TypeScript client libraries
5. **Application Layer**: Not applicable for core protocol (CLI/frontend in full stack)

### Core Protocol Components

#### Smart Contract (`packages/core/`)

- **Program**: Anchor-based Solana program
- **Accounts**: PDA-based account management
- **Instructions**: Atomic operations for agent communication
- **State**: On-chain state management with compression
- **Events**: Program events for indexing and monitoring

#### SDK Layer (`packages/sdk-rust/`, `packages/sdk-typescript/`)

- **Client**: High-level API for program interaction
- **Services**: Specialized services for different program features
- **Types**: Shared type definitions matching program types
- **Utils**: Common utilities for account management, serialization

## Design Patterns

### Account Management

- **PDA Usage**: All agents use Program Derived Addresses
- **Seed Patterns**: Consistent seed patterns for account derivation
- **Space Optimization**: Efficient account space allocation
- **State Compression**: ZK compression for large datasets

### Communication Patterns

- **Direct Messaging**: Point-to-point encrypted communication
- **Channel Broadcasting**: Group communication with participation management
- **Escrow Integration**: Financial interactions with escrow protection
- **Rate Limiting**: Built-in spam prevention and resource management

### Security Patterns

- **Input Validation**: Comprehensive validation on all program instructions
- **Authorization**: Role-based access control with reputation system
- **Cryptographic Security**: Blake3 hashing with secure memory operations
- **Resource Protection**: Rate limiting and deposit requirements

## Integration Patterns

### Client-Program Interaction

- **Instruction Building**: Type-safe instruction construction
- **Account Resolution**: Automatic PDA derivation and account lookup
- **Transaction Management**: Optimized transaction batching and retry logic
- **Error Handling**: Comprehensive error mapping and recovery

### State Management

- **Account Caching**: Efficient account data caching strategies
- **Real-time Updates**: Event-based state synchronization
- **Conflict Resolution**: Optimistic updates with rollback capabilities
- **Batch Operations**: Efficient bulk operations for scalability

## Performance Patterns

### On-Chain Optimization

- **Account Layout**: Memory-optimized struct layouts with `#[repr(C)]`
- **Instruction Efficiency**: Minimize computational complexity
- **State Compression**: ZK compression for message history
- **Batch Processing**: Efficient batch operations for high throughput

### Client-Side Optimization

- **Connection Pooling**: Efficient RPC connection management
- **Caching Strategies**: Smart caching for frequently accessed data
- **Async Operations**: Non-blocking concurrent operations
- **Resource Management**: Proper cleanup and memory management

## Extensibility Patterns

### Protocol Evolution

- **Versioned Instructions**: Backward-compatible instruction evolution
- **Feature Flags**: Optional feature activation
- **Migration Strategies**: Safe state migration procedures
- **Plugin Architecture**: Extensible functionality through composition

### SDK Extensibility

- **Plugin System**: Pluggable functionality for specialized use cases
- **Configuration Management**: Flexible configuration for different environments
- **Custom Providers**: Extensible provider pattern for different blockchain networks
- **Event System**: Extensible event handling for custom integrations

## Quality Assurance

### Testing Patterns

- **Unit Testing**: Comprehensive unit test coverage
- **Integration Testing**: End-to-end program testing
- **Property Testing**: Invariant verification with property-based testing
- **Load Testing**: Performance testing under realistic conditions

### Monitoring Patterns

- **Program Events**: Comprehensive event emission for monitoring
- **Metrics Collection**: Performance and usage metrics
- **Error Tracking**: Structured error reporting and analysis
- **Health Checks**: System health monitoring and alerting.
