---
description: 
globs: 
alwaysApply: true
---
# Coding Standards - Pod Protocol Core

## Language-Specific Standards

### Rust (Smart Contract)

- **Edition**: 2021 or later
- **Rust Version**: 1.79.0 or later
- **Code Style**: Follow `rustfmt` defaults
- **Linting**: All `clippy` warnings must be resolved
- **Documentation**: All public functions, structs, and modules must have doc comments
- **Error Handling**: Use `Result<T, E>` pattern consistently
- **Memory Safety**: Leverage Rust's ownership system, avoid unsafe code unless absolutely necessary
- **Testing**: Minimum 90% code coverage with unit and integration tests

### TypeScript (SDK)

- **Version**: 5.0 or later
- **Strict Mode**: Enabled
- **ESLint**: All errors and warnings resolved
- **Code Style**: Prettier formatting with 2-space indentation
- **Imports**: Use absolute imports for consistency
- **Types**: No `any` types permitted, prefer explicit type definitions
- **Testing**: Jest for unit tests, minimum 85% coverage

## General Standards

### Naming Conventions

- **Rust**: `snake_case` for functions and variables, `PascalCase` for types
- **TypeScript**: `camelCase` for functions and variables, `PascalCase` for classes and interfaces
- **Constants**: `SCREAMING_SNAKE_CASE` in both languages
- **Files**: `snake_case.rs` for Rust, `kebab-case.ts` for TypeScript

### Code Quality

- **Complexity**: Maximum cyclomatic complexity of 10 per function
- **Line Length**: Maximum 100 characters
- **Function Length**: Maximum 50 lines per function
- **Comments**: Explain 'why' not 'what', focus on business logic and edge cases
- **Performance**: No premature optimization, profile before optimizing

### Security Requirements

- **Input Validation**: All inputs must be validated before processing
- **Error Messages**: Never expose sensitive information in error messages
- **Cryptography**: Use established libraries, never implement custom crypto
- **Dependencies**: Regular security audits, pin specific versions

### Version Control

- **Commits**: Use conventional commit format
- **Branches**: Feature branches for all changes, no direct commits to main
- **Pull Requests**: Required for all changes, minimum one reviewer
- **History**: Keep clean commit history, squash feature branches

## Enforcement

- Pre-commit hooks for formatting and linting
- CI/CD pipeline enforces all standards
- Code review checklist includes standards verification
- Regular tooling updates to maintain compatibility.
