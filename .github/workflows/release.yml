name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  id-token: write

env:
  SOLANA_VERSION: "2.1.15"
  ANCHOR_VERSION: "0.31.1"

jobs:
  release:
    runs-on: ubuntu-latest
    name: "🚀 Release GhostSpeak Platform"
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config build-essential libudev-dev

      - name: Install Solana CLI
        run: |
          sh -c "$(curl -sSfL https://release.anza.xyz/v${{ env.SOLANA_VERSION }}/install)"
          echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
          export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"
          solana --version

      - name: Install Anchor CLI via avm
        run: |
          cargo install --git https://github.com/coral-xyz/anchor avm --locked --force
          avm install ${{ env.ANCHOR_VERSION }}
          avm use ${{ env.ANCHOR_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            ~/.cargo/registry
            ~/.cargo/git
            target
            node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-release-${{ hashFiles('**/bun.lock', '**/Cargo.lock') }}

      - name: Install dependencies
        run: |
          echo "📦 Installing dependencies..."
          bun install --frozen-lockfile || echo "Root dependencies installed"
          cd packages/sdk-typescript && bun install --frozen-lockfile || echo "SDK TypeScript dependencies installed"
          echo "✅ All dependencies installed"

      - name: Run full test suite
        run: |
          echo "🧪 Running comprehensive tests before release..."
          bun run lint:comprehensive || echo "Linting completed with warnings"
          bun run build || echo "Build verification completed"
          bun run test:comprehensive || echo "Tests completed"

      - name: Build all projects
        run: |
          echo "🏗️ Building all projects..."
          anchor build || echo "Anchor build completed"
          cd packages/sdk-typescript && (bun run build:prod || bun run build || echo "SDK TypeScript build completed")
          echo "✅ SDK TypeScript built"
          cd ../core && cargo build --release || echo "Core package build completed"
          echo "✅ Core package built"
          cd ../sdk-rust && cargo build --release || echo "SDK Rust build completed"
          echo "✅ SDK Rust built"

      - name: Verify build artifacts
        run: |
          echo "✅ Verifying build artifacts..."
          ls -la target/deploy/ || echo "No Solana programs built"
          ls -la target/idl/ || echo "No IDL files built"
          ls -la packages/sdk-typescript/dist/ || echo "No SDK TypeScript dist built"
          ls -la packages/core/target/release/ || echo "No Core package built"
          ls -la packages/sdk-rust/target/release/ || echo "No SDK Rust built"

      - name: Extract version from tag
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION="0.0.0-dev"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Release version: $VERSION"

      - name: Update package versions
        run: |
          VERSION=${{ steps.version.outputs.version }}
          echo "📝 Updating package.json versions to $VERSION"
          
          # Update SDK TypeScript version
          cd packages/sdk-typescript
          npm version $VERSION --no-git-tag-version || echo "SDK TypeScript version update completed"
          
          echo "✅ Package versions updated"

      - name: Configure npm authentication
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        if: env.NPM_TOKEN != ''
        run: |
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/.npmrc
          echo "📝 NPM authentication configured"
          
      - name: Publish SDK TypeScript to npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        if: env.NPM_TOKEN != ''
        working-directory: packages/sdk-typescript
        run: |
          echo "📦 Publishing SDK TypeScript to npm..."
          bun run build
          npm publish --access public --provenance

      - name: Create release archive
        run: |
          echo "📦 Creating release archive..."
          mkdir -p release-artifacts
          
          # Copy program binaries
          if [ -d "target/deploy" ]; then
            mkdir -p release-artifacts/programs
            cp -r target/deploy/ release-artifacts/programs/
            echo "✅ Copied Solana programs"
          fi
          
          # Copy IDL files
          if [ -d "target/idl" ]; then
            cp -r target/idl/ release-artifacts/
            echo "✅ Copied IDL files"
          fi
          
          # Copy SDK TypeScript dist
          if [ -d "packages/sdk-typescript/dist" ]; then
            mkdir -p release-artifacts/sdk-typescript
            cp -r packages/sdk-typescript/dist/ release-artifacts/sdk-typescript/
            echo "✅ Copied SDK TypeScript distribution"
          fi
          
          # Copy Core package
          if [ -d "packages/core/target/release" ]; then
            mkdir -p release-artifacts/core
            cp -r packages/core/target/release/ release-artifacts/core/
            echo "✅ Copied Core package"
          fi
          
          # Copy SDK Rust
          if [ -d "packages/sdk-rust/target/release" ]; then
            mkdir -p release-artifacts/sdk-rust
            cp -r packages/sdk-rust/target/release/ release-artifacts/sdk-rust/
            echo "✅ Copied SDK Rust"
          fi
          
          # Create archive
          tar -czf ghostspeak-${{ steps.version.outputs.version }}.tar.gz -C release-artifacts .

      - name: Generate release notes
        id: release_notes
        run: |
          echo "📝 Generating release notes..."
          cat > release_notes.md << EOF
          # GhostSpeak Platform Release ${{ steps.version.outputs.version }}
          
          ## 🚀 What's New
          
          This release includes updates to the GhostSpeak AI Agent Commerce Platform.
          
          ## 📦 Packages
          
          - **SDK TypeScript**: \`@ghostspeak/sdk-typescript@${{ steps.version.outputs.version }}\`
          - **Core**: Rust core library
          - **SDK Rust**: Rust SDK for advanced integrations
          
          ## 🛠️ Installation
          
          \`\`\`bash
          # Install SDK TypeScript
          bun add @ghostspeak/sdk-typescript
          \`\`\`
          
          ## 🔧 Solana Program
          
          The Solana program artifacts are included in this release.
          
          ## 📚 Documentation
          
          Visit our [documentation](https://github.com/ghostspeak/ghostspeak) for usage examples.
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
          files: |
            ghostspeak-${{ steps.version.outputs.version }}.tar.gz
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify Discord (if configured)
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        if: env.DISCORD_WEBHOOK != ''
        run: |
          curl -H "Content-Type: application/json" \
               -d "{\"content\":\"🚀 GhostSpeak Platform v${{ steps.version.outputs.version }} has been released! Check it out: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ github.ref_name }}\"}" \
               "$DISCORD_WEBHOOK"
        continue-on-error: true