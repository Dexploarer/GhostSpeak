name: 🎯 GhostSpeak Testnet CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run daily at 6 AM UTC for continuous monitoring
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of testing to run'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - deployment-only
          - performance-only
          - error-recovery-only
          - monitoring-only

env:
  PROGRAM_ID: '5mMhsW6dP6RCXv73CdBtzfAV9CJkXKYv3SqPDiccf5aK'
  TESTNET_RPC_URL: 'https://api.testnet.solana.com'
  CI: true

jobs:
  setup:
    name: 🔧 Environment Setup
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.changes.outputs.should-deploy }}
      test-type: ${{ steps.test-type.outputs.type }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: 🔍 Detect changes
        id: changes
        run: |
          if git diff --name-only HEAD^..HEAD | grep -E '^(programs/|Anchor\.toml|Cargo\.toml)'; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "Smart contract changes detected - deployment required"
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "No smart contract changes - skipping deployment"
          fi

      - name: 📋 Set test type
        id: test-type
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "type=${{ github.event.inputs.test_type }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "schedule" ]; then
            echo "type=monitoring-only" >> $GITHUB_OUTPUT
          else
            echo "type=full" >> $GITHUB_OUTPUT
          fi

  build-and-test:
    name: 🏗️ Build & Unit Tests
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.test-type == 'full' || needs.setup.outputs.test-type == 'deployment-only'
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🦀 Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2025-07-01
          override: true
          components: rustfmt, clippy

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: ⚡ Install Solana CLI
        run: |
          sh -c "$(curl -sSfL https://release.solana.com/v2.1.0/install)"
          echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH

      - name: 🔨 Install Anchor CLI
        run: |
          npm install -g @coral-xyz/anchor-cli@0.31.1

      - name: 📚 Install dependencies
        run: |
          npm ci
          cd packages/sdk-typescript && npm ci
          cd ../cli && npm ci

      - name: 🔍 Code Quality Checks
        run: |
          # Rust linting
          cd programs && cargo clippy -- -D warnings
          cd .. && cd programs && cargo fmt --check
          
          # TypeScript linting
          cd ../packages/sdk-typescript && npm run lint
          cd ../cli && npm run lint

      - name: 🏗️ Build Programs
        run: |
          anchor build --release

      - name: 🏗️ Build Packages
        run: |
          npm run build:packages

      - name: 🧪 Run Unit Tests
        run: |
          cd programs && cargo test
          cd ../packages/sdk-typescript && npm test
          cd ../cli && npm test

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            target/deploy/
            target/idl/
            packages/sdk-typescript/dist/
            packages/cli/dist/

  security-audit:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.test-type == 'full'
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🦀 Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2025-07-01
          override: true

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📚 Install dependencies
        run: npm ci

      - name: 🔐 Rust Security Audit
        run: |
          cargo install cargo-audit
          cd programs && cargo audit

      - name: 🔐 npm Security Audit
        run: npm audit --audit-level=moderate

      - name: 🕵️ Scan for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  testnet-deployment:
    name: 🚀 Testnet Deployment
    runs-on: ubuntu-latest
    needs: [setup, build-and-test]
    if: needs.setup.outputs.should-deploy == 'true' && (needs.setup.outputs.test-type == 'full' || needs.setup.outputs.test-type == 'deployment-only')
    environment: testnet
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: ⚡ Install Solana CLI
        run: |
          sh -c "$(curl -sSfL https://release.solana.com/v2.1.0/install)"
          echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH

      - name: 🔨 Install Anchor CLI
        run: |
          npm install -g @coral-xyz/anchor-cli@0.31.1

      - name: 📚 Install dependencies
        run: npm ci

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: 🔑 Setup deployment keypair
        run: |
          echo "${{ secrets.SOLANA_DEPLOY_KEYPAIR }}" > deploy-keypair.json
          solana config set --keypair deploy-keypair.json
          solana config set --url ${{ env.TESTNET_RPC_URL }}

      - name: 💰 Check wallet balance
        run: |
          balance=$(solana balance | cut -d' ' -f1)
          echo "Wallet balance: $balance SOL"
          if (( $(echo "$balance < 10" | bc -l) )); then
            echo "Insufficient balance for deployment"
            exit 1
          fi

      - name: 🚀 Deploy to testnet
        run: npm run deploy:testnet

      - name: ✅ Verify deployment
        run: npm run verify:deployment

      - name: 🔄 Upload IDL
        run: |
          npm run idl:upgrade || npm run idl:init

      - name: 🧹 Cleanup
        run: rm -f deploy-keypair.json

  comprehensive-testing:
    name: 🧪 Comprehensive Testing
    runs-on: ubuntu-latest
    needs: [setup, testnet-deployment]
    if: always() && (needs.setup.outputs.test-type == 'full' || contains(needs.setup.outputs.test-type, 'only'))
    strategy:
      matrix:
        test-suite:
          - name: 'End-to-End Tests'
            command: 'test:testnet'
            condition: 'full'
          - name: 'Performance Benchmarks'
            command: 'test:performance'
            condition: 'full,performance-only'
          - name: 'Error Recovery Tests'
            command: 'test:error-recovery'
            condition: 'full,error-recovery-only'
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: ⚡ Install Solana CLI
        run: |
          sh -c "$(curl -sSfL https://release.solana.com/v2.1.0/install)"
          echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH

      - name: 📚 Install dependencies
        run: npm ci

      - name: 🔑 Setup test keypair
        run: |
          echo "${{ secrets.SOLANA_TEST_KEYPAIR }}" > test-keypair.json
          solana config set --keypair test-keypair.json
          solana config set --url ${{ env.TESTNET_RPC_URL }}

      - name: 💰 Fund test wallet
        run: |
          # Try to airdrop, but don't fail if it doesn't work
          solana airdrop 10 || echo "Airdrop failed, continuing with existing balance"
          solana balance

      - name: 🧪 Run ${{ matrix.test-suite.name }}
        if: contains(matrix.test-suite.condition, needs.setup.outputs.test-type)
        run: npm run ${{ matrix.test-suite.command }}
        continue-on-error: true

      - name: 📤 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ matrix.test-suite.name }}-results
          path: |
            test-results/
            benchmark-results/
            error-test-results/

      - name: 🧹 Cleanup
        run: rm -f test-keypair.json

  monitoring:
    name: 📊 Continuous Monitoring
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.test-type == 'monitoring-only' || github.event_name == 'schedule'
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: ⚡ Install Solana CLI
        run: |
          sh -c "$(curl -sSfL https://release.solana.com/v2.1.0/install)"
          echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH

      - name: 📚 Install dependencies
        run: npm ci

      - name: 🔑 Setup monitoring keypair
        run: |
          echo "${{ secrets.SOLANA_MONITOR_KEYPAIR }}" > monitor-keypair.json
          solana config set --keypair monitor-keypair.json
          solana config set --url ${{ env.TESTNET_RPC_URL }}

      - name: 📊 Run health checks
        run: |
          timeout 300 npm run monitor:testnet || echo "Monitoring completed"

      - name: 📈 Generate dashboard
        run: npm run monitor:dashboard

      - name: 📤 Upload monitoring results
        uses: actions/upload-artifact@v4
        with:
          name: monitoring-results
          path: |
            monitoring-data/
            dashboard.html

      - name: 🧹 Cleanup
        run: rm -f monitor-keypair.json

  ci-pipeline:
    name: 🔄 Full CI Pipeline
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.test-type == 'full' && github.event_name != 'schedule'
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: ⚡ Install Solana CLI
        run: |
          sh -c "$(curl -sSfL https://release.solana.com/v2.1.0/install)"
          echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH

      - name: 🔨 Install Anchor CLI
        run: |
          npm install -g @coral-xyz/anchor-cli@0.31.1

      - name: 📚 Install dependencies
        run: npm ci

      - name: 🔑 Setup CI keypair
        run: |
          echo "${{ secrets.SOLANA_CI_KEYPAIR }}" > ci-keypair.json
          solana config set --keypair ci-keypair.json
          solana config set --url ${{ env.TESTNET_RPC_URL }}

      - name: 🚀 Run full CI pipeline
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: npm run ci:pipeline

      - name: 📤 Upload CI results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ci-pipeline-results
          path: ci-results/

      - name: 🧹 Cleanup
        run: rm -f ci-keypair.json

  notification:
    name: 📢 Send Notifications
    runs-on: ubuntu-latest
    needs: [comprehensive-testing, monitoring, ci-pipeline]
    if: always() && (github.event_name == 'push' || failure())
    steps:
      - name: 📊 Collect results
        id: results
        run: |
          overall_status="success"
          
          if [ "${{ needs.comprehensive-testing.result }}" = "failure" ] || 
             [ "${{ needs.monitoring.result }}" = "failure" ] || 
             [ "${{ needs.ci-pipeline.result }}" = "failure" ]; then
            overall_status="failure"
          fi
          
          echo "status=$overall_status" >> $GITHUB_OUTPUT

      - name: 📢 Slack notification
        if: env.SLACK_WEBHOOK_URL
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ steps.results.outputs.status }}
          channel: '#ghostspeak-ci'
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 📢 GitHub summary
        run: |
          echo "## 🎯 GhostSpeak Testnet CI/CD Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ steps.results.outputs.status == 'success' && '✅ Success' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Test Type:** ${{ needs.setup.outputs.test-type }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Job Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Build & Test:** ${{ needs.build-and-test.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Audit:** ${{ needs.security-audit.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Testnet Deployment:** ${{ needs.testnet-deployment.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Comprehensive Testing:** ${{ needs.comprehensive-testing.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Monitoring:** ${{ needs.monitoring.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **CI Pipeline:** ${{ needs.ci-pipeline.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY