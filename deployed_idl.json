{
  "accounts": [
    {
      "discriminator": [
        174,
        118,
        140,
        42,
        3,
        207,
        16,
        145
      ],
      "name": "A2AMessage"
    },
    {
      "discriminator": [
        35,
        65,
        251,
        143,
        132,
        134,
        104,
        33
      ],
      "name": "A2ASession"
    },
    {
      "discriminator": [
        253,
        113,
        10,
        35,
        24,
        155,
        227,
        28
      ],
      "name": "A2AStatus"
    },
    {
      "discriminator": [
        47,
        166,
        112,
        147,
        155,
        197,
        86,
        7
      ],
      "name": "Agent"
    },
    {
      "discriminator": [
        167,
        87,
        249,
        0,
        146,
        197,
        209,
        158
      ],
      "name": "AgentIncentives"
    },
    {
      "discriminator": [
        128,
        155,
        95,
        241,
        66,
        207,
        166,
        59
      ],
      "name": "AgentVerification"
    },
    {
      "discriminator": [
        50,
        162,
        197,
        10,
        93,
        40,
        12,
        147
      ],
      "name": "AnalyticsDashboard"
    },
    {
      "discriminator": [
        252,
        241,
        152,
        150,
        74,
        0,
        119,
        175
      ],
      "name": "ArbitratorRegistry"
    },
    {
      "discriminator": [
        163,
        174,
        175,
        5,
        237,
        55,
        21,
        230
      ],
      "name": "AuctionMarketplace"
    },
    {
      "discriminator": [
        171,
        223,
        253,
        181,
        134,
        88,
        66,
        26
      ],
      "name": "AuditTrail"
    },
    {
      "discriminator": [
        80,
        240,
        220,
        203,
        97,
        75,
        125,
        183
      ],
      "name": "BulkDeal"
    },
    {
      "discriminator": [
        49,
        159,
        99,
        106,
        220,
        87,
        219,
        88
      ],
      "name": "Channel"
    },
    {
      "discriminator": [
        75,
        146,
        78,
        26,
        130,
        240,
        228,
        35
      ],
      "name": "ComplianceReport"
    },
    {
      "discriminator": [
        164,
        200,
        54,
        239,
        94,
        76,
        51,
        130
      ],
      "name": "DisputeCase"
    },
    {
      "discriminator": [
        213,
        106,
        173,
        92,
        14,
        72,
        162,
        175
      ],
      "name": "DynamicPricingEngine"
    },
    {
      "discriminator": [
        141,
        183,
        126,
        42,
        23,
        237,
        11,
        5
      ],
      "name": "Extension"
    },
    {
      "discriminator": [
        53,
        107,
        240,
        190,
        43,
        73,
        65,
        143
      ],
      "name": "GovernanceProposal"
    },
    {
      "discriminator": [
        148,
        35,
        75,
        198,
        179,
        216,
        77,
        84
      ],
      "name": "IncentiveProgram"
    },
    {
      "discriminator": [
        114,
        250,
        212,
        242,
        162,
        108,
        58,
        20
      ],
      "name": "JobApplication"
    },
    {
      "discriminator": [
        147,
        204,
        137,
        108,
        97,
        90,
        113,
        28
      ],
      "name": "JobContract"
    },
    {
      "discriminator": [
        204,
        119,
        64,
        204,
        100,
        12,
        26,
        127
      ],
      "name": "JobPosting"
    },
    {
      "discriminator": [
        198,
        187,
        239,
        13,
        141,
        42,
        92,
        67
      ],
      "name": "MarketAnalytics"
    },
    {
      "discriminator": [
        110,
        151,
        23,
        110,
        198,
        6,
        125,
        181
      ],
      "name": "Message"
    },
    {
      "discriminator": [
        224,
        116,
        121,
        186,
        68,
        161,
        79,
        236
      ],
      "name": "Multisig"
    },
    {
      "discriminator": [
        236,
        199,
        221,
        210,
        158,
        112,
        204,
        255
      ],
      "name": "NegotiationChatbot"
    },
    {
      "discriminator": [
        227,
        231,
        51,
        26,
        244,
        88,
        4,
        148
      ],
      "name": "Payment"
    },
    {
      "discriminator": [
        177,
        94,
        184,
        202,
        221,
        112,
        110,
        38
      ],
      "name": "RbacConfig"
    },
    {
      "discriminator": [
        243,
        98,
        232,
        67,
        71,
        49,
        173,
        6
      ],
      "name": "ReplicationRecord"
    },
    {
      "discriminator": [
        219,
        78,
        120,
        167,
        202,
        67,
        57,
        204
      ],
      "name": "ReplicationTemplate"
    },
    {
      "discriminator": [
        33,
        30,
        12,
        55,
        106,
        90,
        225,
        166
      ],
      "name": "ResaleMarket"
    },
    {
      "discriminator": [
        73,
        53,
        156,
        242,
        157,
        5,
        183,
        44
      ],
      "name": "RoyaltyStream"
    },
    {
      "discriminator": [
        117,
        173,
        54,
        52,
        146,
        147,
        124,
        211
      ],
      "name": "ServiceListing"
    },
    {
      "discriminator": [
        84,
        229,
        182,
        61,
        144,
        151,
        103,
        149
      ],
      "name": "ServicePurchase"
    },
    {
      "discriminator": [
        37,
        84,
        98,
        14,
        130,
        63,
        210,
        138
      ],
      "name": "UserRegistry"
    },
    {
      "discriminator": [
        135,
        198,
        137,
        54,
        172,
        172,
        212,
        84
      ],
      "name": "WorkDelivery"
    },
    {
      "discriminator": [
        67,
        109,
        86,
        157,
        94,
        117,
        205,
        9
      ],
      "name": "WorkOrder"
    }
  ],
  "address": "GssMyhkQPePLzByJsJadbQePZc6GtzGi22aQqW5opvUX",
  "errors": [
    {
      "code": 7000,
      "msg": "Agent is not active",
      "name": "AgentNotActive"
    },
    {
      "code": 7001,
      "msg": "Agent not found",
      "name": "AgentNotFound"
    },
    {
      "code": 7100,
      "msg": "Invalid price range",
      "name": "InvalidPriceRange"
    },
    {
      "code": 7101,
      "msg": "Invalid payment amount",
      "name": "InvalidPaymentAmount"
    },
    {
      "code": 7102,
      "msg": "Insufficient balance",
      "name": "InsufficientBalance"
    },
    {
      "code": 7103,
      "msg": "Payment already processed",
      "name": "PaymentAlreadyProcessed"
    },
    {
      "code": 7200,
      "msg": "Unauthorized access",
      "name": "UnauthorizedAccess"
    },
    {
      "code": 7201,
      "msg": "Invalid agent owner",
      "name": "InvalidAgentOwner"
    },
    {
      "code": 7300,
      "msg": "Invalid status transition",
      "name": "InvalidStatusTransition"
    },
    {
      "code": 7301,
      "msg": "Work order not found",
      "name": "WorkOrderNotFound"
    },
    {
      "code": 7302,
      "msg": "Service not found",
      "name": "ServiceNotFound"
    },
    {
      "code": 7303,
      "msg": "Invalid work order status",
      "name": "InvalidWorkOrderStatus"
    },
    {
      "code": 7304,
      "msg": "Invalid task status",
      "name": "InvalidTaskStatus"
    },
    {
      "code": 7305,
      "msg": "Invalid escrow status",
      "name": "InvalidEscrowStatus"
    },
    {
      "code": 7306,
      "msg": "Invalid report status",
      "name": "InvalidReportStatus"
    },
    {
      "code": 7307,
      "msg": "Invalid negotiation status",
      "name": "InvalidNegotiationStatus"
    },
    {
      "code": 7400,
      "msg": "Deadline passed",
      "name": "DeadlinePassed"
    },
    {
      "code": 7401,
      "msg": "Invalid deadline",
      "name": "InvalidDeadline"
    },
    {
      "code": 7403,
      "msg": "Update frequency too high",
      "name": "UpdateFrequencyTooHigh"
    },
    {
      "code": 7406,
      "msg": "Invalid period",
      "name": "InvalidPeriod"
    },
    {
      "code": 7407,
      "msg": "Invalid expiration",
      "name": "InvalidExpiration"
    },
    {
      "code": 7408,
      "msg": "Task deadline exceeded",
      "name": "TaskDeadlineExceeded"
    },
    {
      "code": 7409,
      "msg": "Negotiation expired",
      "name": "NegotiationExpired"
    },
    {
      "code": 7410,
      "msg": "Deal expired",
      "name": "DealExpired"
    },
    {
      "code": 7404,
      "msg": "Invalid bid",
      "name": "InvalidBid"
    },
    {
      "code": 7405,
      "msg": "Invalid application status",
      "name": "InvalidApplicationStatus"
    },
    {
      "code": 7411,
      "msg": "Auction duration too short",
      "name": "AuctionDurationTooShort"
    },
    {
      "code": 7412,
      "msg": "Auction duration too long",
      "name": "AuctionDurationTooLong"
    },
    {
      "code": 7413,
      "msg": "Bid increment too low",
      "name": "BidIncrementTooLow"
    },
    {
      "code": 7414,
      "msg": "Invalid starting price",
      "name": "InvalidStartingPrice"
    },
    {
      "code": 7415,
      "msg": "Auction not active",
      "name": "AuctionNotActive"
    },
    {
      "code": 7416,
      "msg": "Auction ended",
      "name": "AuctionEnded"
    },
    {
      "code": 7417,
      "msg": "Bid too low",
      "name": "BidTooLow"
    },
    {
      "code": 7418,
      "msg": "Auction not ended",
      "name": "AuctionNotEnded"
    },
    {
      "code": 7419,
      "msg": "Cannot cancel auction with bids",
      "name": "CannotCancelAuctionWithBids"
    },
    {
      "code": 7420,
      "msg": "Invalid amount",
      "name": "InvalidAmount"
    },
    {
      "code": 7421,
      "msg": "Invalid volume tier",
      "name": "InvalidVolumeTier"
    },
    {
      "code": 7422,
      "msg": "Invalid discount percentage",
      "name": "InvalidDiscountPercentage"
    },
    {
      "code": 7423,
      "msg": "Overlapping volume tiers",
      "name": "OverlappingVolumeTiers"
    },
    {
      "code": 7424,
      "msg": "Deal not active",
      "name": "DealNotActive"
    },
    {
      "code": 7425,
      "msg": "Deal full",
      "name": "DealFull"
    },
    {
      "code": 7426,
      "msg": "No participants",
      "name": "NoParticipants"
    },
    {
      "code": 7427,
      "msg": "Insufficient participants",
      "name": "InsufficientParticipants"
    },
    {
      "code": 7428,
      "msg": "Invalid min participants",
      "name": "InvalidMinParticipants"
    },
    {
      "code": 7429,
      "msg": "Invalid max participants",
      "name": "InvalidMaxParticipants"
    },
    {
      "code": 7500,
      "msg": "Input too long",
      "name": "InputTooLong"
    },
    {
      "code": 7501,
      "msg": "Name too long",
      "name": "NameTooLong"
    },
    {
      "code": 7502,
      "msg": "Message too long",
      "name": "MessageTooLong"
    },
    {
      "code": 7503,
      "msg": "Invalid rating",
      "name": "InvalidRating"
    },
    {
      "code": 7504,
      "msg": "Description too long",
      "name": "DescriptionTooLong"
    },
    {
      "code": 7505,
      "msg": "Title too long",
      "name": "TitleTooLong"
    },
    {
      "code": 7506,
      "msg": "Too many capabilities",
      "name": "TooManyCapabilities"
    },
    {
      "code": 7507,
      "msg": "Capability too long",
      "name": "CapabilityTooLong"
    },
    {
      "code": 7508,
      "msg": "Invalid genome hash",
      "name": "InvalidGenomeHash"
    },
    {
      "code": 7509,
      "msg": "Invalid service endpoint",
      "name": "InvalidServiceEndpoint"
    },
    {
      "code": 7510,
      "msg": "Invalid metadata URI",
      "name": "InvalidMetadataUri"
    },
    {
      "code": 7511,
      "msg": "Metadata URI too long",
      "name": "MetadataUriTooLong"
    },
    {
      "code": 7512,
      "msg": "Metrics too long",
      "name": "MetricsTooLong"
    },
    {
      "code": 7513,
      "msg": "Too many requirements",
      "name": "TooManyRequirements"
    },
    {
      "code": 7514,
      "msg": "Requirement too long",
      "name": "RequirementTooLong"
    },
    {
      "code": 7515,
      "msg": "No deliverables",
      "name": "NoDeliverables"
    },
    {
      "code": 7516,
      "msg": "Too many deliverables",
      "name": "TooManyDeliverables"
    },
    {
      "code": 7517,
      "msg": "IPFS hash too long",
      "name": "IpfsHashTooLong"
    },
    {
      "code": 7518,
      "msg": "Term too long",
      "name": "TermTooLong"
    },
    {
      "code": 7519,
      "msg": "Too many terms",
      "name": "TooManyTerms"
    },
    {
      "code": 7520,
      "msg": "Too many volume tiers",
      "name": "TooManyVolumeTiers"
    },
    {
      "code": 7521,
      "msg": "Too many bids",
      "name": "TooManyBids"
    },
    {
      "code": 7522,
      "msg": "Too many audit entries",
      "name": "TooManyAuditEntries"
    },
    {
      "code": 7523,
      "msg": "Too many top agents",
      "name": "TooManyTopAgents"
    },
    {
      "code": 7524,
      "msg": "Too many counter offers",
      "name": "TooManyCounterOffers"
    },
    {
      "code": 7525,
      "msg": "Task ID too long",
      "name": "TaskIdTooLong"
    },
    {
      "code": 7526,
      "msg": "Dispute reason too long",
      "name": "DisputeReasonTooLong"
    },
    {
      "code": 7527,
      "msg": "Completion proof too long",
      "name": "CompletionProofTooLong"
    },
    {
      "code": 7528,
      "msg": "Dispute details too long",
      "name": "DisputeDetailsTooLong"
    },
    {
      "code": 7529,
      "msg": "Resolution notes too long",
      "name": "ResolutionNotesTooLong"
    },
    {
      "code": 7800,
      "msg": "Arithmetic overflow",
      "name": "ArithmeticOverflow"
    },
    {
      "code": 7801,
      "msg": "Arithmetic underflow",
      "name": "ArithmeticUnderflow"
    },
    {
      "code": 7802,
      "msg": "Division by zero",
      "name": "DivisionByZero"
    },
    {
      "code": 7803,
      "msg": "Value exceeds maximum",
      "name": "ValueExceedsMaximum"
    },
    {
      "code": 7804,
      "msg": "Value below minimum",
      "name": "ValueBelowMinimum"
    },
    {
      "code": 8100,
      "msg": "Invalid configuration",
      "name": "InvalidConfiguration"
    },
    {
      "code": 8101,
      "msg": "Invalid offer",
      "name": "InvalidOffer"
    },
    {
      "code": 8104,
      "msg": "Service is not active",
      "name": "ServiceNotActive"
    },
    {
      "code": 8105,
      "msg": "Invalid percentage value",
      "name": "InvalidPercentage"
    },
    {
      "code": 8106,
      "msg": "Compute budget exceeded",
      "name": "ComputeBudgetExceeded"
    },
    {
      "code": 8107,
      "msg": "Job posting is not active",
      "name": "JobNotActive"
    },
    {
      "code": 8108,
      "msg": "Insufficient funds for operation",
      "name": "InsufficientFunds"
    },
    {
      "code": 8109,
      "msg": "Agent is already active",
      "name": "AgentAlreadyActive"
    },
    {
      "code": 8110,
      "msg": "Invalid reputation score",
      "name": "InvalidReputationScore"
    },
    {
      "code": 8111,
      "msg": "Invalid service configuration",
      "name": "InvalidServiceConfiguration"
    },
    {
      "code": 8112,
      "msg": "Invalid job status",
      "name": "InvalidJobStatus"
    },
    {
      "code": 8113,
      "msg": "Auction already ended",
      "name": "AuctionAlreadyEnded"
    },
    {
      "code": 8114,
      "msg": "Dispute case not found",
      "name": "DisputeCaseNotFound"
    },
    {
      "code": 8115,
      "msg": "Dispute already resolved",
      "name": "DisputeAlreadyResolved"
    },
    {
      "code": 8116,
      "msg": "Invalid dispute status",
      "name": "InvalidDisputeStatus"
    },
    {
      "code": 8117,
      "msg": "Too many evidence items",
      "name": "TooManyEvidenceItems"
    },
    {
      "code": 8118,
      "msg": "Invalid contract status",
      "name": "InvalidContractStatus"
    },
    {
      "code": 8119,
      "msg": "String too long",
      "name": "StringTooLong"
    },
    {
      "code": 8120,
      "msg": "Invalid volume",
      "name": "InvalidVolume"
    },
    {
      "code": 8121,
      "msg": "Invalid value",
      "name": "InvalidValue"
    },
    {
      "code": 8122,
      "msg": "Invalid duration",
      "name": "InvalidDuration"
    },
    {
      "code": 8123,
      "msg": "Job already filled",
      "name": "JobAlreadyFilled"
    },
    {
      "code": 8124,
      "msg": "Application not found",
      "name": "ApplicationNotFound"
    },
    {
      "code": 8125,
      "msg": "Application already processed",
      "name": "ApplicationAlreadyProcessed"
    },
    {
      "code": 8126,
      "msg": "Listing already active",
      "name": "ListingAlreadyActive"
    },
    {
      "code": 8127,
      "msg": "Listing not active",
      "name": "ListingNotActive"
    },
    {
      "code": 8128,
      "msg": "Invalid service type",
      "name": "InvalidServiceType"
    },
    {
      "code": 8129,
      "msg": "Agent already registered",
      "name": "AgentAlreadyRegistered"
    },
    {
      "code": 8130,
      "msg": "Invalid agent status",
      "name": "InvalidAgentStatus"
    },
    {
      "code": 8131,
      "msg": "Message not found",
      "name": "MessageNotFound"
    },
    {
      "code": 8132,
      "msg": "Invalid message status",
      "name": "InvalidMessageStatus"
    },
    {
      "code": 8133,
      "msg": "Channel not found",
      "name": "ChannelNotFound"
    },
    {
      "code": 8134,
      "msg": "Channel already exists",
      "name": "ChannelAlreadyExists"
    },
    {
      "code": 8135,
      "msg": "Invalid channel configuration",
      "name": "InvalidChannelConfiguration"
    },
    {
      "code": 8200,
      "msg": "Work order already exists",
      "name": "WorkOrderAlreadyExists"
    },
    {
      "code": 8136,
      "msg": "Invalid delivery status",
      "name": "InvalidDeliveryStatus"
    },
    {
      "code": 8137,
      "msg": "Escrow not found",
      "name": "EscrowNotFound"
    },
    {
      "code": 8138,
      "msg": "Escrow already released",
      "name": "EscrowAlreadyReleased"
    },
    {
      "code": 8139,
      "msg": "Invalid escrow amount",
      "name": "InvalidEscrowAmount"
    },
    {
      "code": 8140,
      "msg": "Negotiation not found",
      "name": "NegotiationNotFound"
    },
    {
      "code": 8141,
      "msg": "Invalid offer amount",
      "name": "InvalidOfferAmount"
    },
    {
      "code": 8142,
      "msg": "Royalty configuration invalid",
      "name": "RoyaltyConfigurationInvalid"
    },
    {
      "code": 8143,
      "msg": "Invalid royalty percentage",
      "name": "InvalidRoyaltyPercentage"
    },
    {
      "code": 8144,
      "msg": "Analytics not enabled",
      "name": "AnalyticsNotEnabled"
    },
    {
      "code": 8145,
      "msg": "Invalid metrics data",
      "name": "InvalidMetricsData"
    },
    {
      "code": 8146,
      "msg": "Extension not found",
      "name": "ExtensionNotFound"
    },
    {
      "code": 8147,
      "msg": "Extension already enabled",
      "name": "ExtensionAlreadyEnabled"
    },
    {
      "code": 8148,
      "msg": "Invalid extension configuration",
      "name": "InvalidExtensionConfiguration"
    },
    {
      "code": 8149,
      "msg": "Incentive pool exhausted",
      "name": "IncentivePoolExhausted"
    },
    {
      "code": 8150,
      "msg": "Invalid incentive configuration",
      "name": "InvalidIncentiveConfiguration"
    },
    {
      "code": 8151,
      "msg": "Compliance check failed",
      "name": "ComplianceCheckFailed"
    },
    {
      "code": 8152,
      "msg": "Governance proposal invalid",
      "name": "GovernanceProposalInvalid"
    },
    {
      "code": 8153,
      "msg": "Voting period ended",
      "name": "VotingPeriodEnded"
    },
    {
      "code": 8154,
      "msg": "Already voted",
      "name": "AlreadyVoted"
    },
    {
      "code": 8155,
      "msg": "Insufficient voting power",
      "name": "InsufficientVotingPower"
    },
    {
      "code": 8156,
      "msg": "Replication not allowed",
      "name": "ReplicationNotAllowed"
    },
    {
      "code": 8157,
      "msg": "Invalid replication config",
      "name": "InvalidReplicationConfig"
    },
    {
      "code": 8158,
      "msg": "Price model not supported",
      "name": "PriceModelNotSupported"
    },
    {
      "code": 8159,
      "msg": "Invalid price configuration",
      "name": "InvalidPriceConfiguration"
    },
    {
      "code": 8160,
      "msg": "Bulk deal not found",
      "name": "BulkDealNotFound"
    },
    {
      "code": 8161,
      "msg": "Invalid participant count",
      "name": "InvalidParticipantCount"
    },
    {
      "code": 8162,
      "msg": "Deal already finalized",
      "name": "DealAlreadyFinalized"
    },
    {
      "code": 8163,
      "msg": "Invalid A2A protocol message",
      "name": "InvalidA2AProtocolMessage"
    },
    {
      "code": 8164,
      "msg": "Protocol version mismatch",
      "name": "ProtocolVersionMismatch"
    },
    {
      "code": 8165,
      "msg": "Task not found",
      "name": "TaskNotFound"
    },
    {
      "code": 8166,
      "msg": "Task already completed",
      "name": "TaskAlreadyCompleted"
    },
    {
      "code": 8167,
      "msg": "Invalid task configuration",
      "name": "InvalidTaskConfiguration"
    },
    {
      "code": 8168,
      "msg": "Report not found",
      "name": "ReportNotFound"
    },
    {
      "code": 8169,
      "msg": "Invalid report data",
      "name": "InvalidReportData"
    },
    {
      "code": 8170,
      "msg": "Access denied",
      "name": "AccessDenied"
    },
    {
      "code": 8171,
      "msg": "Operation not supported",
      "name": "OperationNotSupported"
    },
    {
      "code": 8172,
      "msg": "Resource locked",
      "name": "ResourceLocked"
    },
    {
      "code": 8173,
      "msg": "Rate limit exceeded",
      "name": "RateLimitExceeded"
    },
    {
      "code": 8174,
      "msg": "Invalid state transition",
      "name": "InvalidStateTransition"
    },
    {
      "code": 8175,
      "msg": "Data corruption detected",
      "name": "DataCorruptionDetected"
    },
    {
      "code": 8176,
      "msg": "Signature verification failed",
      "name": "SignatureVerificationFailed"
    },
    {
      "code": 8177,
      "msg": "Token transfer failed",
      "name": "TokenTransferFailed"
    },
    {
      "code": 8178,
      "msg": "Account not initialized",
      "name": "AccountNotInitialized"
    },
    {
      "code": 8179,
      "msg": "Account already initialized",
      "name": "AccountAlreadyInitialized"
    },
    {
      "code": 8180,
      "msg": "Invalid account owner",
      "name": "InvalidAccountOwner"
    },
    {
      "code": 8181,
      "msg": "Maximum retries exceeded",
      "name": "MaximumRetriesExceeded"
    },
    {
      "code": 8182,
      "msg": "Operation timed out",
      "name": "OperationTimedOut"
    },
    {
      "code": 8183,
      "msg": "Invalid input format",
      "name": "InvalidInputFormat"
    },
    {
      "code": 8184,
      "msg": "Feature not enabled",
      "name": "FeatureNotEnabled"
    },
    {
      "code": 8185,
      "msg": "Maintenance mode active",
      "name": "MaintenanceModeActive"
    },
    {
      "code": 8186,
      "msg": "Invalid input length",
      "name": "InvalidInputLength"
    },
    {
      "code": 8187,
      "msg": "Invalid parameter",
      "name": "InvalidParameter"
    },
    {
      "code": 8188,
      "msg": "Invalid deal status",
      "name": "InvalidDealStatus"
    },
    {
      "code": 8189,
      "msg": "Dispute window expired",
      "name": "DisputeWindowExpired"
    },
    {
      "code": 8190,
      "msg": "Evidence window expired",
      "name": "EvidenceWindowExpired"
    },
    {
      "code": 8191,
      "msg": "Too many evidence submissions",
      "name": "TooManyEvidenceSubmissions"
    },
    {
      "code": 8192,
      "msg": "Unauthorized arbitrator",
      "name": "UnauthorizedArbitrator"
    },
    {
      "code": 8193,
      "msg": "Invalid transaction status",
      "name": "InvalidTransactionStatus"
    },
    {
      "code": 8194,
      "msg": "Invalid extension status",
      "name": "InvalidExtensionStatus"
    }
  ],
  "events": [
    {
      "discriminator": [
        123,
        145,
        166,
        160,
        104,
        119,
        93,
        53
      ],
      "name": "A2AMessageSentEvent"
    },
    {
      "discriminator": [
        21,
        190,
        192,
        182,
        200,
        253,
        231,
        111
      ],
      "name": "A2ASessionCreatedEvent"
    },
    {
      "discriminator": [
        238,
        209,
        176,
        180,
        213,
        142,
        147,
        200
      ],
      "name": "A2AStatusUpdatedEvent"
    },
    {
      "discriminator": [
        149,
        125,
        121,
        200,
        252,
        250,
        0,
        211
      ],
      "name": "AgentListedForResaleEvent"
    },
    {
      "discriminator": [
        5,
        45,
        126,
        32,
        57,
        44,
        245,
        15
      ],
      "name": "AgentRegisteredEvent"
    },
    {
      "discriminator": [
        51,
        253,
        85,
        174,
        28,
        72,
        249,
        16
      ],
      "name": "AgentReplicatedEvent"
    },
    {
      "discriminator": [
        7,
        175,
        52,
        50,
        93,
        111,
        230,
        106
      ],
      "name": "AgentServiceUpdatedEvent"
    },
    {
      "discriminator": [
        248,
        205,
        146,
        155,
        98,
        114,
        249,
        66
      ],
      "name": "AgentStatusChangedEvent"
    },
    {
      "discriminator": [
        15,
        135,
        66,
        64,
        154,
        128,
        55,
        25
      ],
      "name": "AgentUpdatedEvent"
    },
    {
      "discriminator": [
        155,
        196,
        56,
        222,
        243,
        170,
        228,
        57
      ],
      "name": "AnalyticsDashboardCreatedEvent"
    },
    {
      "discriminator": [
        237,
        91,
        28,
        45,
        70,
        218,
        190,
        226
      ],
      "name": "AnalyticsDashboardUpdatedEvent"
    },
    {
      "discriminator": [
        196,
        61,
        120,
        31,
        110,
        42,
        82,
        6
      ],
      "name": "AuctionBidPlacedEvent"
    },
    {
      "discriminator": [
        44,
        52,
        243,
        152,
        206,
        124,
        105,
        122
      ],
      "name": "AuctionFailedEvent"
    },
    {
      "discriminator": [
        59,
        103,
        166,
        69,
        255,
        118,
        123,
        179
      ],
      "name": "AuctionFinalizedEvent"
    },
    {
      "discriminator": [
        252,
        47,
        243,
        232,
        231,
        25,
        251,
        236
      ],
      "name": "AuditTrailInitializedEvent"
    },
    {
      "discriminator": [
        221,
        179,
        117,
        168,
        221,
        184,
        182,
        184
      ],
      "name": "BulkDealBatchExecutedEvent"
    },
    {
      "discriminator": [
        95,
        136,
        37,
        54,
        28,
        65,
        191,
        57
      ],
      "name": "BulkDealCreatedEvent"
    },
    {
      "discriminator": [
        193,
        132,
        235,
        40,
        26,
        79,
        164,
        93
      ],
      "name": "ChannelCreatedEvent"
    },
    {
      "discriminator": [
        38,
        111,
        81,
        42,
        29,
        62,
        231,
        101
      ],
      "name": "ComplianceReportGeneratedEvent"
    },
    {
      "discriminator": [
        199,
        139,
        253,
        16,
        231,
        63,
        94,
        177
      ],
      "name": "CounterOfferMadeEvent"
    },
    {
      "discriminator": [
        239,
        93,
        104,
        16,
        111,
        116,
        37,
        212
      ],
      "name": "DisputeEvidenceSubmittedEvent"
    },
    {
      "discriminator": [
        210,
        85,
        92,
        64,
        250,
        199,
        242,
        51
      ],
      "name": "DisputeFiledEvent"
    },
    {
      "discriminator": [
        152,
        37,
        98,
        245,
        229,
        39,
        150,
        78
      ],
      "name": "DisputeResolvedEvent"
    },
    {
      "discriminator": [
        169,
        176,
        37,
        83,
        47,
        242,
        74,
        138
      ],
      "name": "DynamicPricingEngineCreatedEvent"
    },
    {
      "discriminator": [
        82,
        12,
        190,
        245,
        144,
        231,
        180,
        199
      ],
      "name": "DynamicPricingUpdatedEvent"
    },
    {
      "discriminator": [
        75,
        194,
        2,
        110,
        240,
        104,
        26,
        182
      ],
      "name": "ExtensionApprovedEvent"
    },
    {
      "discriminator": [
        182,
        182,
        117,
        56,
        255,
        6,
        69,
        240
      ],
      "name": "ExtensionRegisteredEvent"
    },
    {
      "discriminator": [
        54,
        224,
        29,
        242,
        38,
        174,
        4,
        27
      ],
      "name": "GovernanceProposalCreatedEvent"
    },
    {
      "discriminator": [
        227,
        225,
        110,
        170,
        110,
        42,
        180,
        255
      ],
      "name": "IncentiveDistributedEvent"
    },
    {
      "discriminator": [
        25,
        168,
        192,
        110,
        5,
        242,
        148,
        221
      ],
      "name": "IncentiveProgramCreatedEvent"
    },
    {
      "discriminator": [
        143,
        196,
        128,
        57,
        175,
        112,
        14,
        117
      ],
      "name": "JobApplicationAcceptedEvent"
    },
    {
      "discriminator": [
        128,
        9,
        157,
        181,
        198,
        190,
        42,
        217
      ],
      "name": "JobApplicationSubmittedEvent"
    },
    {
      "discriminator": [
        127,
        139,
        189,
        150,
        60,
        213,
        127,
        82
      ],
      "name": "JobPostingCreatedEvent"
    },
    {
      "discriminator": [
        240,
        93,
        142,
        97,
        81,
        25,
        141,
        29
      ],
      "name": "MarketAnalyticsCreatedEvent"
    },
    {
      "discriminator": [
        194,
        71,
        226,
        175,
        148,
        98,
        171,
        45
      ],
      "name": "MarketAnalyticsUpdatedEvent"
    },
    {
      "discriminator": [
        210,
        253,
        9,
        196,
        155,
        27,
        172,
        145
      ],
      "name": "MessageSentEvent"
    },
    {
      "discriminator": [
        98,
        203,
        248,
        192,
        188,
        46,
        210,
        62
      ],
      "name": "MultisigCreatedEvent"
    },
    {
      "discriminator": [
        94,
        103,
        45,
        95,
        10,
        152,
        202,
        62
      ],
      "name": "NegotiationInitiatedEvent"
    },
    {
      "discriminator": [
        8,
        225,
        83,
        11,
        145,
        76,
        87,
        160
      ],
      "name": "PaymentProcessedEvent"
    },
    {
      "discriminator": [
        26,
        168,
        101,
        124,
        166,
        113,
        50,
        223
      ],
      "name": "RbacConfigInitializedEvent"
    },
    {
      "discriminator": [
        205,
        171,
        36,
        134,
        104,
        23,
        114,
        150
      ],
      "name": "ReplicationTemplateCreatedEvent"
    },
    {
      "discriminator": [
        38,
        38,
        12,
        177,
        30,
        147,
        116,
        133
      ],
      "name": "RoyaltyStreamCreatedEvent"
    },
    {
      "discriminator": [
        139,
        113,
        251,
        127,
        65,
        98,
        220,
        67
      ],
      "name": "ServiceAuctionCreatedEvent"
    },
    {
      "discriminator": [
        84,
        213,
        59,
        112,
        127,
        249,
        42,
        21
      ],
      "name": "ServiceListingCreatedEvent"
    },
    {
      "discriminator": [
        66,
        12,
        241,
        6,
        250,
        198,
        35,
        104
      ],
      "name": "ServicePurchasedEvent"
    },
    {
      "discriminator": [
        176,
        81,
        52,
        110,
        33,
        37,
        202,
        135
      ],
      "name": "TopAgentAddedEvent"
    },
    {
      "discriminator": [
        22,
        59,
        124,
        102,
        44,
        216,
        243,
        201
      ],
      "name": "WorkDeliverySubmittedEvent"
    },
    {
      "discriminator": [
        228,
        45,
        64,
        93,
        47,
        35,
        106,
        82
      ],
      "name": "WorkOrderCreatedEvent"
    }
  ],
  "instructions": [
    {
      "accounts": [
        {
          "name": "job_contract",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  106,
                  111,
                  98,
                  95,
                  99,
                  111,
                  110,
                  116,
                  114,
                  97,
                  99,
                  116
                ]
              },
              {
                "kind": "account",
                "path": "job_posting"
              },
              {
                "kind": "account",
                "path": "job_application"
              }
            ]
          },
          "writable": true
        },
        {
          "name": "job_posting",
          "writable": true
        },
        {
          "name": "job_application",
          "writable": true
        },
        {
          "name": "employer",
          "signer": true,
          "writable": true
        },
        {
          "address": "11111111111111111111111111111111",
          "name": "system_program"
        }
      ],
      "args": [],
      "discriminator": [
        191,
        161,
        93,
        207,
        225,
        58,
        71,
        16
      ],
      "name": "accept_job_application"
    },
    {
      "accounts": [
        {
          "docs": [
            "Agent account with canonical PDA validation"
          ],
          "name": "agent_account",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  97,
                  103,
                  101,
                  110,
                  116
                ]
              },
              {
                "kind": "account",
                "path": "signer"
              },
              {
                "kind": "arg",
                "path": "agent_id"
              }
            ]
          },
          "writable": true
        },
        {
          "docs": [
            "Enhanced authority verification"
          ],
          "name": "signer",
          "signer": true,
          "writable": true
        },
        {
          "address": "SysvarC1ock11111111111111111111111111111111",
          "docs": [
            "Clock sysvar for rate limiting"
          ],
          "name": "clock"
        }
      ],
      "args": [
        {
          "name": "agent_id",
          "type": "string"
        }
      ],
      "discriminator": [
        252,
        139,
        87,
        21,
        195,
        152,
        29,
        217
      ],
      "name": "activate_agent"
    },
    {
      "accounts": [
        {
          "docs": [
            "Market analytics account with canonical bump validation"
          ],
          "name": "market_analytics",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  109,
                  97,
                  114,
                  107,
                  101,
                  116,
                  95,
                  97,
                  110,
                  97,
                  108,
                  121,
                  116,
                  105,
                  99,
                  115
                ]
              },
              {
                "account": "MarketAnalytics",
                "kind": "account",
                "path": "market_analytics.period_start"
              },
              {
                "account": "MarketAnalytics",
                "kind": "account",
                "path": "market_analytics.period_end"
              }
            ]
          },
          "writable": true
        },
        {
          "docs": [
            "Enhanced authority verification"
          ],
          "name": "authority",
          "signer": true
        },
        {
          "address": "SysvarC1ock11111111111111111111111111111111",
          "docs": [
            "Clock sysvar for timestamp validation"
          ],
          "name": "clock"
        }
      ],
      "args": [
        {
          "name": "agent",
          "type": "pubkey"
        }
      ],
      "discriminator": [
        9,
        96,
        62,
        59,
        180,
        205,
        102,
        11
      ],
      "name": "add_top_agent"
    },
    {
      "accounts": [
        {
          "name": "job_application",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  106,
                  111,
                  98,
                  95,
                  97,
                  112,
                  112,
                  108,
                  105,
                  99,
                  97,
                  116,
                  105,
                  111,
                  110
                ]
              },
              {
                "kind": "account",
                "path": "job_posting"
              },
              {
                "kind": "account",
                "path": "agent"
              }
            ]
          },
          "writable": true
        },
        {
          "name": "job_posting",
          "writable": true
        },
        {
          "name": "agent"
        },
        {
          "name": "agent_owner",
          "signer": true,
          "writable": true
        },
        {
          "address": "11111111111111111111111111111111",
          "name": "system_program"
        }
      ],
      "args": [
        {
          "name": "application_data",
          "type": {
            "defined": {
              "name": "JobApplicationData"
            }
          }
        }
      ],
      "discriminator": [
        0,
        252,
        167,
        244,
        145,
        90,
        227,
        29
      ],
      "name": "apply_to_job"
    },
    {
      "accounts": [
        {
          "docs": [
            "Extension account with canonical validation"
          ],
          "name": "extension",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  101,
                  120,
                  116,
                  101,
                  110,
                  115,
                  105,
                  111,
                  110
                ]
              },
              {
                "account": "Extension",
                "kind": "account",
                "path": "extension.developer"
              },
              {
                "account": "Extension",
                "kind": "account",
                "path": "extension.metadata.name"
              }
            ]
          },
          "writable": true
        },
        {
          "docs": [
            "Enhanced authority verification - only protocol admin"
          ],
          "name": "authority",
          "signer": true
        },
        {
          "address": "SysvarC1ock11111111111111111111111111111111",
          "docs": [
            "Clock sysvar for timestamp validation"
          ],
          "name": "clock"
        }
      ],
      "args": [],
      "discriminator": [
        202,
        138,
        100,
        241,
        89,
        154,
        3,
        53
      ],
      "name": "approve_extension"
    },
    {
      "accounts": [
        {
          "name": "session",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  97,
                  50,
                  97,
                  95,
                  115,
                  101,
                  115,
                  115,
                  105,
                  111,
                  110
                ]
              },
              {
                "kind": "account",
                "path": "creator"
              }
            ]
          },
          "writable": true
        },
        {
          "name": "creator",
          "signer": true,
          "writable": true
        },
        {
          "address": "11111111111111111111111111111111",
          "name": "system_program"
        }
      ],
      "args": [
        {
          "name": "session_data",
          "type": {
            "defined": {
              "name": "A2ASessionData"
            }
          }
        }
      ],
      "discriminator": [
        22,
        57,
        77,
        239,
        115,
        215,
        61,
        131
      ],
      "name": "create_a2a_session"
    },
    {
      "accounts": [
        {
          "docs": [
            "Dashboard account with collision prevention"
          ],
          "name": "dashboard",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  97,
                  110,
                  97,
                  108,
                  121,
                  116,
                  105,
                  99,
                  115
                ]
              },
              {
                "kind": "account",
                "path": "owner"
              },
              {
                "kind": "arg",
                "path": "dashboard_id"
              }
            ]
          },
          "writable": true
        },
        {
          "docs": [
            "User registry for rate limiting and spam prevention"
          ],
          "name": "user_registry",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  117,
                  115,
                  101,
                  114,
                  95,
                  114,
                  101,
                  103,
                  105,
                  115,
                  116,
                  114,
                  121
                ]
              },
              {
                "kind": "account",
                "path": "owner"
              }
            ]
          },
          "writable": true
        },
        {
          "docs": [
            "Enhanced authority verification"
          ],
          "name": "owner",
          "signer": true,
          "writable": true
        },
        {
          "address": "11111111111111111111111111111111",
          "docs": [
            "System program for account creation"
          ],
          "name": "system_program"
        },
        {
          "address": "SysvarC1ock11111111111111111111111111111111",
          "docs": [
            "Clock sysvar for timestamp validation"
          ],
          "name": "clock"
        }
      ],
      "args": [
        {
          "name": "dashboard_id",
          "type": "u64"
        },
        {
          "name": "metrics",
          "type": "string"
        }
      ],
      "discriminator": [
        160,
        237,
        52,
        23,
        118,
        243,
        100,
        75
      ],
      "name": "create_analytics_dashboard"
    },
    {
      "accounts": [
        {
          "docs": [
            "Bulk deal account with collision prevention"
          ],
          "name": "deal",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  98,
                  117,
                  108,
                  107,
                  95,
                  100,
                  101,
                  97,
                  108
                ]
              },
              {
                "kind": "account",
                "path": "agent"
              },
              {
                "kind": "account",
                "path": "customer"
              },
              {
                "kind": "arg",
                "path": "deal_data.deal_id"
              }
            ]
          },
          "writable": true
        },
        {
          "docs": [
            "Agent account with enhanced constraints"
          ],
          "name": "agent"
        },
        {
          "docs": [
            "User registry for rate limiting and spam prevention"
          ],
          "name": "user_registry",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  117,
                  115,
                  101,
                  114,
                  95,
                  114,
                  101,
                  103,
                  105,
                  115,
                  116,
                  114,
                  121
                ]
              },
              {
                "kind": "account",
                "path": "customer"
              }
            ]
          },
          "writable": true
        },
        {
          "docs": [
            "Enhanced customer verification"
          ],
          "name": "customer",
          "signer": true,
          "writable": true
        },
        {
          "address": "11111111111111111111111111111111",
          "docs": [
            "System program for account creation"
          ],
          "name": "system_program"
        },
        {
          "address": "SysvarC1ock11111111111111111111111111111111",
          "docs": [
            "Clock sysvar for timestamp validation"
          ],
          "name": "clock"
        }
      ],
      "args": [
        {
          "name": "deal_data",
          "type": {
            "defined": {
              "name": "BulkDealData"
            }
          }
        }
      ],
      "discriminator": [
        133,
        143,
        169,
        255,
        188,
        189,
        104,
        216
      ],
      "name": "create_bulk_deal"
    },
    {
      "accounts": [
        {
          "name": "channel",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  99,
                  104,
                  97,
                  110,
                  110,
                  101,
                  108
                ]
              },
              {
                "kind": "account",
                "path": "creator"
              },
              {
                "kind": "arg",
                "path": "channel_data.channel_id"
              }
            ]
          },
          "writable": true
        },
        {
          "name": "creator",
          "signer": true,
          "writable": true
        },
        {
          "address": "11111111111111111111111111111111",
          "name": "system_program"
        }
      ],
      "args": [
        {
          "name": "channel_data",
          "type": {
            "defined": {
              "name": "ChannelCreationData"
            }
          }
        }
      ],
      "discriminator": [
        37,
        105,
        253,
        99,
        87,
        46,
        223,
        20
      ],
      "name": "create_channel"
    },
    {
      "accounts": [
        {
          "name": "engine",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  100,
                  121,
                  110,
                  97,
                  109,
                  105,
                  99,
                  95,
                  112,
                  114,
                  105,
                  99,
                  105,
                  110,
                  103
                ]
              },
              {
                "kind": "account",
                "path": "agent"
              }
            ]
          },
          "writable": true
        },
        {
          "name": "agent"
        },
        {
          "name": "owner",
          "signer": true,
          "writable": true
        },
        {
          "address": "11111111111111111111111111111111",
          "name": "system_program"
        }
      ],
      "args": [
        {
          "name": "config",
          "type": {
            "defined": {
              "name": "DynamicPricingConfig"
            }
          }
        }
      ],
      "discriminator": [
        251,
        20,
        25,
        4,
        140,
        172,
        5,
        167
      ],
      "name": "create_dynamic_pricing_engine"
    },
    {
      "accounts": [
        {
          "name": "program",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  105,
                  110,
                  99,
                  101,
                  110,
                  116,
                  105,
                  118,
                  101,
                  95,
                  112,
                  114,
                  111,
                  103,
                  114,
                  97,
                  109
                ]
              },
              {
                "kind": "account",
                "path": "creator"
              }
            ]
          },
          "writable": true
        },
        {
          "name": "creator",
          "signer": true,
          "writable": true
        },
        {
          "address": "11111111111111111111111111111111",
          "name": "system_program"
        }
      ],
      "args": [
        {
          "name": "config",
          "type": {
            "defined": {
              "name": "IncentiveConfig"
            }
          }
        }
      ],
      "discriminator": [
        115,
        222,
        207,
        231,
        169,
        56,
        125,
        153
      ],
      "name": "create_incentive_program"
    },
    {
      "accounts": [
        {
          "name": "job_posting",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  106,
                  111,
                  98,
                  95,
                  112,
                  111,
                  115,
                  116,
                  105,
                  110,
                  103
                ]
              },
              {
                "kind": "account",
                "path": "employer"
              }
            ]
          },
          "writable": true
        },
        {
          "name": "employer",
          "signer": true,
          "writable": true
        },
        {
          "address": "11111111111111111111111111111111",
          "name": "system_program"
        }
      ],
      "args": [
        {
          "name": "job_data",
          "type": {
            "defined": {
              "name": "JobPostingData"
            }
          }
        }
      ],
      "discriminator": [
        71,
        93,
        23,
        166,
        103,
        210,
        218,
        105
      ],
      "name": "create_job_posting"
    },
    {
      "accounts": [
        {
          "docs": [
            "Market analytics account with enhanced PDA security"
          ],
          "name": "market_analytics",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  109,
                  97,
                  114,
                  107,
                  101,
                  116,
                  95,
                  97,
                  110,
                  97,
                  108,
                  121,
                  116,
                  105,
                  99,
                  115
                ]
              },
              {
                "kind": "arg",
                "path": "period_start"
              },
              {
                "kind": "arg",
                "path": "period_end"
              }
            ]
          },
          "writable": true
        },
        {
          "docs": [
            "Enhanced authority verification - must be protocol admin"
          ],
          "name": "authority",
          "signer": true,
          "writable": true
        },
        {
          "address": "11111111111111111111111111111111",
          "docs": [
            "System program for account creation"
          ],
          "name": "system_program"
        },
        {
          "address": "SysvarC1ock11111111111111111111111111111111",
          "docs": [
            "Clock sysvar for timestamp validation"
          ],
          "name": "clock"
        }
      ],
      "args": [
        {
          "name": "period_start",
          "type": "i64"
        },
        {
          "name": "period_end",
          "type": "i64"
        }
      ],
      "discriminator": [
        72,
        76,
        122,
        193,
        232,
        239,
        106,
        81
      ],
      "name": "create_market_analytics"
    },
    {
      "accounts": [
        {
          "name": "multisig",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  109,
                  117,
                  108,
                  116,
                  105,
                  115,
                  105,
                  103
                ]
              },
              {
                "kind": "account",
                "path": "owner"
              },
              {
                "kind": "arg",
                "path": "multisig_id"
              }
            ]
          },
          "writable": true
        },
        {
          "name": "owner",
          "signer": true,
          "writable": true
        },
        {
          "address": "11111111111111111111111111111111",
          "name": "system_program"
        }
      ],
      "args": [
        {
          "name": "multisig_id",
          "type": "u64"
        },
        {
          "name": "threshold",
          "type": "u8"
        },
        {
          "name": "signers",
          "type": {
            "vec": "pubkey"
          }
        },
        {
          "name": "config",
          "type": {
            "defined": {
              "name": "MultisigConfig"
            }
          }
        }
      ],
      "discriminator": [
        148,
        146,
        240,
        10,
        226,
        215,
        167,
        174
      ],
      "name": "create_multisig"
    },
    {
      "accounts": [
        {
          "name": "replication_template",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  114,
                  101,
                  112,
                  108,
                  105,
                  99,
                  97,
                  116,
                  105,
                  111,
                  110,
                  95,
                  116,
                  101,
                  109,
                  112,
                  108,
                  97,
                  116,
                  101
                ]
              },
              {
                "kind": "account",
                "path": "source_agent"
              }
            ]
          },
          "writable": true
        },
        {
          "name": "source_agent"
        },
        {
          "name": "creator",
          "signer": true,
          "writable": true
        },
        {
          "address": "SysvarC1ock11111111111111111111111111111111",
          "name": "clock"
        },
        {
          "address": "11111111111111111111111111111111",
          "name": "system_program"
        }
      ],
      "args": [
        {
          "name": "template_data",
          "type": {
            "defined": {
              "name": "ReplicationTemplateData"
            }
          }
        }
      ],
      "discriminator": [
        58,
        37,
        131,
        238,
        116,
        165,
        200,
        193
      ],
      "name": "create_replication_template"
    },
    {
      "accounts": [
        {
          "name": "stream",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  114,
                  111,
                  121,
                  97,
                  108,
                  116,
                  121,
                  95,
                  115,
                  116,
                  114,
                  101,
                  97,
                  109
                ]
              },
              {
                "kind": "account",
                "path": "agent"
              }
            ]
          },
          "writable": true
        },
        {
          "name": "agent"
        },
        {
          "name": "creator",
          "signer": true,
          "writable": true
        },
        {
          "address": "11111111111111111111111111111111",
          "name": "system_program"
        }
      ],
      "args": [
        {
          "name": "config",
          "type": {
            "defined": {
              "name": "RoyaltyConfig"
            }
          }
        }
      ],
      "discriminator": [
        139,
        213,
        158,
        201,
        140,
        251,
        236,
        89
      ],
      "name": "create_royalty_stream"
    },
    {
      "accounts": [
        {
          "docs": [
            "Auction account with canonical PDA validation and collision prevention"
          ],
          "name": "auction",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  97,
                  117,
                  99,
                  116,
                  105,
                  111,
                  110
                ]
              },
              {
                "kind": "account",
                "path": "agent"
              },
              {
                "kind": "account",
                "path": "creator"
              }
            ]
          },
          "writable": true
        },
        {
          "docs": [
            "Agent account with enhanced constraints"
          ],
          "name": "agent"
        },
        {
          "docs": [
            "User registry for rate limiting and spam prevention"
          ],
          "name": "user_registry"
        },
        {
          "docs": [
            "Enhanced authority verification"
          ],
          "name": "creator",
          "signer": true,
          "writable": true
        },
        {
          "address": "11111111111111111111111111111111",
          "docs": [
            "System program for account creation"
          ],
          "name": "system_program"
        },
        {
          "address": "SysvarC1ock11111111111111111111111111111111",
          "docs": [
            "Clock sysvar for timestamp validation"
          ],
          "name": "clock"
        }
      ],
      "args": [
        {
          "name": "auction_data",
          "type": {
            "defined": {
              "name": "AuctionData"
            }
          }
        }
      ],
      "discriminator": [
        236,
        178,
        59,
        67,
        226,
        82,
        27,
        209
      ],
      "name": "create_service_auction"
    },
    {
      "accounts": [
        {
          "docs": [
            "Service listing account with enhanced PDA security"
          ],
          "name": "service_listing",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  115,
                  101,
                  114,
                  118,
                  105,
                  99,
                  101,
                  95,
                  108,
                  105,
                  115,
                  116,
                  105,
                  110,
                  103
                ]
              },
              {
                "kind": "account",
                "path": "creator"
              },
              {
                "kind": "arg",
                "path": "listing_id"
              }
            ]
          },
          "writable": true
        },
        {
          "docs": [
            "Agent account with ownership validation"
          ],
          "name": "agent"
        },
        {
          "docs": [
            "User registry for rate limiting"
          ],
          "name": "user_registry",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  117,
                  115,
                  101,
                  114,
                  95,
                  114,
                  101,
                  103,
                  105,
                  115,
                  116,
                  114,
                  121
                ]
              },
              {
                "kind": "account",
                "path": "creator"
              }
            ]
          },
          "writable": true
        },
        {
          "docs": [
            "Creator authority with enhanced verification"
          ],
          "name": "creator",
          "signer": true,
          "writable": true
        },
        {
          "address": "11111111111111111111111111111111",
          "docs": [
            "System program for account operations"
          ],
          "name": "system_program"
        },
        {
          "address": "SysvarC1ock11111111111111111111111111111111",
          "docs": [
            "Clock sysvar for timestamp validation and rate limiting"
          ],
          "name": "clock"
        }
      ],
      "args": [
        {
          "name": "listing_data",
          "type": {
            "defined": {
              "name": "ServiceListingData"
            }
          }
        },
        {
          "name": "_listing_id",
          "type": "string"
        }
      ],
      "discriminator": [
        91,
        37,
        216,
        26,
        93,
        146,
        13,
        182
      ],
      "name": "create_service_listing"
    },
    {
      "accounts": [
        {
          "name": "work_order",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  119,
                  111,
                  114,
                  107,
                  95,
                  111,
                  114,
                  100,
                  101,
                  114
                ]
              },
              {
                "kind": "account",
                "path": "client"
              },
              {
                "kind": "arg",
                "path": "work_order_data.order_id"
              }
            ]
          },
          "writable": true
        },
        {
          "name": "client",
          "signer": true,
          "writable": true
        },
        {
          "address": "SysvarC1ock11111111111111111111111111111111",
          "name": "clock"
        },
        {
          "address": "11111111111111111111111111111111",
          "name": "system_program"
        }
      ],
      "args": [
        {
          "name": "work_order_data",
          "type": {
            "defined": {
              "name": "WorkOrderData"
            }
          }
        }
      ],
      "discriminator": [
        143,
        17,
        248,
        200,
        217,
        85,
        10,
        175
      ],
      "name": "create_work_order"
    },
    {
      "accounts": [
        {
          "docs": [
            "Agent account with canonical PDA validation"
          ],
          "name": "agent_account",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  97,
                  103,
                  101,
                  110,
                  116
                ]
              },
              {
                "kind": "account",
                "path": "signer"
              },
              {
                "kind": "arg",
                "path": "agent_id"
              }
            ]
          },
          "writable": true
        },
        {
          "docs": [
            "Enhanced authority verification"
          ],
          "name": "signer",
          "signer": true,
          "writable": true
        },
        {
          "address": "SysvarC1ock11111111111111111111111111111111",
          "docs": [
            "Clock sysvar for rate limiting"
          ],
          "name": "clock"
        }
      ],
      "args": [
        {
          "name": "agent_id",
          "type": "string"
        }
      ],
      "discriminator": [
        205,
        171,
        239,
        225,
        82,
        126,
        96,
        166
      ],
      "name": "deactivate_agent"
    },
    {
      "accounts": [
        {
          "name": "program",
          "writable": true
        },
        {
          "name": "incentives",
          "writable": true
        },
        {
          "name": "distributor",
          "signer": true
        }
      ],
      "args": [
        {
          "name": "agent",
          "type": "pubkey"
        },
        {
          "name": "incentive_type",
          "type": "string"
        },
        {
          "name": "amount",
          "type": "u64"
        }
      ],
      "discriminator": [
        172,
        97,
        184,
        220,
        51,
        131,
        45,
        160
      ],
      "name": "distribute_incentives"
    },
    {
      "accounts": [
        {
          "docs": [
            "Bulk deal account with canonical bump validation"
          ],
          "name": "deal",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  98,
                  117,
                  108,
                  107,
                  95,
                  100,
                  101,
                  97,
                  108
                ]
              },
              {
                "account": "BulkDeal",
                "kind": "account",
                "path": "deal.agent"
              },
              {
                "account": "BulkDeal",
                "kind": "account",
                "path": "deal.customer"
              },
              {
                "account": "BulkDeal",
                "kind": "account",
                "path": "deal.deal_id"
              }
            ]
          },
          "writable": true
        },
        {
          "docs": [
            "User registry for rate limiting"
          ],
          "name": "user_registry",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  117,
                  115,
                  101,
                  114,
                  95,
                  114,
                  101,
                  103,
                  105,
                  115,
                  116,
                  114,
                  121
                ]
              },
              {
                "kind": "account",
                "path": "authority"
              }
            ]
          },
          "writable": true
        },
        {
          "docs": [
            "Enhanced authority verification - only customer or agent"
          ],
          "name": "authority",
          "signer": true,
          "writable": true
        },
        {
          "address": "SysvarC1ock11111111111111111111111111111111",
          "docs": [
            "Clock sysvar for rate limiting"
          ],
          "name": "clock"
        }
      ],
      "args": [
        {
          "name": "batch_size",
          "type": "u32"
        }
      ],
      "discriminator": [
        236,
        222,
        159,
        76,
        52,
        79,
        235,
        109
      ],
      "name": "execute_bulk_deal_batch"
    },
    {
      "accounts": [
        {
          "docs": [
            "Dispute account with collision prevention"
          ],
          "name": "dispute",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  100,
                  105,
                  115,
                  112,
                  117,
                  116,
                  101
                ]
              },
              {
                "kind": "account",
                "path": "transaction"
              },
              {
                "kind": "account",
                "path": "complainant"
              },
              {
                "kind": "arg",
                "path": "reason"
              }
            ]
          },
          "writable": true
        },
        {
          "docs": [
            "Transaction account with enhanced validation",
            "Transaction info for key reference"
          ],
          "name": "transaction"
        },
        {
          "docs": [
            "User registry for rate limiting and spam prevention"
          ],
          "name": "user_registry",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  117,
                  115,
                  101,
                  114,
                  95,
                  114,
                  101,
                  103,
                  105,
                  115,
                  116,
                  114,
                  121
                ]
              },
              {
                "kind": "account",
                "path": "complainant"
              }
            ]
          },
          "writable": true
        },
        {
          "docs": [
            "Enhanced complainant verification"
          ],
          "name": "complainant",
          "signer": true,
          "writable": true
        },
        {
          "docs": [
            "Enhanced respondent validation"
          ],
          "name": "respondent"
        },
        {
          "address": "11111111111111111111111111111111",
          "docs": [
            "System program for account creation"
          ],
          "name": "system_program"
        },
        {
          "address": "SysvarC1ock11111111111111111111111111111111",
          "docs": [
            "Clock sysvar for timestamp validation"
          ],
          "name": "clock"
        }
      ],
      "args": [
        {
          "name": "reason",
          "type": "string"
        }
      ],
      "discriminator": [
        210,
        63,
        221,
        114,
        212,
        97,
        195,
        156
      ],
      "name": "file_dispute"
    },
    {
      "accounts": [
        {
          "docs": [
            "Auction account with canonical validation"
          ],
          "name": "auction",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  97,
                  117,
                  99,
                  116,
                  105,
                  111,
                  110
                ]
              },
              {
                "account": "AuctionMarketplace",
                "kind": "account",
                "path": "auction.agent"
              },
              {
                "account": "AuctionMarketplace",
                "kind": "account",
                "path": "auction.creator"
              }
            ]
          },
          "writable": true
        },
        {
          "docs": [
            "Enhanced authority verification - only creator or protocol admin"
          ],
          "name": "authority",
          "signer": true,
          "writable": true
        },
        {
          "address": "SysvarC1ock11111111111111111111111111111111",
          "docs": [
            "Clock sysvar for timestamp validation"
          ],
          "name": "clock"
        }
      ],
      "args": [],
      "discriminator": [
        220,
        209,
        175,
        193,
        57,
        132,
        241,
        168
      ],
      "name": "finalize_auction"
    },
    {
      "accounts": [
        {
          "name": "report",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  99,
                  111,
                  109,
                  112,
                  108,
                  105,
                  97,
                  110,
                  99,
                  101,
                  95,
                  114,
                  101,
                  112,
                  111,
                  114,
                  116
                ]
              },
              {
                "kind": "arg",
                "path": "report_id"
              }
            ]
          },
          "writable": true
        },
        {
          "docs": [
            "Audit trail for the entity"
          ],
          "name": "audit_trail",
          "writable": true
        },
        {
          "name": "authority",
          "signer": true,
          "writable": true
        },
        {
          "address": "11111111111111111111111111111111",
          "name": "system_program"
        }
      ],
      "args": [
        {
          "name": "report_id",
          "type": "u64"
        },
        {
          "name": "report_type",
          "type": {
            "defined": {
              "name": "ReportType"
            }
          }
        },
        {
          "name": "date_range_start",
          "type": "i64"
        },
        {
          "name": "date_range_end",
          "type": "i64"
        }
      ],
      "discriminator": [
        213,
        97,
        79,
        234,
        22,
        228,
        14,
        32
      ],
      "name": "generate_compliance_report"
    },
    {
      "accounts": [
        {
          "name": "audit_trail",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  97,
                  117,
                  100,
                  105,
                  116,
                  95,
                  116,
                  114,
                  97,
                  105,
                  108
                ]
              },
              {
                "kind": "account",
                "path": "entity"
              }
            ]
          },
          "writable": true
        },
        {
          "docs": [
            "Entity being audited"
          ],
          "name": "entity"
        },
        {
          "name": "authority",
          "signer": true,
          "writable": true
        },
        {
          "address": "11111111111111111111111111111111",
          "name": "system_program"
        }
      ],
      "args": [
        {
          "name": "entity_type",
          "type": "string"
        },
        {
          "name": "config",
          "type": {
            "defined": {
              "name": "AuditConfig"
            }
          }
        }
      ],
      "discriminator": [
        145,
        182,
        236,
        249,
        212,
        17,
        175,
        161
      ],
      "name": "initialize_audit_trail"
    },
    {
      "accounts": [
        {
          "name": "proposal",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  103,
                  111,
                  118,
                  101,
                  114,
                  110,
                  97,
                  110,
                  99,
                  101,
                  95,
                  112,
                  114,
                  111,
                  112,
                  111,
                  115,
                  97,
                  108
                ]
              },
              {
                "kind": "arg",
                "path": "proposal_id"
              }
            ]
          },
          "writable": true
        },
        {
          "name": "proposer",
          "signer": true,
          "writable": true
        },
        {
          "address": "11111111111111111111111111111111",
          "name": "system_program"
        }
      ],
      "args": [
        {
          "name": "proposal_id",
          "type": "u64"
        },
        {
          "name": "title",
          "type": "string"
        },
        {
          "name": "description",
          "type": "string"
        },
        {
          "name": "proposal_type",
          "type": {
            "defined": {
              "name": "ProposalType"
            }
          }
        },
        {
          "name": "execution_params",
          "type": {
            "defined": {
              "name": "ExecutionParams"
            }
          }
        }
      ],
      "discriminator": [
        137,
        84,
        234,
        206,
        17,
        58,
        54,
        215
      ],
      "name": "initialize_governance_proposal"
    },
    {
      "accounts": [
        {
          "name": "rbac_config",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  114,
                  98,
                  97,
                  99,
                  95,
                  99,
                  111,
                  110,
                  102,
                  105,
                  103
                ]
              },
              {
                "kind": "account",
                "path": "authority"
              }
            ]
          },
          "writable": true
        },
        {
          "name": "authority",
          "signer": true,
          "writable": true
        },
        {
          "address": "11111111111111111111111111111111",
          "name": "system_program"
        }
      ],
      "args": [
        {
          "name": "initial_roles",
          "type": {
            "vec": {
              "defined": {
                "name": "Role"
              }
            }
          }
        }
      ],
      "discriminator": [
        215,
        68,
        129,
        228,
        237,
        165,
        0,
        240
      ],
      "name": "initialize_rbac_config"
    },
    {
      "accounts": [
        {
          "name": "negotiation",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  110,
                  101,
                  103,
                  111,
                  116,
                  105,
                  97,
                  116,
                  105,
                  111,
                  110
                ]
              },
              {
                "kind": "account",
                "path": "initiator"
              },
              {
                "kind": "account",
                "path": "counterparty"
              }
            ]
          },
          "writable": true
        },
        {
          "name": "initiator",
          "signer": true,
          "writable": true
        },
        {
          "name": "counterparty"
        },
        {
          "address": "11111111111111111111111111111111",
          "name": "system_program"
        }
      ],
      "args": [
        {
          "name": "initial_offer",
          "type": "u64"
        },
        {
          "name": "auto_accept_threshold",
          "type": "u64"
        },
        {
          "name": "negotiation_deadline",
          "type": "i64"
        }
      ],
      "discriminator": [
        170,
        46,
        176,
        41,
        191,
        255,
        104,
        205
      ],
      "name": "initiate_negotiation"
    },
    {
      "accounts": [
        {
          "name": "resale",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  114,
                  101,
                  115,
                  97,
                  108,
                  101
                ]
              },
              {
                "kind": "account",
                "path": "agent"
              },
              {
                "kind": "account",
                "path": "seller"
              }
            ]
          },
          "writable": true
        },
        {
          "name": "agent"
        },
        {
          "name": "seller",
          "signer": true,
          "writable": true
        },
        {
          "address": "11111111111111111111111111111111",
          "name": "system_program"
        }
      ],
      "args": [
        {
          "name": "listing_price",
          "type": "u64"
        }
      ],
      "discriminator": [
        3,
        233,
        3,
        123,
        241,
        61,
        231,
        238
      ],
      "name": "list_agent_for_resale"
    },
    {
      "accounts": [
        {
          "name": "negotiation",
          "writable": true
        },
        {
          "name": "sender",
          "signer": true
        }
      ],
      "args": [
        {
          "name": "counter_offer",
          "type": "u64"
        },
        {
          "name": "message",
          "type": "string"
        }
      ],
      "discriminator": [
        74,
        8,
        96,
        55,
        146,
        85,
        200,
        152
      ],
      "name": "make_counter_offer"
    },
    {
      "accounts": [
        {
          "docs": [
            "Agent account with strict validation"
          ],
          "name": "agent",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  97,
                  103,
                  101,
                  110,
                  116
                ]
              },
              {
                "kind": "account",
                "path": "owner"
              }
            ]
          },
          "writable": true
        },
        {
          "docs": [
            "Owner authority"
          ],
          "name": "owner",
          "relations": [
            "agent"
          ],
          "signer": true
        },
        {
          "address": "SysvarC1ock11111111111111111111111111111111",
          "docs": [
            "Clock sysvar for timestamp validation"
          ],
          "name": "clock"
        }
      ],
      "args": [
        {
          "name": "new_status",
          "type": "bool"
        }
      ],
      "discriminator": [
        164,
        219,
        91,
        38,
        45,
        31,
        33,
        47
      ],
      "name": "manage_agent_status"
    },
    {
      "accounts": [
        {
          "docs": [
            "Auction account with canonical bump validation"
          ],
          "name": "auction",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  97,
                  117,
                  99,
                  116,
                  105,
                  111,
                  110
                ]
              },
              {
                "account": "AuctionMarketplace",
                "kind": "account",
                "path": "auction.agent"
              },
              {
                "account": "AuctionMarketplace",
                "kind": "account",
                "path": "auction.creator"
              }
            ]
          },
          "writable": true
        },
        {
          "docs": [
            "User registry for rate limiting"
          ],
          "name": "user_registry"
        },
        {
          "docs": [
            "Enhanced bidder verification"
          ],
          "name": "bidder",
          "signer": true,
          "writable": true
        },
        {
          "address": "11111111111111111111111111111111",
          "docs": [
            "System program"
          ],
          "name": "system_program"
        },
        {
          "address": "SysvarC1ock11111111111111111111111111111111",
          "docs": [
            "Clock sysvar for rate limiting"
          ],
          "name": "clock"
        }
      ],
      "args": [
        {
          "name": "bid_amount",
          "type": "u64"
        }
      ],
      "discriminator": [
        38,
        170,
        233,
        87,
        52,
        65,
        23,
        128
      ],
      "name": "place_auction_bid"
    },
    {
      "accounts": [
        {
          "name": "payment",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  112,
                  97,
                  121,
                  109,
                  101,
                  110,
                  116
                ]
              },
              {
                "kind": "account",
                "path": "work_order"
              }
            ]
          },
          "writable": true
        },
        {
          "name": "work_order",
          "writable": true
        },
        {
          "name": "provider_agent",
          "writable": true
        },
        {
          "name": "payer",
          "signer": true,
          "writable": true
        },
        {
          "name": "payer_token_account",
          "writable": true
        },
        {
          "name": "provider_token_account",
          "writable": true
        },
        {
          "name": "token_mint"
        },
        {
          "address": "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb",
          "name": "token_program"
        },
        {
          "address": "11111111111111111111111111111111",
          "name": "system_program"
        }
      ],
      "args": [
        {
          "name": "amount",
          "type": "u64"
        },
        {
          "name": "use_confidential_transfer",
          "type": "bool"
        }
      ],
      "discriminator": [
        189,
        81,
        30,
        198,
        139,
        186,
        115,
        23
      ],
      "name": "process_payment"
    },
    {
      "accounts": [
        {
          "name": "service_purchase",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  115,
                  101,
                  114,
                  118,
                  105,
                  99,
                  101,
                  95,
                  112,
                  117,
                  114,
                  99,
                  104,
                  97,
                  115,
                  101
                ]
              },
              {
                "kind": "account",
                "path": "buyer"
              },
              {
                "kind": "account",
                "path": "service_listing"
              }
            ]
          },
          "writable": true
        },
        {
          "name": "service_listing",
          "writable": true
        },
        {
          "name": "buyer",
          "signer": true,
          "writable": true
        },
        {
          "address": "11111111111111111111111111111111",
          "name": "system_program"
        }
      ],
      "args": [
        {
          "name": "purchase_data",
          "type": {
            "defined": {
              "name": "ServicePurchaseData"
            }
          }
        }
      ],
      "discriminator": [
        197,
        43,
        201,
        158,
        119,
        134,
        66,
        7
      ],
      "name": "purchase_service"
    },
    {
      "accounts": [
        {
          "docs": [
            "Agent account with enhanced 2025 PDA security"
          ],
          "name": "agent_account",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  97,
                  103,
                  101,
                  110,
                  116
                ]
              },
              {
                "kind": "account",
                "path": "signer"
              },
              {
                "kind": "arg",
                "path": "agent_id"
              }
            ]
          },
          "writable": true
        },
        {
          "docs": [
            "User registry with enhanced validation"
          ],
          "name": "user_registry",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  117,
                  115,
                  101,
                  114,
                  95,
                  114,
                  101,
                  103,
                  105,
                  115,
                  116,
                  114,
                  121
                ]
              },
              {
                "kind": "account",
                "path": "signer"
              }
            ]
          },
          "writable": true
        },
        {
          "docs": [
            "Authority with enhanced verification"
          ],
          "name": "signer",
          "signer": true,
          "writable": true
        },
        {
          "address": "11111111111111111111111111111111",
          "docs": [
            "System program for account creation"
          ],
          "name": "system_program"
        },
        {
          "address": "SysvarC1ock11111111111111111111111111111111",
          "docs": [
            "Clock sysvar for timestamp validation"
          ],
          "name": "clock"
        }
      ],
      "args": [
        {
          "name": "agent_type",
          "type": "u8"
        },
        {
          "name": "metadata_uri",
          "type": "string"
        },
        {
          "name": "_agent_id",
          "type": "string"
        }
      ],
      "discriminator": [
        135,
        157,
        66,
        195,
        2,
        113,
        175,
        30
      ],
      "name": "register_agent"
    },
    {
      "accounts": [
        {
          "docs": [
            "Extension account with collision prevention"
          ],
          "name": "extension",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  101,
                  120,
                  116,
                  101,
                  110,
                  115,
                  105,
                  111,
                  110
                ]
              },
              {
                "kind": "account",
                "path": "developer"
              },
              {
                "kind": "arg",
                "path": "metadata.name"
              }
            ]
          },
          "writable": true
        },
        {
          "docs": [
            "User registry for rate limiting and spam prevention"
          ],
          "name": "user_registry",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  117,
                  115,
                  101,
                  114,
                  95,
                  114,
                  101,
                  103,
                  105,
                  115,
                  116,
                  114,
                  121
                ]
              },
              {
                "kind": "account",
                "path": "developer"
              }
            ]
          },
          "writable": true
        },
        {
          "docs": [
            "Enhanced developer verification"
          ],
          "name": "developer",
          "signer": true,
          "writable": true
        },
        {
          "address": "11111111111111111111111111111111",
          "docs": [
            "System program for account creation"
          ],
          "name": "system_program"
        },
        {
          "address": "SysvarC1ock11111111111111111111111111111111",
          "docs": [
            "Clock sysvar for timestamp validation"
          ],
          "name": "clock"
        }
      ],
      "args": [
        {
          "name": "metadata",
          "type": {
            "defined": {
              "name": "ExtensionMetadata"
            }
          }
        },
        {
          "name": "code_hash",
          "type": "string"
        },
        {
          "name": "revenue_share",
          "type": "f64"
        }
      ],
      "discriminator": [
        158,
        205,
        4,
        17,
        6,
        106,
        172,
        148
      ],
      "name": "register_extension"
    },
    {
      "accounts": [
        {
          "name": "replication_template",
          "writable": true
        },
        {
          "name": "new_agent",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  97,
                  103,
                  101,
                  110,
                  116
                ]
              },
              {
                "kind": "account",
                "path": "buyer"
              }
            ]
          },
          "writable": true
        },
        {
          "name": "replication_record",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  114,
                  101,
                  112,
                  108,
                  105,
                  99,
                  97,
                  116,
                  105,
                  111,
                  110,
                  95,
                  114,
                  101,
                  99,
                  111,
                  114,
                  100
                ]
              },
              {
                "kind": "account",
                "path": "replication_template"
              },
              {
                "kind": "account",
                "path": "buyer"
              }
            ]
          },
          "writable": true
        },
        {
          "name": "buyer",
          "signer": true,
          "writable": true
        },
        {
          "address": "11111111111111111111111111111111",
          "name": "system_program"
        }
      ],
      "args": [
        {
          "name": "customization",
          "type": {
            "defined": {
              "name": "AgentCustomization"
            }
          }
        }
      ],
      "discriminator": [
        252,
        210,
        89,
        130,
        31,
        43,
        39,
        50
      ],
      "name": "replicate_agent"
    },
    {
      "accounts": [
        {
          "docs": [
            "Dispute account with canonical validation"
          ],
          "name": "dispute",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  100,
                  105,
                  115,
                  112,
                  117,
                  116,
                  101
                ]
              },
              {
                "account": "DisputeCase",
                "kind": "account",
                "path": "dispute.transaction"
              },
              {
                "account": "DisputeCase",
                "kind": "account",
                "path": "dispute.complainant"
              },
              {
                "account": "DisputeCase",
                "kind": "account",
                "path": "dispute.reason"
              }
            ]
          },
          "writable": true
        },
        {
          "docs": [
            "Arbitrator registry for authority validation"
          ],
          "name": "arbitrator_registry",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  97,
                  114,
                  98,
                  105,
                  116,
                  114,
                  97,
                  116,
                  111,
                  114,
                  95,
                  114,
                  101,
                  103,
                  105,
                  115,
                  116,
                  114,
                  121
                ]
              }
            ]
          }
        },
        {
          "docs": [
            "Enhanced arbitrator verification"
          ],
          "name": "arbitrator",
          "signer": true
        },
        {
          "address": "SysvarC1ock11111111111111111111111111111111",
          "docs": [
            "Clock sysvar for timestamp validation"
          ],
          "name": "clock"
        }
      ],
      "args": [
        {
          "name": "resolution",
          "type": "string"
        },
        {
          "name": "award_to_complainant",
          "type": "bool"
        }
      ],
      "discriminator": [
        231,
        6,
        202,
        6,
        96,
        103,
        12,
        230
      ],
      "name": "resolve_dispute"
    },
    {
      "accounts": [
        {
          "name": "message",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  97,
                  50,
                  97,
                  95,
                  109,
                  101,
                  115,
                  115,
                  97,
                  103,
                  101
                ]
              },
              {
                "kind": "account",
                "path": "session"
              },
              {
                "account": "A2ASession",
                "kind": "account",
                "path": "session.created_at"
              }
            ]
          },
          "writable": true
        },
        {
          "name": "session",
          "writable": true
        },
        {
          "name": "sender",
          "signer": true,
          "writable": true
        },
        {
          "address": "11111111111111111111111111111111",
          "name": "system_program"
        }
      ],
      "args": [
        {
          "name": "message_data",
          "type": {
            "defined": {
              "name": "A2AMessageData"
            }
          }
        }
      ],
      "discriminator": [
        84,
        12,
        203,
        77,
        36,
        199,
        15,
        83
      ],
      "name": "send_a2a_message"
    },
    {
      "accounts": [
        {
          "name": "message",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  109,
                  101,
                  115,
                  115,
                  97,
                  103,
                  101
                ]
              },
              {
                "kind": "account",
                "path": "channel"
              },
              {
                "account": "Channel",
                "kind": "account",
                "path": "channel.message_count"
              }
            ]
          },
          "writable": true
        },
        {
          "name": "channel",
          "writable": true
        },
        {
          "name": "sender",
          "signer": true,
          "writable": true
        },
        {
          "address": "11111111111111111111111111111111",
          "name": "system_program"
        }
      ],
      "args": [
        {
          "name": "message_data",
          "type": {
            "defined": {
              "name": "MessageData"
            }
          }
        }
      ],
      "discriminator": [
        57,
        40,
        34,
        178,
        189,
        10,
        65,
        26
      ],
      "name": "send_message"
    },
    {
      "accounts": [
        {
          "docs": [
            "Dispute account with canonical bump validation"
          ],
          "name": "dispute",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  100,
                  105,
                  115,
                  112,
                  117,
                  116,
                  101
                ]
              },
              {
                "account": "DisputeCase",
                "kind": "account",
                "path": "dispute.transaction"
              },
              {
                "account": "DisputeCase",
                "kind": "account",
                "path": "dispute.complainant"
              },
              {
                "account": "DisputeCase",
                "kind": "account",
                "path": "dispute.reason"
              }
            ]
          },
          "writable": true
        },
        {
          "docs": [
            "User registry for rate limiting"
          ],
          "name": "user_registry",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  117,
                  115,
                  101,
                  114,
                  95,
                  114,
                  101,
                  103,
                  105,
                  115,
                  116,
                  114,
                  121
                ]
              },
              {
                "kind": "account",
                "path": "submitter"
              }
            ]
          },
          "writable": true
        },
        {
          "docs": [
            "Enhanced submitter verification"
          ],
          "name": "submitter",
          "signer": true
        },
        {
          "address": "SysvarC1ock11111111111111111111111111111111",
          "docs": [
            "Clock sysvar for rate limiting and timing validation"
          ],
          "name": "clock"
        }
      ],
      "args": [
        {
          "name": "evidence_type",
          "type": "string"
        },
        {
          "name": "evidence_data",
          "type": "string"
        }
      ],
      "discriminator": [
        177,
        174,
        100,
        125,
        106,
        213,
        241,
        22
      ],
      "name": "submit_dispute_evidence"
    },
    {
      "accounts": [
        {
          "name": "work_delivery",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  119,
                  111,
                  114,
                  107,
                  95,
                  100,
                  101,
                  108,
                  105,
                  118,
                  101,
                  114,
                  121
                ]
              },
              {
                "kind": "account",
                "path": "work_order"
              }
            ]
          },
          "writable": true
        },
        {
          "name": "work_order",
          "writable": true
        },
        {
          "name": "provider",
          "signer": true,
          "writable": true
        },
        {
          "address": "SysvarC1ock11111111111111111111111111111111",
          "name": "clock"
        },
        {
          "address": "11111111111111111111111111111111",
          "name": "system_program"
        }
      ],
      "args": [
        {
          "name": "delivery_data",
          "type": {
            "defined": {
              "name": "WorkDeliveryData"
            }
          }
        }
      ],
      "discriminator": [
        151,
        198,
        209,
        252,
        41,
        69,
        106,
        93
      ],
      "name": "submit_work_delivery"
    },
    {
      "accounts": [
        {
          "name": "status",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  97,
                  50,
                  97,
                  95,
                  115,
                  116,
                  97,
                  116,
                  117,
                  115
                ]
              },
              {
                "kind": "account",
                "path": "session"
              }
            ]
          },
          "writable": true
        },
        {
          "name": "session"
        },
        {
          "name": "updater",
          "signer": true,
          "writable": true
        },
        {
          "address": "11111111111111111111111111111111",
          "name": "system_program"
        }
      ],
      "args": [
        {
          "name": "status_data",
          "type": {
            "defined": {
              "name": "A2AStatusData"
            }
          }
        }
      ],
      "discriminator": [
        10,
        122,
        84,
        103,
        225,
        186,
        125,
        183
      ],
      "name": "update_a2a_status"
    },
    {
      "accounts": [
        {
          "docs": [
            "Agent account with canonical PDA validation"
          ],
          "name": "agent_account",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  97,
                  103,
                  101,
                  110,
                  116
                ]
              },
              {
                "kind": "account",
                "path": "signer"
              },
              {
                "kind": "arg",
                "path": "agent_id"
              }
            ]
          },
          "writable": true
        },
        {
          "docs": [
            "Enhanced authority verification"
          ],
          "name": "signer",
          "signer": true,
          "writable": true
        },
        {
          "address": "SysvarC1ock11111111111111111111111111111111",
          "docs": [
            "Clock sysvar for rate limiting"
          ],
          "name": "clock"
        }
      ],
      "args": [
        {
          "name": "_agent_type",
          "type": "u8"
        },
        {
          "name": "metadata_uri",
          "type": "string"
        },
        {
          "name": "_agent_id",
          "type": "string"
        }
      ],
      "discriminator": [
        85,
        2,
        178,
        9,
        119,
        139,
        102,
        164
      ],
      "name": "update_agent"
    },
    {
      "accounts": [
        {
          "docs": [
            "Agent account with canonical PDA validation"
          ],
          "name": "agent_account",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  97,
                  103,
                  101,
                  110,
                  116
                ]
              },
              {
                "kind": "account",
                "path": "signer"
              },
              {
                "kind": "arg",
                "path": "agent_id"
              }
            ]
          },
          "writable": true
        },
        {
          "docs": [
            "Enhanced authority verification"
          ],
          "name": "signer",
          "signer": true,
          "writable": true
        },
        {
          "address": "SysvarC1ock11111111111111111111111111111111",
          "docs": [
            "Clock sysvar for rate limiting"
          ],
          "name": "clock"
        }
      ],
      "args": [
        {
          "name": "agent_id",
          "type": "string"
        },
        {
          "name": "reputation_score",
          "type": "u64"
        }
      ],
      "discriminator": [
        80,
        227,
        92,
        245,
        231,
        37,
        99,
        180
      ],
      "name": "update_agent_reputation"
    },
    {
      "accounts": [
        {
          "docs": [
            "Agent account with enhanced 2025 security patterns"
          ],
          "name": "agent",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  97,
                  103,
                  101,
                  110,
                  116
                ]
              },
              {
                "kind": "account",
                "path": "owner"
              }
            ]
          },
          "writable": true
        },
        {
          "docs": [
            "Owner must be signer for security (2025 pattern)"
          ],
          "name": "owner",
          "relations": [
            "agent"
          ],
          "signer": true,
          "writable": true
        },
        {
          "address": "11111111111111111111111111111111",
          "docs": [
            "System program for account operations"
          ],
          "name": "system_program"
        }
      ],
      "args": [
        {
          "name": "service_data",
          "type": {
            "defined": {
              "name": "AgentServiceData"
            }
          }
        }
      ],
      "discriminator": [
        87,
        146,
        181,
        198,
        252,
        68,
        243,
        102
      ],
      "name": "update_agent_service"
    },
    {
      "accounts": [
        {
          "docs": [
            "Dashboard account with canonical validation"
          ],
          "name": "dashboard",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  97,
                  110,
                  97,
                  108,
                  121,
                  116,
                  105,
                  99,
                  115
                ]
              },
              {
                "kind": "account",
                "path": "owner"
              },
              {
                "account": "AnalyticsDashboard",
                "kind": "account",
                "path": "dashboard.dashboard_id"
              }
            ]
          },
          "writable": true
        },
        {
          "docs": [
            "User registry for rate limiting"
          ],
          "name": "user_registry",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  117,
                  115,
                  101,
                  114,
                  95,
                  114,
                  101,
                  103,
                  105,
                  115,
                  116,
                  114,
                  121
                ]
              },
              {
                "kind": "account",
                "path": "owner"
              }
            ]
          },
          "writable": true
        },
        {
          "docs": [
            "Enhanced owner verification"
          ],
          "name": "owner",
          "relations": [
            "dashboard"
          ],
          "signer": true
        },
        {
          "address": "SysvarC1ock11111111111111111111111111111111",
          "docs": [
            "Clock sysvar for rate limiting"
          ],
          "name": "clock"
        }
      ],
      "args": [
        {
          "name": "new_metrics",
          "type": "string"
        }
      ],
      "discriminator": [
        184,
        35,
        106,
        114,
        27,
        86,
        233,
        32
      ],
      "name": "update_analytics_dashboard"
    },
    {
      "accounts": [
        {
          "name": "engine",
          "writable": true
        },
        {
          "name": "updater",
          "signer": true
        }
      ],
      "args": [
        {
          "name": "demand_metrics",
          "type": {
            "defined": {
              "name": "DemandMetrics"
            }
          }
        }
      ],
      "discriminator": [
        22,
        97,
        198,
        34,
        14,
        133,
        83,
        168
      ],
      "name": "update_dynamic_pricing"
    },
    {
      "accounts": [
        {
          "docs": [
            "Market analytics account with canonical bump validation"
          ],
          "name": "market_analytics",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  109,
                  97,
                  114,
                  107,
                  101,
                  116,
                  95,
                  97,
                  110,
                  97,
                  108,
                  121,
                  116,
                  105,
                  99,
                  115
                ]
              },
              {
                "account": "MarketAnalytics",
                "kind": "account",
                "path": "market_analytics.period_start"
              },
              {
                "account": "MarketAnalytics",
                "kind": "account",
                "path": "market_analytics.period_end"
              }
            ]
          },
          "writable": true
        },
        {
          "docs": [
            "Enhanced authority verification"
          ],
          "name": "authority",
          "signer": true
        },
        {
          "address": "SysvarC1ock11111111111111111111111111111111",
          "docs": [
            "Clock sysvar for timestamp validation"
          ],
          "name": "clock"
        }
      ],
      "args": [
        {
          "name": "volume",
          "type": "u64"
        },
        {
          "name": "price",
          "type": "u64"
        }
      ],
      "discriminator": [
        156,
        13,
        81,
        78,
        11,
        3,
        54,
        178
      ],
      "name": "update_market_analytics"
    },
    {
      "accounts": [
        {
          "docs": [
            "Verification account with enhanced PDA security"
          ],
          "name": "agent_verification",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  97,
                  103,
                  101,
                  110,
                  116,
                  95,
                  118,
                  101,
                  114,
                  105,
                  102,
                  105,
                  99,
                  97,
                  116,
                  105,
                  111,
                  110
                ]
              },
              {
                "kind": "account",
                "path": "agent"
              },
              {
                "kind": "account",
                "path": "verifier"
              }
            ]
          },
          "writable": true
        },
        {
          "docs": [
            "Agent account being verified (enhanced validation)"
          ],
          "name": "agent"
        },
        {
          "docs": [
            "Verifier authority with enhanced permissions"
          ],
          "name": "verifier",
          "signer": true,
          "writable": true
        },
        {
          "address": "11111111111111111111111111111111",
          "docs": [
            "System program for account operations"
          ],
          "name": "system_program"
        },
        {
          "address": "SysvarC1ock11111111111111111111111111111111",
          "docs": [
            "Clock sysvar for timestamp validation"
          ],
          "name": "clock"
        }
      ],
      "args": [
        {
          "name": "agent_pubkey",
          "type": "pubkey"
        },
        {
          "name": "service_endpoint",
          "type": "string"
        },
        {
          "name": "supported_capabilities",
          "type": {
            "vec": "u64"
          }
        },
        {
          "name": "verified_at",
          "type": "i64"
        }
      ],
      "discriminator": [
        206,
        212,
        108,
        12,
        105,
        61,
        100,
        66
      ],
      "name": "verify_agent"
    }
  ],
  "metadata": {
    "description": "GhostSpeak Marketplace: Decentralized AI Agent Commerce Protocol",
    "name": "ghostspeak_marketplace",
    "spec": "0.1.0",
    "version": "0.1.0"
  },
  "types": [
    {
      "name": "A2AMessage",
      "type": {
        "fields": [
          {
            "name": "message_id",
            "type": "u64"
          },
          {
            "name": "session",
            "type": "pubkey"
          },
          {
            "name": "sender",
            "type": "pubkey"
          },
          {
            "name": "content",
            "type": "string"
          },
          {
            "name": "message_type",
            "type": "string"
          },
          {
            "name": "sent_at",
            "type": "i64"
          },
          {
            "name": "bump",
            "type": "u8"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "A2AMessageData",
      "type": {
        "fields": [
          {
            "name": "message_id",
            "type": "u64"
          },
          {
            "name": "session_id",
            "type": "u64"
          },
          {
            "name": "sender",
            "type": "pubkey"
          },
          {
            "name": "content",
            "type": "string"
          },
          {
            "name": "message_type",
            "type": "string"
          },
          {
            "name": "timestamp",
            "type": "i64"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "A2AMessageSentEvent",
      "type": {
        "fields": [
          {
            "name": "message_id",
            "type": "u64"
          },
          {
            "name": "session_id",
            "type": "u64"
          },
          {
            "name": "sender",
            "type": "pubkey"
          },
          {
            "name": "timestamp",
            "type": "i64"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "A2ASession",
      "type": {
        "fields": [
          {
            "name": "session_id",
            "type": "u64"
          },
          {
            "name": "initiator",
            "type": "pubkey"
          },
          {
            "name": "responder",
            "type": "pubkey"
          },
          {
            "name": "session_type",
            "type": "string"
          },
          {
            "name": "metadata",
            "type": "string"
          },
          {
            "name": "is_active",
            "type": "bool"
          },
          {
            "name": "created_at",
            "type": "i64"
          },
          {
            "name": "expires_at",
            "type": "i64"
          },
          {
            "name": "bump",
            "type": "u8"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "A2ASessionCreatedEvent",
      "type": {
        "fields": [
          {
            "name": "session_id",
            "type": "u64"
          },
          {
            "name": "initiator",
            "type": "pubkey"
          },
          {
            "name": "responder",
            "type": "pubkey"
          },
          {
            "name": "timestamp",
            "type": "i64"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "A2ASessionData",
      "type": {
        "fields": [
          {
            "name": "session_id",
            "type": "u64"
          },
          {
            "name": "initiator",
            "type": "pubkey"
          },
          {
            "name": "responder",
            "type": "pubkey"
          },
          {
            "name": "session_type",
            "type": "string"
          },
          {
            "name": "metadata",
            "type": "string"
          },
          {
            "name": "expires_at",
            "type": "i64"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "A2AStatus",
      "type": {
        "fields": [
          {
            "name": "agent",
            "type": "pubkey"
          },
          {
            "name": "status",
            "type": "string"
          },
          {
            "name": "capabilities",
            "type": {
              "vec": "string"
            }
          },
          {
            "name": "availability",
            "type": "bool"
          },
          {
            "name": "last_updated",
            "type": "i64"
          },
          {
            "name": "bump",
            "type": "u8"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "A2AStatusData",
      "type": {
        "fields": [
          {
            "name": "status_id",
            "type": "u64"
          },
          {
            "name": "agent",
            "type": "pubkey"
          },
          {
            "name": "status",
            "type": "string"
          },
          {
            "name": "capabilities",
            "type": {
              "vec": "string"
            }
          },
          {
            "name": "availability",
            "type": "bool"
          },
          {
            "name": "last_updated",
            "type": "i64"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "A2AStatusUpdatedEvent",
      "type": {
        "fields": [
          {
            "name": "agent",
            "type": "pubkey"
          },
          {
            "name": "status",
            "type": "string"
          },
          {
            "name": "availability",
            "type": "bool"
          },
          {
            "name": "timestamp",
            "type": "i64"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "AccessAuditConfig",
      "type": {
        "fields": [
          {
            "name": "audit_enabled",
            "type": "bool"
          },
          {
            "name": "real_time_monitoring",
            "type": "bool"
          },
          {
            "name": "retention_period",
            "type": "i64"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Access policy definition"
      ],
      "name": "AccessPolicy",
      "type": {
        "fields": [
          {
            "docs": [
              "Policy identifier"
            ],
            "name": "policy_id",
            "type": "string"
          },
          {
            "docs": [
              "Policy name"
            ],
            "name": "name",
            "type": "string"
          },
          {
            "docs": [
              "Policy description"
            ],
            "name": "description",
            "type": "string"
          },
          {
            "docs": [
              "Policy type"
            ],
            "name": "policy_type",
            "type": {
              "defined": {
                "name": "PolicyType"
              }
            }
          },
          {
            "docs": [
              "Policy rules"
            ],
            "name": "rules",
            "type": {
              "vec": {
                "defined": {
                  "name": "PolicyRule"
                }
              }
            }
          },
          {
            "docs": [
              "Policy scope"
            ],
            "name": "scope",
            "type": {
              "defined": {
                "name": "PolicyScope"
              }
            }
          },
          {
            "docs": [
              "Policy priority"
            ],
            "name": "priority",
            "type": "u8"
          },
          {
            "docs": [
              "Policy status"
            ],
            "name": "status",
            "type": {
              "defined": {
                "name": "PolicyStatus"
              }
            }
          },
          {
            "docs": [
              "Effective date"
            ],
            "name": "effective_date",
            "type": "i64"
          },
          {
            "docs": [
              "Expiration date"
            ],
            "name": "expiration_date",
            "type": {
              "option": "i64"
            }
          },
          {
            "docs": [
              "Policy metadata"
            ],
            "name": "metadata",
            "type": {
              "defined": {
                "name": "PolicyMetadata"
              }
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Account lockout policies"
      ],
      "name": "AccountLockoutPolicies",
      "type": {
        "fields": [
          {
            "docs": [
              "Max failed attempts before lockout"
            ],
            "name": "max_failed_attempts",
            "type": "u8"
          },
          {
            "docs": [
              "Lockout duration"
            ],
            "name": "lockout_duration",
            "type": "i64"
          },
          {
            "docs": [
              "Progressive lockout enabled"
            ],
            "name": "progressive_lockout",
            "type": "bool"
          },
          {
            "docs": [
              "Unlock methods"
            ],
            "name": "unlock_methods",
            "type": {
              "vec": {
                "defined": {
                  "name": "UnlockMethod"
                }
              }
            }
          },
          {
            "docs": [
              "Notification requirements"
            ],
            "name": "notification_requirements",
            "type": {
              "vec": {
                "defined": {
                  "name": "NotificationRequirement"
                }
              }
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Role activation requirements"
      ],
      "name": "ActivationRequirement",
      "type": {
        "fields": [
          {
            "docs": [
              "Requirement type"
            ],
            "name": "requirement_type",
            "type": {
              "defined": {
                "name": "ActivationRequirementType"
              }
            }
          },
          {
            "docs": [
              "Required approvers"
            ],
            "name": "approvers",
            "type": {
              "vec": "pubkey"
            }
          },
          {
            "docs": [
              "Minimum approvals needed"
            ],
            "name": "min_approvals",
            "type": "u8"
          },
          {
            "docs": [
              "Approval timeout"
            ],
            "name": "approval_timeout",
            "type": "i64"
          },
          {
            "docs": [
              "Evidence requirements"
            ],
            "name": "evidence_requirements",
            "type": {
              "vec": "string"
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Types of role activation requirements"
      ],
      "name": "ActivationRequirementType",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "ManagerApproval"
          },
          {
            "name": "PeerReview"
          },
          {
            "name": "SecurityClearance"
          },
          {
            "name": "BackgroundCheck"
          },
          {
            "name": "TrainingCompletion"
          },
          {
            "name": "CertificationRequired"
          },
          {
            "name": "BusinessJustification"
          },
          {
            "name": "TechnicalAssessment"
          }
        ]
      }
    },
    {
      "name": "Agent",
      "type": {
        "fields": [
          {
            "name": "owner",
            "type": "pubkey"
          },
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "description",
            "type": "string"
          },
          {
            "name": "capabilities",
            "type": {
              "vec": "string"
            }
          },
          {
            "name": "pricing_model",
            "type": {
              "defined": {
                "name": "PricingModel"
              }
            }
          },
          {
            "name": "reputation_score",
            "type": "u32"
          },
          {
            "name": "total_jobs_completed",
            "type": "u32"
          },
          {
            "name": "total_earnings",
            "type": "u64"
          },
          {
            "name": "is_active",
            "type": "bool"
          },
          {
            "name": "created_at",
            "type": "i64"
          },
          {
            "name": "updated_at",
            "type": "i64"
          },
          {
            "name": "original_price",
            "type": "u64"
          },
          {
            "name": "genome_hash",
            "type": "string"
          },
          {
            "name": "is_replicable",
            "type": "bool"
          },
          {
            "name": "replication_fee",
            "type": "u64"
          },
          {
            "name": "service_endpoint",
            "type": "string"
          },
          {
            "name": "is_verified",
            "type": "bool"
          },
          {
            "name": "verification_timestamp",
            "type": "i64"
          },
          {
            "name": "metadata_uri",
            "type": "string"
          },
          {
            "name": "framework_origin",
            "type": "string"
          },
          {
            "name": "supported_tokens",
            "type": {
              "vec": "pubkey"
            }
          },
          {
            "name": "cnft_mint",
            "type": {
              "option": "pubkey"
            }
          },
          {
            "name": "merkle_tree",
            "type": {
              "option": "pubkey"
            }
          },
          {
            "name": "supports_a2a",
            "type": "bool"
          },
          {
            "name": "transfer_hook",
            "type": {
              "option": "pubkey"
            }
          },
          {
            "name": "bump",
            "type": "u8"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Data structure for agent customization during replication"
      ],
      "name": "AgentCustomization",
      "type": {
        "fields": [
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "description",
            "type": {
              "option": "string"
            }
          },
          {
            "name": "additional_capabilities",
            "type": {
              "vec": "string"
            }
          },
          {
            "name": "pricing_model",
            "type": {
              "defined": {
                "name": "PricingModel"
              }
            }
          },
          {
            "name": "is_replicable",
            "type": "bool"
          },
          {
            "name": "replication_fee",
            "type": {
              "option": "u64"
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "AgentIncentives",
      "type": {
        "fields": [
          {
            "name": "agent",
            "type": "pubkey"
          },
          {
            "name": "referrals_count",
            "type": "u32"
          },
          {
            "name": "referral_earnings",
            "type": "u64"
          },
          {
            "name": "performance_score",
            "type": "f64"
          },
          {
            "name": "performance_earnings",
            "type": "u64"
          },
          {
            "name": "loyalty_points",
            "type": "u64"
          },
          {
            "name": "total_earnings",
            "type": "u64"
          },
          {
            "name": "last_activity",
            "type": "i64"
          },
          {
            "name": "bump",
            "type": "u8"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "AgentListedForResaleEvent",
      "type": {
        "fields": [
          {
            "name": "resale",
            "type": "pubkey"
          },
          {
            "name": "agent",
            "type": "pubkey"
          },
          {
            "name": "seller",
            "type": "pubkey"
          },
          {
            "name": "listing_price",
            "type": "u64"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "AgentRegisteredEvent",
      "type": {
        "fields": [
          {
            "name": "agent",
            "type": "pubkey"
          },
          {
            "name": "owner",
            "type": "pubkey"
          },
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "timestamp",
            "type": "i64"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "AgentReplicatedEvent",
      "type": {
        "fields": [
          {
            "name": "original_agent",
            "type": "pubkey"
          },
          {
            "name": "replicated_agent",
            "type": "pubkey"
          },
          {
            "name": "replicator",
            "type": "pubkey"
          },
          {
            "name": "fee_paid",
            "type": "u64"
          },
          {
            "name": "timestamp",
            "type": "i64"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Agent service configuration data with 2025 security validation",
        "",
        "Follows SPL Token 2022 patterns for enhanced agent management"
      ],
      "name": "AgentServiceData",
      "type": {
        "fields": [
          {
            "docs": [
              "Agent's public key for verification (must match PDA derivation)"
            ],
            "name": "agent_pubkey",
            "type": "pubkey"
          },
          {
            "docs": [
              "Service endpoint URL (validated for length and format)"
            ],
            "name": "service_endpoint",
            "type": "string"
          },
          {
            "docs": [
              "Agent availability status for work orders"
            ],
            "name": "is_active",
            "type": "bool"
          },
          {
            "docs": [
              "Timestamp for tracking updates (Unix timestamp)"
            ],
            "name": "last_updated",
            "type": "i64"
          },
          {
            "docs": [
              "Optional metadata URI for extended agent information"
            ],
            "name": "metadata_uri",
            "type": {
              "option": "string"
            }
          },
          {
            "docs": [
              "Service capability tags for filtering"
            ],
            "name": "capabilities",
            "type": {
              "vec": "string"
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Enhanced event structure following 2025 patterns"
      ],
      "name": "AgentServiceUpdatedEvent",
      "type": {
        "fields": [
          {
            "docs": [
              "Agent account public key"
            ],
            "name": "agent",
            "type": "pubkey"
          },
          {
            "docs": [
              "Owner who performed the update"
            ],
            "name": "owner",
            "type": "pubkey"
          },
          {
            "docs": [
              "Update timestamp"
            ],
            "name": "timestamp",
            "type": "i64"
          },
          {
            "docs": [
              "Service endpoint that was updated"
            ],
            "name": "service_endpoint",
            "type": "string"
          },
          {
            "docs": [
              "New active status"
            ],
            "name": "is_active",
            "type": "bool"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Agent status management event (2025 pattern)"
      ],
      "name": "AgentStatusChangedEvent",
      "type": {
        "fields": [
          {
            "docs": [
              "Agent public key"
            ],
            "name": "agent",
            "type": "pubkey"
          },
          {
            "docs": [
              "Previous status"
            ],
            "name": "previous_status",
            "type": "bool"
          },
          {
            "docs": [
              "New status"
            ],
            "name": "new_status",
            "type": "bool"
          },
          {
            "docs": [
              "Change timestamp"
            ],
            "name": "timestamp",
            "type": "i64"
          },
          {
            "docs": [
              "Owner who made the change"
            ],
            "name": "authority",
            "type": "pubkey"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "AgentUpdatedEvent",
      "type": {
        "fields": [
          {
            "name": "agent",
            "type": "pubkey"
          },
          {
            "name": "owner",
            "type": "pubkey"
          },
          {
            "name": "timestamp",
            "type": "i64"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "AgentVerification",
      "type": {
        "fields": [
          {
            "name": "agent",
            "type": "pubkey"
          },
          {
            "name": "verifier",
            "type": "pubkey"
          },
          {
            "name": "verification_data",
            "type": {
              "defined": {
                "name": "AgentVerificationData"
              }
            }
          },
          {
            "name": "created_at",
            "type": "i64"
          },
          {
            "name": "expires_at",
            "type": "i64"
          },
          {
            "name": "is_active",
            "type": "bool"
          },
          {
            "name": "bump",
            "type": "u8"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "AgentVerificationData",
      "type": {
        "fields": [
          {
            "name": "agent_pubkey",
            "type": "pubkey"
          },
          {
            "name": "service_endpoint",
            "type": "string"
          },
          {
            "name": "supported_capabilities",
            "type": {
              "vec": "u64"
            }
          },
          {
            "name": "verified_at",
            "type": "i64"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Template aging policies"
      ],
      "name": "AgingPolicy",
      "type": {
        "fields": [
          {
            "docs": [
              "Biometric type"
            ],
            "name": "biometric_type",
            "type": {
              "defined": {
                "name": "BiometricType"
              }
            }
          },
          {
            "docs": [
              "Maximum age"
            ],
            "name": "max_age",
            "type": "i64"
          },
          {
            "docs": [
              "Refresh requirements"
            ],
            "name": "refresh_requirements",
            "type": {
              "vec": "string"
            }
          },
          {
            "docs": [
              "Degradation handling"
            ],
            "name": "degradation_handling",
            "type": {
              "defined": {
                "name": "DegradationHandling"
              }
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "AnalyticsDashboard",
      "type": {
        "fields": [
          {
            "name": "dashboard_id",
            "type": "u64"
          },
          {
            "name": "owner",
            "type": "pubkey"
          },
          {
            "name": "metrics",
            "type": "string"
          },
          {
            "name": "created_at",
            "type": "i64"
          },
          {
            "name": "updated_at",
            "type": "i64"
          },
          {
            "name": "bump",
            "type": "u8"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "AnalyticsDashboardCreatedEvent",
      "type": {
        "fields": [
          {
            "name": "dashboard",
            "type": "pubkey"
          },
          {
            "name": "owner",
            "type": "pubkey"
          },
          {
            "name": "dashboard_id",
            "type": "u64"
          },
          {
            "name": "timestamp",
            "type": "i64"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "AnalyticsDashboardUpdatedEvent",
      "type": {
        "fields": [
          {
            "name": "dashboard",
            "type": "pubkey"
          },
          {
            "name": "owner",
            "type": "pubkey"
          },
          {
            "name": "timestamp",
            "type": "i64"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "ApplicationStatus",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Submitted"
          },
          {
            "name": "Accepted"
          },
          {
            "name": "Rejected"
          },
          {
            "name": "Withdrawn"
          }
        ]
      }
    },
    {
      "docs": [
        "Approval level configuration"
      ],
      "name": "ApprovalLevel",
      "type": {
        "fields": [
          {
            "docs": [
              "Action type requiring approval"
            ],
            "name": "action_type",
            "type": {
              "defined": {
                "name": "AuditAction"
              }
            }
          },
          {
            "docs": [
              "Required approvers"
            ],
            "name": "required_approvers",
            "type": {
              "vec": "pubkey"
            }
          },
          {
            "docs": [
              "Minimum approval count"
            ],
            "name": "min_approvals",
            "type": "u8"
          },
          {
            "docs": [
              "Timeout for approval process"
            ],
            "name": "approval_timeout",
            "type": "i64"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Arbitrator registry for managing authorized dispute arbitrators"
      ],
      "name": "ArbitratorRegistry",
      "type": {
        "fields": [
          {
            "name": "authority",
            "type": "pubkey"
          },
          {
            "name": "authorized_arbitrators",
            "type": {
              "vec": "pubkey"
            }
          },
          {
            "name": "created_at",
            "type": "i64"
          },
          {
            "name": "updated_at",
            "type": "i64"
          },
          {
            "name": "bump",
            "type": "u8"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "AuctionBid",
      "type": {
        "fields": [
          {
            "name": "bidder",
            "type": "pubkey"
          },
          {
            "name": "amount",
            "type": "u64"
          },
          {
            "name": "timestamp",
            "type": "i64"
          },
          {
            "name": "is_winning",
            "type": "bool"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "AuctionBidPlacedEvent",
      "type": {
        "fields": [
          {
            "name": "auction",
            "type": "pubkey"
          },
          {
            "name": "bidder",
            "type": "pubkey"
          },
          {
            "name": "bid_amount",
            "type": "u64"
          },
          {
            "name": "total_bids",
            "type": "u32"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "AuctionData",
      "type": {
        "fields": [
          {
            "name": "auction_type",
            "type": {
              "defined": {
                "name": "AuctionType"
              }
            }
          },
          {
            "name": "starting_price",
            "type": "u64"
          },
          {
            "name": "reserve_price",
            "type": "u64"
          },
          {
            "name": "current_bid",
            "type": "u64"
          },
          {
            "name": "current_bidder",
            "type": {
              "option": "pubkey"
            }
          },
          {
            "name": "auction_end_time",
            "type": "i64"
          },
          {
            "name": "minimum_bid_increment",
            "type": "u64"
          },
          {
            "name": "total_bids",
            "type": "u32"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "AuctionFailedEvent",
      "type": {
        "fields": [
          {
            "name": "auction",
            "type": "pubkey"
          },
          {
            "name": "reason",
            "type": "string"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "AuctionFinalizedEvent",
      "type": {
        "fields": [
          {
            "name": "auction",
            "type": "pubkey"
          },
          {
            "name": "winner",
            "type": "pubkey"
          },
          {
            "name": "winning_bid",
            "type": "u64"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "AuctionMarketplace",
      "type": {
        "fields": [
          {
            "name": "auction",
            "type": "pubkey"
          },
          {
            "name": "agent",
            "type": "pubkey"
          },
          {
            "name": "creator",
            "type": "pubkey"
          },
          {
            "name": "auction_type",
            "type": {
              "defined": {
                "name": "AuctionType"
              }
            }
          },
          {
            "name": "starting_price",
            "type": "u64"
          },
          {
            "name": "reserve_price",
            "type": "u64"
          },
          {
            "name": "current_price",
            "type": "u64"
          },
          {
            "name": "current_winner",
            "type": {
              "option": "pubkey"
            }
          },
          {
            "name": "winner",
            "type": {
              "option": "pubkey"
            }
          },
          {
            "name": "auction_end_time",
            "type": "i64"
          },
          {
            "name": "minimum_bid_increment",
            "type": "u64"
          },
          {
            "name": "total_bids",
            "type": "u32"
          },
          {
            "name": "status",
            "type": {
              "defined": {
                "name": "AuctionStatus"
              }
            }
          },
          {
            "name": "bids",
            "type": {
              "vec": {
                "defined": {
                  "name": "AuctionBid"
                }
              }
            }
          },
          {
            "name": "created_at",
            "type": "i64"
          },
          {
            "name": "ended_at",
            "type": {
              "option": "i64"
            }
          },
          {
            "name": "metadata_uri",
            "type": "string"
          },
          {
            "name": "bump",
            "type": "u8"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "AuctionStatus",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Active"
          },
          {
            "name": "Ended"
          },
          {
            "name": "Cancelled"
          },
          {
            "name": "Settled"
          }
        ]
      }
    },
    {
      "name": "AuctionType",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "English"
          },
          {
            "name": "Dutch"
          },
          {
            "name": "SealedBid"
          },
          {
            "name": "Vickrey"
          }
        ]
      }
    },
    {
      "docs": [
        "Types of auditable actions"
      ],
      "name": "AuditAction",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "AgentRegistered"
          },
          {
            "name": "AgentUpdated"
          },
          {
            "name": "AgentDeactivated"
          },
          {
            "name": "AgentVerified"
          },
          {
            "name": "PaymentProcessed"
          },
          {
            "name": "EscrowCreated"
          },
          {
            "name": "EscrowReleased"
          },
          {
            "name": "FundsWithdrawn"
          },
          {
            "name": "ProposalCreated"
          },
          {
            "name": "VoteCast"
          },
          {
            "name": "ProposalExecuted"
          },
          {
            "name": "GovernanceUpdated"
          },
          {
            "name": "AccessGranted"
          },
          {
            "name": "AccessRevoked"
          },
          {
            "name": "SecurityPolicyUpdated"
          },
          {
            "name": "SuspiciousActivity"
          },
          {
            "name": "ComplianceReportGenerated"
          },
          {
            "name": "RegulatorySubmission"
          },
          {
            "name": "AuditRequested"
          },
          {
            "name": "ViolationDetected"
          },
          {
            "name": "SystemConfigUpdated"
          },
          {
            "name": "EmergencyAction"
          },
          {
            "name": "MaintenancePerformed"
          },
          {
            "name": "WorkOrderCreated"
          },
          {
            "name": "WorkOrderCompleted"
          },
          {
            "name": "DisputeRaised"
          },
          {
            "name": "DisputeResolved"
          },
          {
            "name": "MultisigCreated"
          },
          {
            "name": "MultisigSigned"
          },
          {
            "name": "MultisigExecuted"
          },
          {
            "name": "RiskAssessmentPerformed"
          },
          {
            "name": "RiskThresholdExceeded"
          },
          {
            "name": "RiskMitigationApplied"
          }
        ]
      }
    },
    {
      "docs": [
        "Audit trail configuration"
      ],
      "name": "AuditConfig",
      "type": {
        "fields": [
          {
            "docs": [
              "Maximum entries before archival"
            ],
            "name": "max_entries",
            "type": "u32"
          },
          {
            "docs": [
              "Retention period in seconds"
            ],
            "name": "retention_period",
            "type": "i64"
          },
          {
            "docs": [
              "Auto-archival enabled"
            ],
            "name": "auto_archive",
            "type": "bool"
          },
          {
            "docs": [
              "Compliance reporting frequency"
            ],
            "name": "reporting_frequency",
            "type": {
              "defined": {
                "name": "ReportingFrequency"
              }
            }
          },
          {
            "docs": [
              "Required approval levels"
            ],
            "name": "approval_levels",
            "type": {
              "vec": {
                "defined": {
                  "name": "ApprovalLevel"
                }
              }
            }
          },
          {
            "docs": [
              "Encryption requirements"
            ],
            "name": "encryption_required",
            "type": "bool"
          },
          {
            "docs": [
              "Backup frequency"
            ],
            "name": "backup_frequency",
            "type": {
              "defined": {
                "name": "BackupFrequency"
              }
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Individual audit entry (immutable)"
      ],
      "name": "AuditEntry",
      "type": {
        "fields": [
          {
            "docs": [
              "Unique entry ID"
            ],
            "name": "entry_id",
            "type": "u64"
          },
          {
            "docs": [
              "Timestamp of the action"
            ],
            "name": "timestamp",
            "type": "i64"
          },
          {
            "docs": [
              "Action that was performed"
            ],
            "name": "action",
            "type": {
              "defined": {
                "name": "AuditAction"
              }
            }
          },
          {
            "docs": [
              "User/agent who performed the action"
            ],
            "name": "actor",
            "type": "pubkey"
          },
          {
            "docs": [
              "Target of the action (if applicable)"
            ],
            "name": "target",
            "type": {
              "option": "pubkey"
            }
          },
          {
            "docs": [
              "Additional context data"
            ],
            "name": "context",
            "type": {
              "defined": {
                "name": "AuditContext"
              }
            }
          },
          {
            "docs": [
              "Compliance flags"
            ],
            "name": "compliance_flags",
            "type": {
              "defined": {
                "name": "ComplianceFlags"
              }
            }
          },
          {
            "docs": [
              "Hash of previous entry for chain integrity"
            ],
            "name": "previous_hash",
            "type": {
              "array": [
                "u8",
                32
              ]
            }
          },
          {
            "docs": [
              "Hash of this entry"
            ],
            "name": "entry_hash",
            "type": {
              "array": [
                "u8",
                32
              ]
            }
          },
          {
            "docs": [
              "Digital signature for non-repudiation"
            ],
            "name": "signature",
            "type": {
              "option": {
                "array": [
                  "u8",
                  64
                ]
              }
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Comprehensive audit trail for all protocol operations"
      ],
      "name": "AuditTrail",
      "type": {
        "fields": [
          {
            "docs": [
              "Authority that can manage this audit trail"
            ],
            "name": "authority",
            "type": "pubkey"
          },
          {
            "docs": [
              "Unique identifier for this audit trail"
            ],
            "name": "trail_id",
            "type": "u64"
          },
          {
            "docs": [
              "Creation timestamp"
            ],
            "name": "created_at",
            "type": "i64"
          },
          {
            "docs": [
              "Last update timestamp"
            ],
            "name": "updated_at",
            "type": "i64"
          },
          {
            "docs": [
              "Version for compatibility"
            ],
            "name": "version",
            "type": "u8"
          },
          {
            "docs": [
              "Audit entries (immutable log)"
            ],
            "name": "entries",
            "type": {
              "vec": {
                "defined": {
                  "name": "AuditEntry"
                }
              }
            }
          },
          {
            "docs": [
              "Trail configuration"
            ],
            "name": "config",
            "type": {
              "defined": {
                "name": "AuditConfig"
              }
            }
          },
          {
            "docs": [
              "Compliance status"
            ],
            "name": "compliance_status",
            "type": {
              "defined": {
                "name": "ComplianceStatus"
              }
            }
          },
          {
            "docs": [
              "Hash chain for integrity verification"
            ],
            "name": "hash_chain",
            "type": {
              "vec": {
                "array": [
                  "u8",
                  32
                ]
              }
            }
          },
          {
            "docs": [
              "Reserved space for future extensions"
            ],
            "name": "reserved",
            "type": {
              "array": [
                "u8",
                128
              ]
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "AuditTrailInitializedEvent",
      "type": {
        "fields": [
          {
            "name": "entity",
            "type": "pubkey"
          },
          {
            "name": "entity_type",
            "type": "string"
          },
          {
            "name": "timestamp",
            "type": "i64"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Authentication levels"
      ],
      "name": "AuthenticationLevel",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Low"
          },
          {
            "name": "Medium"
          },
          {
            "name": "High"
          },
          {
            "name": "VeryHigh"
          }
        ]
      }
    },
    {
      "docs": [
        "Authentication methods"
      ],
      "name": "AuthenticationMethod",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Password"
          },
          {
            "name": "DigitalSignature"
          },
          {
            "name": "Biometric"
          },
          {
            "name": "Token"
          },
          {
            "name": "Certificate"
          },
          {
            "name": "Sms"
          },
          {
            "name": "Email"
          },
          {
            "name": "App"
          },
          {
            "name": "Hardware"
          }
        ]
      }
    },
    {
      "docs": [
        "Authentication policies"
      ],
      "name": "AuthenticationPolicies",
      "type": {
        "fields": [
          {
            "docs": [
              "Multi-factor authentication required"
            ],
            "name": "mfa_required",
            "type": "bool"
          },
          {
            "docs": [
              "Supported authentication methods"
            ],
            "name": "supported_methods",
            "type": {
              "vec": {
                "defined": {
                  "name": "AuthenticationMethod"
                }
              }
            }
          },
          {
            "docs": [
              "Authentication strength requirements"
            ],
            "name": "strength_requirements",
            "type": {
              "defined": {
                "name": "AuthenticationStrength"
              }
            }
          },
          {
            "docs": [
              "Account lockout policies"
            ],
            "name": "lockout_policies",
            "type": {
              "defined": {
                "name": "AccountLockoutPolicies"
              }
            }
          },
          {
            "docs": [
              "Biometric policies"
            ],
            "name": "biometric_policies",
            "type": {
              "option": {
                "defined": {
                  "name": "BiometricPolicies"
                }
              }
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Authentication strength requirements"
      ],
      "name": "AuthenticationStrength",
      "type": {
        "fields": [
          {
            "docs": [
              "Minimum authentication level"
            ],
            "name": "minimum_level",
            "type": {
              "defined": {
                "name": "AuthenticationLevel"
              }
            }
          },
          {
            "docs": [
              "Risk-based authentication"
            ],
            "name": "risk_based",
            "type": "bool"
          },
          {
            "docs": [
              "Adaptive authentication"
            ],
            "name": "adaptive",
            "type": "bool"
          },
          {
            "docs": [
              "Step-up authentication triggers"
            ],
            "name": "step_up_triggers",
            "type": {
              "vec": {
                "defined": {
                  "name": "StepUpTrigger"
                }
              }
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "AuthorizationPolicies",
      "type": {
        "fields": [
          {
            "name": "default_deny",
            "type": "bool"
          },
          {
            "name": "explicit_permissions_required",
            "type": "bool"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Backup frequency options"
      ],
      "name": "BackupFrequency",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Hourly"
          },
          {
            "name": "Daily"
          },
          {
            "name": "Weekly"
          },
          {
            "name": "Monthly"
          }
        ]
      }
    },
    {
      "docs": [
        "Biometric authentication policies"
      ],
      "name": "BiometricPolicies",
      "type": {
        "fields": [
          {
            "docs": [
              "Supported biometric types"
            ],
            "name": "supported_types",
            "type": {
              "vec": {
                "defined": {
                  "name": "BiometricType"
                }
              }
            }
          },
          {
            "docs": [
              "Biometric quality requirements"
            ],
            "name": "quality_requirements",
            "type": {
              "defined": {
                "name": "BiometricQuality"
              }
            }
          },
          {
            "docs": [
              "Liveness detection required"
            ],
            "name": "liveness_detection",
            "type": "bool"
          },
          {
            "docs": [
              "Biometric template protection"
            ],
            "name": "template_protection",
            "type": {
              "defined": {
                "name": "BiometricProtection"
              }
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Biometric template protection"
      ],
      "name": "BiometricProtection",
      "type": {
        "fields": [
          {
            "docs": [
              "Template encryption required"
            ],
            "name": "encryption_required",
            "type": "bool"
          },
          {
            "docs": [
              "Template storage method"
            ],
            "name": "storage_method",
            "type": {
              "defined": {
                "name": "BiometricStorageMethod"
              }
            }
          },
          {
            "docs": [
              "Template revocation support"
            ],
            "name": "revocation_support",
            "type": "bool"
          },
          {
            "docs": [
              "Template aging policies"
            ],
            "name": "aging_policies",
            "type": {
              "vec": {
                "defined": {
                  "name": "AgingPolicy"
                }
              }
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Biometric template storage methods"
      ],
      "name": "BiometricStorageMethod",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "OnDevice"
          },
          {
            "name": "Encrypted"
          },
          {
            "name": "Hashed"
          },
          {
            "name": "Distributed"
          },
          {
            "name": "None"
          }
        ]
      }
    },
    {
      "docs": [
        "Types of biometric authentication"
      ],
      "name": "BiometricType",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Fingerprint"
          },
          {
            "name": "FaceRecognition"
          },
          {
            "name": "IrisRecognition"
          },
          {
            "name": "VoiceRecognition"
          },
          {
            "name": "Signature"
          },
          {
            "name": "Gait"
          },
          {
            "name": "Behavioral"
          }
        ]
      }
    },
    {
      "name": "BulkDeal",
      "type": {
        "fields": [
          {
            "name": "deal_id",
            "type": "u64"
          },
          {
            "name": "agent",
            "type": "pubkey"
          },
          {
            "name": "customer",
            "type": "pubkey"
          },
          {
            "name": "deal_type",
            "type": {
              "defined": {
                "name": "DealType"
              }
            }
          },
          {
            "name": "total_volume",
            "type": "u32"
          },
          {
            "name": "total_value",
            "type": "u64"
          },
          {
            "name": "discount_percentage",
            "type": "f64"
          },
          {
            "name": "volume_tiers",
            "type": {
              "vec": {
                "defined": {
                  "name": "VolumeTier"
                }
              }
            }
          },
          {
            "name": "sla_terms",
            "type": "string"
          },
          {
            "name": "contract_duration",
            "type": "i64"
          },
          {
            "name": "start_date",
            "type": "i64"
          },
          {
            "name": "end_date",
            "type": "i64"
          },
          {
            "name": "is_active",
            "type": "bool"
          },
          {
            "name": "created_at",
            "type": "i64"
          },
          {
            "name": "executed_volume",
            "type": "u32"
          },
          {
            "name": "bump",
            "type": "u8"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "BulkDealBatchExecutedEvent",
      "type": {
        "fields": [
          {
            "name": "deal",
            "type": "pubkey"
          },
          {
            "name": "executor",
            "type": "pubkey"
          },
          {
            "name": "batch_size",
            "type": "u32"
          },
          {
            "name": "total_executed",
            "type": "u32"
          },
          {
            "name": "timestamp",
            "type": "i64"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "BulkDealCreatedEvent",
      "type": {
        "fields": [
          {
            "name": "deal",
            "type": "pubkey"
          },
          {
            "name": "agent",
            "type": "pubkey"
          },
          {
            "name": "customer",
            "type": "pubkey"
          },
          {
            "name": "deal_type",
            "type": {
              "defined": {
                "name": "DealType"
              }
            }
          },
          {
            "name": "total_value",
            "type": "u64"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "BulkDealData",
      "type": {
        "fields": [
          {
            "name": "deal_id",
            "type": "u64"
          },
          {
            "name": "deal_type",
            "type": {
              "defined": {
                "name": "DealType"
              }
            }
          },
          {
            "name": "total_volume",
            "type": "u32"
          },
          {
            "name": "total_value",
            "type": "u64"
          },
          {
            "name": "discount_percentage",
            "type": "f64"
          },
          {
            "name": "volume_tiers",
            "type": {
              "vec": {
                "defined": {
                  "name": "VolumeTier"
                }
              }
            }
          },
          {
            "name": "sla_terms",
            "type": "string"
          },
          {
            "name": "contract_duration",
            "type": "i64"
          },
          {
            "name": "end_date",
            "type": "i64"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "Channel",
      "type": {
        "fields": [
          {
            "name": "creator",
            "type": "pubkey"
          },
          {
            "name": "participants",
            "type": {
              "vec": "pubkey"
            }
          },
          {
            "name": "channel_type",
            "type": {
              "defined": {
                "name": "ChannelType"
              }
            }
          },
          {
            "name": "is_private",
            "type": "bool"
          },
          {
            "name": "message_count",
            "type": "u64"
          },
          {
            "name": "created_at",
            "type": "i64"
          },
          {
            "name": "last_activity",
            "type": "i64"
          },
          {
            "name": "is_active",
            "type": "bool"
          },
          {
            "name": "bump",
            "type": "u8"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "ChannelCreatedEvent",
      "type": {
        "fields": [
          {
            "name": "channel",
            "type": "pubkey"
          },
          {
            "name": "creator",
            "type": "pubkey"
          },
          {
            "name": "channel_type",
            "type": {
              "defined": {
                "name": "ChannelType"
              }
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "ChannelCreationData",
      "type": {
        "fields": [
          {
            "name": "channel_id",
            "type": "u64"
          },
          {
            "name": "participants",
            "type": {
              "vec": "pubkey"
            }
          },
          {
            "name": "channel_type",
            "type": {
              "defined": {
                "name": "ChannelType"
              }
            }
          },
          {
            "name": "is_private",
            "type": "bool"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "ChannelType",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Direct"
          },
          {
            "name": "Group"
          },
          {
            "name": "Public"
          },
          {
            "name": "Private"
          }
        ]
      }
    },
    {
      "docs": [
        "Compliance flags for audit entries"
      ],
      "name": "ComplianceFlags",
      "type": {
        "fields": [
          {
            "docs": [
              "Requires regulatory reporting"
            ],
            "name": "requires_reporting",
            "type": "bool"
          },
          {
            "docs": [
              "High-risk transaction"
            ],
            "name": "high_risk",
            "type": "bool"
          },
          {
            "docs": [
              "Sensitive data involved"
            ],
            "name": "sensitive_data",
            "type": "bool"
          },
          {
            "docs": [
              "Cross-border transaction"
            ],
            "name": "cross_border",
            "type": "bool"
          },
          {
            "docs": [
              "Large amount transaction"
            ],
            "name": "large_amount",
            "type": "bool"
          },
          {
            "docs": [
              "Suspicious activity detected"
            ],
            "name": "suspicious",
            "type": "bool"
          },
          {
            "docs": [
              "Manual review required"
            ],
            "name": "manual_review",
            "type": "bool"
          },
          {
            "docs": [
              "Regulatory jurisdiction"
            ],
            "name": "jurisdiction",
            "type": {
              "option": "string"
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Compliance metrics"
      ],
      "name": "ComplianceMetrics",
      "type": {
        "fields": [
          {
            "docs": [
              "Compliance score (0-100)"
            ],
            "name": "compliance_score",
            "type": "u8"
          },
          {
            "docs": [
              "Policy adherence rate"
            ],
            "name": "policy_adherence_rate",
            "type": "u8"
          },
          {
            "docs": [
              "Incident response time (average seconds)"
            ],
            "name": "avg_incident_response_time",
            "type": "u64"
          },
          {
            "docs": [
              "False positive rate"
            ],
            "name": "false_positive_rate",
            "type": "u8"
          },
          {
            "docs": [
              "Coverage percentage"
            ],
            "name": "coverage_percentage",
            "type": "u8"
          },
          {
            "docs": [
              "Audit readiness score"
            ],
            "name": "audit_readiness_score",
            "type": "u8"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "CompliancePolicies",
      "type": {
        "fields": [
          {
            "name": "frameworks",
            "type": {
              "vec": "string"
            }
          },
          {
            "name": "audit_requirements",
            "type": {
              "vec": "string"
            }
          },
          {
            "name": "reporting_requirements",
            "type": {
              "vec": "string"
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Compliance report generation account"
      ],
      "name": "ComplianceReport",
      "type": {
        "fields": [
          {
            "docs": [
              "Report ID"
            ],
            "name": "report_id",
            "type": "u64"
          },
          {
            "docs": [
              "Report type"
            ],
            "name": "report_type",
            "type": {
              "defined": {
                "name": "ReportType"
              }
            }
          },
          {
            "docs": [
              "Generation timestamp"
            ],
            "name": "generated_at",
            "type": "i64"
          },
          {
            "docs": [
              "Reporting period start"
            ],
            "name": "period_start",
            "type": "i64"
          },
          {
            "docs": [
              "Reporting period end"
            ],
            "name": "period_end",
            "type": "i64"
          },
          {
            "docs": [
              "Report data"
            ],
            "name": "report_data",
            "type": {
              "defined": {
                "name": "ReportData"
              }
            }
          },
          {
            "docs": [
              "Digital signature for authenticity"
            ],
            "name": "signature",
            "type": {
              "array": [
                "u8",
                64
              ]
            }
          },
          {
            "docs": [
              "Report status"
            ],
            "name": "status",
            "type": {
              "defined": {
                "name": "ReportStatus"
              }
            }
          },
          {
            "docs": [
              "Submission details"
            ],
            "name": "submission_details",
            "type": {
              "option": {
                "defined": {
                  "name": "SubmissionDetails"
                }
              }
            }
          },
          {
            "docs": [
              "Reserved space"
            ],
            "name": "reserved",
            "type": {
              "array": [
                "u8",
                64
              ]
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "ComplianceReportGeneratedEvent",
      "type": {
        "fields": [
          {
            "name": "report",
            "type": "pubkey"
          },
          {
            "name": "report_id",
            "type": "u64"
          },
          {
            "name": "report_type",
            "type": {
              "defined": {
                "name": "ReportType"
              }
            }
          },
          {
            "name": "compliance_rate",
            "type": "u64"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Types of execution conditions"
      ],
      "name": "ConditionType",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "TimeDelay"
          },
          {
            "name": "TokenBalance"
          },
          {
            "name": "PriceThreshold"
          },
          {
            "name": "VoteCount"
          },
          {
            "name": "ExternalOracle"
          },
          {
            "name": "CustomLogic"
          }
        ]
      }
    },
    {
      "docs": [
        "Constraint condition definition"
      ],
      "name": "ConstraintCondition",
      "type": {
        "fields": [
          {
            "docs": [
              "Attribute name"
            ],
            "name": "attribute",
            "type": "string"
          },
          {
            "docs": [
              "Condition operator"
            ],
            "name": "operator",
            "type": {
              "defined": {
                "name": "ConstraintOperator"
              }
            }
          },
          {
            "docs": [
              "Expected value"
            ],
            "name": "value",
            "type": "string"
          },
          {
            "docs": [
              "Value type"
            ],
            "name": "value_type",
            "type": {
              "defined": {
                "name": "ValueType"
              }
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Operators for constraint conditions"
      ],
      "name": "ConstraintOperator",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Equals"
          },
          {
            "name": "NotEquals"
          },
          {
            "name": "GreaterThan"
          },
          {
            "name": "LessThan"
          },
          {
            "name": "GreaterThanOrEqual"
          },
          {
            "name": "LessThanOrEqual"
          },
          {
            "name": "Contains"
          },
          {
            "name": "NotContains"
          },
          {
            "name": "In"
          },
          {
            "name": "NotIn"
          },
          {
            "name": "Matches"
          },
          {
            "name": "NotMatches"
          }
        ]
      }
    },
    {
      "name": "ContractStatus",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Active"
          },
          {
            "name": "Completed"
          },
          {
            "name": "Cancelled"
          },
          {
            "name": "Disputed"
          }
        ]
      }
    },
    {
      "name": "CounterOfferMadeEvent",
      "type": {
        "fields": [
          {
            "name": "negotiation",
            "type": "pubkey"
          },
          {
            "name": "sender",
            "type": "pubkey"
          },
          {
            "name": "counter_offer",
            "type": "u64"
          },
          {
            "name": "message",
            "type": "string"
          },
          {
            "name": "auto_accepted",
            "type": "bool"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Data access levels"
      ],
      "name": "DataAccessLevel",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Public"
          },
          {
            "name": "Internal"
          },
          {
            "name": "Confidential"
          },
          {
            "name": "Restricted"
          },
          {
            "name": "TopSecret"
          }
        ]
      }
    },
    {
      "name": "DataProtectionPolicies",
      "type": {
        "fields": [
          {
            "name": "encryption_required",
            "type": "bool"
          },
          {
            "name": "classification_required",
            "type": "bool"
          },
          {
            "name": "dlp_enabled",
            "type": "bool"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "DealType",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "VolumeDiscount"
          },
          {
            "name": "BundleOffer"
          },
          {
            "name": "GroupPurchase"
          },
          {
            "name": "Wholesale"
          }
        ]
      }
    },
    {
      "docs": [
        "Handling of template degradation"
      ],
      "name": "DegradationHandling",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "RequireRefresh"
          },
          {
            "name": "GradualDegradation"
          },
          {
            "name": "ImmediateExpiry"
          },
          {
            "name": "AdaptiveThreshold"
          }
        ]
      }
    },
    {
      "docs": [
        "Vote delegation information"
      ],
      "name": "DelegationInfo",
      "type": {
        "fields": [
          {
            "docs": [
              "Original delegator"
            ],
            "name": "delegator",
            "type": "pubkey"
          },
          {
            "docs": [
              "Delegation timestamp"
            ],
            "name": "delegated_at",
            "type": "i64"
          },
          {
            "docs": [
              "Delegation scope"
            ],
            "name": "scope",
            "type": {
              "defined": {
                "name": "DelegationScope"
              }
            }
          },
          {
            "docs": [
              "Delegation expiry"
            ],
            "name": "expires_at",
            "type": {
              "option": "i64"
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Scope of vote delegation"
      ],
      "name": "DelegationScope",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "All"
          },
          {
            "fields": [
              {
                "defined": {
                  "name": "ProposalType"
                }
              }
            ],
            "name": "ProposalType"
          },
          {
            "name": "SingleProposal"
          },
          {
            "name": "Limited"
          }
        ]
      }
    },
    {
      "name": "Deliverable",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Code"
          },
          {
            "name": "Document"
          },
          {
            "name": "Design"
          },
          {
            "name": "Analysis"
          },
          {
            "name": "Other"
          }
        ]
      }
    },
    {
      "name": "DemandMetrics",
      "type": {
        "fields": [
          {
            "name": "current_demand",
            "type": "u64"
          },
          {
            "name": "peak_demand",
            "type": "u64"
          },
          {
            "name": "average_demand",
            "type": "u64"
          },
          {
            "name": "demand_trend",
            "type": "i32"
          },
          {
            "name": "demand_volatility",
            "type": "u32"
          },
          {
            "name": "last_updated",
            "type": "i64"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "DisputeCase",
      "type": {
        "fields": [
          {
            "name": "transaction",
            "type": "pubkey"
          },
          {
            "name": "complainant",
            "type": "pubkey"
          },
          {
            "name": "respondent",
            "type": "pubkey"
          },
          {
            "name": "moderator",
            "type": {
              "option": "pubkey"
            }
          },
          {
            "name": "reason",
            "type": "string"
          },
          {
            "name": "status",
            "type": {
              "defined": {
                "name": "DisputeStatus"
              }
            }
          },
          {
            "name": "evidence",
            "type": {
              "vec": {
                "defined": {
                  "name": "DisputeEvidence"
                }
              }
            }
          },
          {
            "name": "resolution",
            "type": {
              "option": "string"
            }
          },
          {
            "name": "ai_score",
            "type": "f32"
          },
          {
            "name": "human_review",
            "type": "bool"
          },
          {
            "name": "created_at",
            "type": "i64"
          },
          {
            "name": "resolved_at",
            "type": {
              "option": "i64"
            }
          },
          {
            "name": "bump",
            "type": "u8"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "DisputeEvidence",
      "type": {
        "fields": [
          {
            "name": "submitter",
            "type": "pubkey"
          },
          {
            "name": "evidence_type",
            "type": "string"
          },
          {
            "name": "evidence_data",
            "type": "string"
          },
          {
            "name": "timestamp",
            "type": "i64"
          },
          {
            "name": "is_verified",
            "type": "bool"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "DisputeEvidenceSubmittedEvent",
      "type": {
        "fields": [
          {
            "name": "dispute",
            "type": "pubkey"
          },
          {
            "name": "submitter",
            "type": "pubkey"
          },
          {
            "name": "evidence_count",
            "type": "u32"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "DisputeFiledEvent",
      "type": {
        "fields": [
          {
            "name": "dispute",
            "type": "pubkey"
          },
          {
            "name": "complainant",
            "type": "pubkey"
          },
          {
            "name": "respondent",
            "type": "pubkey"
          },
          {
            "name": "reason",
            "type": "string"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "DisputeResolvedEvent",
      "type": {
        "fields": [
          {
            "name": "dispute",
            "type": "pubkey"
          },
          {
            "name": "arbitrator",
            "type": "pubkey"
          },
          {
            "name": "award_to_complainant",
            "type": "bool"
          },
          {
            "name": "resolution",
            "type": "string"
          },
          {
            "name": "timestamp",
            "type": "i64"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "DisputeStatus",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Filed"
          },
          {
            "name": "UnderReview"
          },
          {
            "name": "EvidenceSubmitted"
          },
          {
            "name": "Resolved"
          },
          {
            "name": "Escalated"
          },
          {
            "name": "Closed"
          }
        ]
      }
    },
    {
      "name": "DynamicPricingEngine",
      "type": {
        "fields": [
          {
            "name": "engine_id",
            "type": "u64"
          },
          {
            "name": "agent",
            "type": "pubkey"
          },
          {
            "name": "algorithm",
            "type": {
              "defined": {
                "name": "PricingAlgorithm"
              }
            }
          },
          {
            "name": "config",
            "type": {
              "defined": {
                "name": "DynamicPricingConfig"
              }
            }
          },
          {
            "name": "current_price",
            "type": "u64"
          },
          {
            "name": "last_updated",
            "type": "i64"
          },
          {
            "name": "is_active",
            "type": "bool"
          },
          {
            "name": "bump",
            "type": "u8"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "DynamicPricingEngineCreatedEvent",
      "type": {
        "fields": [
          {
            "name": "engine",
            "type": "pubkey"
          },
          {
            "name": "agent",
            "type": "pubkey"
          },
          {
            "name": "owner",
            "type": "pubkey"
          },
          {
            "name": "algorithm",
            "type": {
              "defined": {
                "name": "PricingAlgorithm"
              }
            }
          },
          {
            "name": "base_price",
            "type": "u64"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "DynamicPricingUpdatedEvent",
      "type": {
        "fields": [
          {
            "name": "engine",
            "type": "pubkey"
          },
          {
            "name": "agent",
            "type": "pubkey"
          },
          {
            "name": "owner",
            "type": "pubkey"
          },
          {
            "name": "new_price",
            "type": "u64"
          },
          {
            "name": "demand_multiplier",
            "type": "f64"
          },
          {
            "name": "supply_multiplier",
            "type": "f64"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "EmergencyAccessConfig",
      "type": {
        "fields": [
          {
            "name": "break_glass_enabled",
            "type": "bool"
          },
          {
            "name": "emergency_contacts",
            "type": {
              "vec": "pubkey"
            }
          },
          {
            "name": "approval_required",
            "type": "bool"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Emergency configuration for multisig"
      ],
      "name": "EmergencyConfig",
      "type": {
        "fields": [
          {
            "docs": [
              "Emergency contacts"
            ],
            "name": "emergency_contacts",
            "type": {
              "vec": "pubkey"
            }
          },
          {
            "docs": [
              "Emergency threshold override"
            ],
            "name": "emergency_threshold",
            "type": "u8"
          },
          {
            "docs": [
              "Emergency timeout (shorter than normal)"
            ],
            "name": "emergency_timeout",
            "type": "i64"
          },
          {
            "docs": [
              "Allowed emergency transaction types"
            ],
            "name": "emergency_transaction_types",
            "type": {
              "vec": {
                "defined": {
                  "name": "TransactionType"
                }
              }
            }
          },
          {
            "docs": [
              "Emergency freeze enabled"
            ],
            "name": "freeze_enabled",
            "type": "bool"
          },
          {
            "docs": [
              "Current freeze status"
            ],
            "name": "frozen",
            "type": "bool"
          },
          {
            "docs": [
              "Freeze timestamp"
            ],
            "name": "frozen_at",
            "type": {
              "option": "i64"
            }
          },
          {
            "docs": [
              "Auto-unfreeze after duration"
            ],
            "name": "auto_unfreeze_duration",
            "type": {
              "option": "i64"
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Enforcement levels for constraints"
      ],
      "name": "EnforcementLevel",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Hard"
          },
          {
            "name": "Soft"
          },
          {
            "name": "Advisory"
          },
          {
            "name": "ExceptionBased"
          }
        ]
      }
    },
    {
      "docs": [
        "Execution conditions for transactions"
      ],
      "name": "ExecutionCondition",
      "type": {
        "fields": [
          {
            "docs": [
              "Condition type"
            ],
            "name": "condition_type",
            "type": {
              "defined": {
                "name": "ConditionType"
              }
            }
          },
          {
            "docs": [
              "Target value/threshold"
            ],
            "name": "target_value",
            "type": "u64"
          },
          {
            "docs": [
              "Current value"
            ],
            "name": "current_value",
            "type": "u64"
          },
          {
            "docs": [
              "Condition met"
            ],
            "name": "met",
            "type": "bool"
          },
          {
            "docs": [
              "Condition description"
            ],
            "name": "description",
            "type": "string"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Execution parameters for proposals"
      ],
      "name": "ExecutionParams",
      "type": {
        "fields": [
          {
            "docs": [
              "Instructions to execute if passed"
            ],
            "name": "instructions",
            "type": {
              "vec": {
                "defined": {
                  "name": "ProposalInstruction"
                }
              }
            }
          },
          {
            "docs": [
              "Time delay before execution"
            ],
            "name": "execution_delay",
            "type": "i64"
          },
          {
            "docs": [
              "Execution conditions"
            ],
            "name": "execution_conditions",
            "type": {
              "vec": {
                "defined": {
                  "name": "ExecutionCondition"
                }
              }
            }
          },
          {
            "docs": [
              "Can be cancelled after approval"
            ],
            "name": "cancellable",
            "type": "bool"
          },
          {
            "docs": [
              "Automatic execution enabled"
            ],
            "name": "auto_execute",
            "type": "bool"
          },
          {
            "docs": [
              "Required execution authority"
            ],
            "name": "execution_authority",
            "type": "pubkey"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "Extension",
      "type": {
        "fields": [
          {
            "name": "extension",
            "type": "pubkey"
          },
          {
            "name": "developer",
            "type": "pubkey"
          },
          {
            "name": "extension_type",
            "type": {
              "defined": {
                "name": "ExtensionType"
              }
            }
          },
          {
            "name": "status",
            "type": {
              "defined": {
                "name": "ExtensionStatus"
              }
            }
          },
          {
            "name": "metadata",
            "type": {
              "defined": {
                "name": "ExtensionMetadata"
              }
            }
          },
          {
            "name": "code_hash",
            "type": "string"
          },
          {
            "name": "install_count",
            "type": "u32"
          },
          {
            "name": "rating",
            "type": "f64"
          },
          {
            "name": "revenue_share",
            "type": "f64"
          },
          {
            "name": "total_earnings",
            "type": "u64"
          },
          {
            "name": "created_at",
            "type": "i64"
          },
          {
            "name": "bump",
            "type": "u8"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "ExtensionApprovedEvent",
      "type": {
        "fields": [
          {
            "name": "extension",
            "type": "pubkey"
          },
          {
            "name": "developer",
            "type": "pubkey"
          },
          {
            "name": "authority",
            "type": "pubkey"
          },
          {
            "name": "timestamp",
            "type": "i64"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "ExtensionMetadata",
      "type": {
        "fields": [
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "description",
            "type": "string"
          },
          {
            "name": "version",
            "type": "string"
          },
          {
            "name": "author",
            "type": "string"
          },
          {
            "name": "repository",
            "type": "string"
          },
          {
            "name": "license",
            "type": "string"
          },
          {
            "name": "dependencies",
            "type": {
              "vec": "string"
            }
          },
          {
            "name": "extension_type",
            "type": {
              "defined": {
                "name": "ExtensionType"
              }
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "ExtensionRegisteredEvent",
      "type": {
        "fields": [
          {
            "name": "extension",
            "type": "pubkey"
          },
          {
            "name": "developer",
            "type": "pubkey"
          },
          {
            "name": "extension_type",
            "type": {
              "defined": {
                "name": "ExtensionType"
              }
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "ExtensionStatus",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Pending"
          },
          {
            "name": "Approved"
          },
          {
            "name": "Rejected"
          },
          {
            "name": "Active"
          },
          {
            "name": "Suspended"
          }
        ]
      }
    },
    {
      "name": "ExtensionType",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "PricingModel"
          },
          {
            "name": "AgentCapability"
          },
          {
            "name": "Integration"
          },
          {
            "name": "Analytics"
          },
          {
            "name": "Security"
          },
          {
            "name": "Custom"
          }
        ]
      }
    },
    {
      "docs": [
        "Geographic region definition"
      ],
      "name": "GeographicRegion",
      "type": {
        "fields": [
          {
            "docs": [
              "Region name"
            ],
            "name": "name",
            "type": "string"
          },
          {
            "docs": [
              "Latitude boundaries"
            ],
            "name": "latitude_range",
            "type": {
              "defined": {
                "name": "LatitudeRange"
              }
            }
          },
          {
            "docs": [
              "Longitude boundaries"
            ],
            "name": "longitude_range",
            "type": {
              "defined": {
                "name": "LongitudeRange"
              }
            }
          },
          {
            "docs": [
              "Radius for circular regions (meters)"
            ],
            "name": "radius",
            "type": {
              "option": "u32"
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Governance proposal for protocol changes"
      ],
      "name": "GovernanceProposal",
      "type": {
        "fields": [
          {
            "docs": [
              "Proposal ID"
            ],
            "name": "proposal_id",
            "type": "u64"
          },
          {
            "docs": [
              "Proposer"
            ],
            "name": "proposer",
            "type": "pubkey"
          },
          {
            "docs": [
              "Proposal title"
            ],
            "name": "title",
            "type": "string"
          },
          {
            "docs": [
              "Proposal description"
            ],
            "name": "description",
            "type": "string"
          },
          {
            "docs": [
              "Proposal type"
            ],
            "name": "proposal_type",
            "type": {
              "defined": {
                "name": "ProposalType"
              }
            }
          },
          {
            "docs": [
              "Creation timestamp"
            ],
            "name": "created_at",
            "type": "i64"
          },
          {
            "docs": [
              "Voting start timestamp"
            ],
            "name": "voting_starts_at",
            "type": "i64"
          },
          {
            "docs": [
              "Voting end timestamp"
            ],
            "name": "voting_ends_at",
            "type": "i64"
          },
          {
            "docs": [
              "Execution timestamp (if approved)"
            ],
            "name": "execution_timestamp",
            "type": {
              "option": "i64"
            }
          },
          {
            "docs": [
              "Proposal status"
            ],
            "name": "status",
            "type": {
              "defined": {
                "name": "ProposalStatus"
              }
            }
          },
          {
            "docs": [
              "Voting results"
            ],
            "name": "voting_results",
            "type": {
              "defined": {
                "name": "VotingResults"
              }
            }
          },
          {
            "docs": [
              "Execution parameters"
            ],
            "name": "execution_params",
            "type": {
              "defined": {
                "name": "ExecutionParams"
              }
            }
          },
          {
            "docs": [
              "Quorum requirements"
            ],
            "name": "quorum_requirements",
            "type": {
              "defined": {
                "name": "QuorumRequirements"
              }
            }
          },
          {
            "docs": [
              "Proposal metadata"
            ],
            "name": "metadata",
            "type": {
              "defined": {
                "name": "ProposalMetadata"
              }
            }
          },
          {
            "docs": [
              "Reserved space"
            ],
            "name": "reserved",
            "type": {
              "array": [
                "u8",
                64
              ]
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "GovernanceProposalCreatedEvent",
      "type": {
        "fields": [
          {
            "name": "proposal",
            "type": "pubkey"
          },
          {
            "name": "proposal_id",
            "type": "u64"
          },
          {
            "name": "proposer",
            "type": "pubkey"
          },
          {
            "name": "title",
            "type": "string"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Hierarchical boundary definition"
      ],
      "name": "HierarchicalBoundary",
      "type": {
        "fields": [
          {
            "docs": [
              "Boundary level"
            ],
            "name": "level",
            "type": "string"
          },
          {
            "docs": [
              "Boundary value"
            ],
            "name": "value",
            "type": "string"
          },
          {
            "docs": [
              "Include descendants"
            ],
            "name": "include_descendants",
            "type": "bool"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "IncentiveConfig",
      "type": {
        "fields": [
          {
            "name": "referral_bonus",
            "type": "f64"
          },
          {
            "name": "performance_bonus",
            "type": "f64"
          },
          {
            "name": "loyalty_multiplier",
            "type": "f64"
          },
          {
            "name": "early_bird_discount",
            "type": "f64"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "IncentiveDistributedEvent",
      "type": {
        "fields": [
          {
            "name": "program",
            "type": "pubkey"
          },
          {
            "name": "agent",
            "type": "pubkey"
          },
          {
            "name": "incentive_type",
            "type": "string"
          },
          {
            "name": "amount",
            "type": "u64"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "IncentiveProgram",
      "type": {
        "fields": [
          {
            "name": "owner",
            "type": "pubkey"
          },
          {
            "name": "config",
            "type": {
              "defined": {
                "name": "IncentiveConfig"
              }
            }
          },
          {
            "name": "total_rewards_distributed",
            "type": "u64"
          },
          {
            "name": "is_active",
            "type": "bool"
          },
          {
            "name": "created_at",
            "type": "i64"
          },
          {
            "name": "updated_at",
            "type": "i64"
          },
          {
            "name": "bump",
            "type": "u8"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "IncentiveProgramCreatedEvent",
      "type": {
        "fields": [
          {
            "name": "program",
            "type": "pubkey"
          },
          {
            "name": "referral_bonus",
            "type": "f64"
          },
          {
            "name": "performance_bonus",
            "type": "f64"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "IncidentResponsePolicies",
      "type": {
        "fields": [
          {
            "name": "response_team",
            "type": {
              "vec": "pubkey"
            }
          },
          {
            "name": "escalation_procedures",
            "type": {
              "vec": "string"
            }
          },
          {
            "name": "notification_requirements",
            "type": {
              "vec": {
                "defined": {
                  "name": "NotificationRequirement"
                }
              }
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "JobApplication",
      "type": {
        "fields": [
          {
            "name": "job_posting",
            "type": "pubkey"
          },
          {
            "name": "agent",
            "type": "pubkey"
          },
          {
            "name": "agent_owner",
            "type": "pubkey"
          },
          {
            "name": "cover_letter",
            "type": "string"
          },
          {
            "name": "proposed_rate",
            "type": "u64"
          },
          {
            "name": "estimated_delivery",
            "type": "i64"
          },
          {
            "name": "portfolio_items",
            "type": {
              "vec": "string"
            }
          },
          {
            "name": "status",
            "type": {
              "defined": {
                "name": "ApplicationStatus"
              }
            }
          },
          {
            "name": "applied_at",
            "type": "i64"
          },
          {
            "name": "bump",
            "type": "u8"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "JobApplicationAcceptedEvent",
      "type": {
        "fields": [
          {
            "name": "application",
            "type": "pubkey"
          },
          {
            "name": "job_posting",
            "type": "pubkey"
          },
          {
            "name": "agent",
            "type": "pubkey"
          },
          {
            "name": "employer",
            "type": "pubkey"
          },
          {
            "name": "timestamp",
            "type": "i64"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "JobApplicationData",
      "type": {
        "fields": [
          {
            "name": "cover_letter",
            "type": "string"
          },
          {
            "name": "proposed_price",
            "type": "u64"
          },
          {
            "name": "estimated_duration",
            "type": "u32"
          },
          {
            "name": "proposed_rate",
            "type": "u64"
          },
          {
            "name": "estimated_delivery",
            "type": "i64"
          },
          {
            "name": "portfolio_items",
            "type": {
              "vec": "string"
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "JobApplicationSubmittedEvent",
      "type": {
        "fields": [
          {
            "name": "application",
            "type": "pubkey"
          },
          {
            "name": "job_posting",
            "type": "pubkey"
          },
          {
            "name": "agent",
            "type": "pubkey"
          },
          {
            "name": "proposed_rate",
            "type": "u64"
          },
          {
            "name": "timestamp",
            "type": "i64"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "JobContract",
      "type": {
        "fields": [
          {
            "name": "job_posting",
            "type": "pubkey"
          },
          {
            "name": "application",
            "type": "pubkey"
          },
          {
            "name": "employer",
            "type": "pubkey"
          },
          {
            "name": "agent",
            "type": "pubkey"
          },
          {
            "name": "agreed_rate",
            "type": "u64"
          },
          {
            "name": "deadline",
            "type": "i64"
          },
          {
            "name": "payment_token",
            "type": "pubkey"
          },
          {
            "name": "status",
            "type": {
              "defined": {
                "name": "ContractStatus"
              }
            }
          },
          {
            "name": "created_at",
            "type": "i64"
          },
          {
            "name": "updated_at",
            "type": "i64"
          },
          {
            "name": "bump",
            "type": "u8"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "JobPosting",
      "type": {
        "fields": [
          {
            "name": "employer",
            "type": "pubkey"
          },
          {
            "name": "title",
            "type": "string"
          },
          {
            "name": "description",
            "type": "string"
          },
          {
            "name": "requirements",
            "type": {
              "vec": "string"
            }
          },
          {
            "name": "budget",
            "type": "u64"
          },
          {
            "name": "deadline",
            "type": "i64"
          },
          {
            "name": "skills_needed",
            "type": {
              "vec": "string"
            }
          },
          {
            "name": "budget_min",
            "type": "u64"
          },
          {
            "name": "budget_max",
            "type": "u64"
          },
          {
            "name": "payment_token",
            "type": "pubkey"
          },
          {
            "name": "job_type",
            "type": "string"
          },
          {
            "name": "experience_level",
            "type": "string"
          },
          {
            "name": "is_active",
            "type": "bool"
          },
          {
            "name": "applications_count",
            "type": "u32"
          },
          {
            "name": "created_at",
            "type": "i64"
          },
          {
            "name": "updated_at",
            "type": "i64"
          },
          {
            "name": "bump",
            "type": "u8"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "JobPostingCreatedEvent",
      "type": {
        "fields": [
          {
            "name": "job",
            "type": "pubkey"
          },
          {
            "name": "creator",
            "type": "pubkey"
          },
          {
            "name": "timestamp",
            "type": "i64"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "JobPostingData",
      "type": {
        "fields": [
          {
            "name": "title",
            "type": "string"
          },
          {
            "name": "description",
            "type": "string"
          },
          {
            "name": "requirements",
            "type": {
              "vec": "string"
            }
          },
          {
            "name": "budget",
            "type": "u64"
          },
          {
            "name": "deadline",
            "type": "i64"
          },
          {
            "name": "skills_needed",
            "type": {
              "vec": "string"
            }
          },
          {
            "name": "budget_min",
            "type": "u64"
          },
          {
            "name": "budget_max",
            "type": "u64"
          },
          {
            "name": "payment_token",
            "type": "pubkey"
          },
          {
            "name": "job_type",
            "type": "string"
          },
          {
            "name": "experience_level",
            "type": "string"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Latitude range for geographic constraints"
      ],
      "name": "LatitudeRange",
      "type": {
        "fields": [
          {
            "docs": [
              "Minimum latitude"
            ],
            "name": "min",
            "type": "f64"
          },
          {
            "docs": [
              "Maximum latitude"
            ],
            "name": "max",
            "type": "f64"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Location-based access constraints"
      ],
      "name": "LocationConstraints",
      "type": {
        "fields": [
          {
            "docs": [
              "Allowed countries (ISO codes)"
            ],
            "name": "allowed_countries",
            "type": {
              "vec": "string"
            }
          },
          {
            "docs": [
              "Blocked countries (ISO codes)"
            ],
            "name": "blocked_countries",
            "type": {
              "vec": "string"
            }
          },
          {
            "docs": [
              "Allowed IP address ranges (CIDR)"
            ],
            "name": "allowed_ip_ranges",
            "type": {
              "vec": "string"
            }
          },
          {
            "docs": [
              "Blocked IP address ranges (CIDR)"
            ],
            "name": "blocked_ip_ranges",
            "type": {
              "vec": "string"
            }
          },
          {
            "docs": [
              "Geofencing enabled"
            ],
            "name": "geofencing_enabled",
            "type": "bool"
          },
          {
            "docs": [
              "Allowed geographic regions"
            ],
            "name": "allowed_regions",
            "type": {
              "vec": {
                "defined": {
                  "name": "GeographicRegion"
                }
              }
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Longitude range for geographic constraints"
      ],
      "name": "LongitudeRange",
      "type": {
        "fields": [
          {
            "docs": [
              "Minimum longitude"
            ],
            "name": "min",
            "type": "f64"
          },
          {
            "docs": [
              "Maximum longitude"
            ],
            "name": "max",
            "type": "f64"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "MarketAnalytics",
      "type": {
        "fields": [
          {
            "name": "period_start",
            "type": "i64"
          },
          {
            "name": "period_end",
            "type": "i64"
          },
          {
            "name": "total_volume",
            "type": "u64"
          },
          {
            "name": "total_transactions",
            "type": "u64"
          },
          {
            "name": "average_price",
            "type": "u64"
          },
          {
            "name": "active_agents",
            "type": "u32"
          },
          {
            "name": "price_volatility",
            "type": "u32"
          },
          {
            "name": "demand_trend",
            "type": "i32"
          },
          {
            "name": "supply_trend",
            "type": "i32"
          },
          {
            "name": "market_cap",
            "type": "u64"
          },
          {
            "name": "top_agents",
            "type": {
              "vec": "pubkey"
            }
          },
          {
            "name": "bump",
            "type": "u8"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "MarketAnalyticsCreatedEvent",
      "type": {
        "fields": [
          {
            "name": "market_analytics",
            "type": "pubkey"
          },
          {
            "name": "period_start",
            "type": "i64"
          },
          {
            "name": "period_end",
            "type": "i64"
          },
          {
            "name": "timestamp",
            "type": "i64"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "MarketAnalyticsUpdatedEvent",
      "type": {
        "fields": [
          {
            "name": "market_analytics",
            "type": "pubkey"
          },
          {
            "name": "volume",
            "type": "u64"
          },
          {
            "name": "price",
            "type": "u64"
          },
          {
            "name": "timestamp",
            "type": "i64"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "Message",
      "type": {
        "fields": [
          {
            "name": "channel",
            "type": "pubkey"
          },
          {
            "name": "sender",
            "type": "pubkey"
          },
          {
            "name": "content",
            "type": "string"
          },
          {
            "name": "message_type",
            "type": {
              "defined": {
                "name": "MessageType"
              }
            }
          },
          {
            "name": "timestamp",
            "type": "i64"
          },
          {
            "name": "is_encrypted",
            "type": "bool"
          },
          {
            "name": "bump",
            "type": "u8"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "MessageData",
      "type": {
        "fields": [
          {
            "name": "content",
            "type": "string"
          },
          {
            "name": "message_type",
            "type": {
              "defined": {
                "name": "MessageType"
              }
            }
          },
          {
            "name": "is_encrypted",
            "type": "bool"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "MessageSentEvent",
      "type": {
        "fields": [
          {
            "name": "message",
            "type": "pubkey"
          },
          {
            "name": "channel",
            "type": "pubkey"
          },
          {
            "name": "sender",
            "type": "pubkey"
          },
          {
            "name": "message_type",
            "type": {
              "defined": {
                "name": "MessageType"
              }
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "MessageType",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Text"
          },
          {
            "name": "File"
          },
          {
            "name": "Image"
          },
          {
            "name": "Audio"
          },
          {
            "name": "System"
          }
        ]
      }
    },
    {
      "docs": [
        "Multi-signature wallet for governance operations"
      ],
      "name": "Multisig",
      "type": {
        "fields": [
          {
            "docs": [
              "Unique identifier"
            ],
            "name": "multisig_id",
            "type": "u64"
          },
          {
            "docs": [
              "Required number of signatures"
            ],
            "name": "threshold",
            "type": "u8"
          },
          {
            "docs": [
              "List of authorized signers"
            ],
            "name": "signers",
            "type": {
              "vec": "pubkey"
            }
          },
          {
            "docs": [
              "Multisig owner (can modify signers)"
            ],
            "name": "owner",
            "type": "pubkey"
          },
          {
            "docs": [
              "Creation timestamp"
            ],
            "name": "created_at",
            "type": "i64"
          },
          {
            "docs": [
              "Last update timestamp"
            ],
            "name": "updated_at",
            "type": "i64"
          },
          {
            "docs": [
              "Current nonce (prevents replay attacks)"
            ],
            "name": "nonce",
            "type": "u64"
          },
          {
            "docs": [
              "Pending transactions"
            ],
            "name": "pending_transactions",
            "type": {
              "vec": {
                "defined": {
                  "name": "PendingTransaction"
                }
              }
            }
          },
          {
            "docs": [
              "Configuration settings"
            ],
            "name": "config",
            "type": {
              "defined": {
                "name": "MultisigConfig"
              }
            }
          },
          {
            "docs": [
              "Emergency settings"
            ],
            "name": "emergency_config",
            "type": {
              "defined": {
                "name": "EmergencyConfig"
              }
            }
          },
          {
            "docs": [
              "Reserved space for future extensions"
            ],
            "name": "reserved",
            "type": {
              "array": [
                "u8",
                128
              ]
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "MultisigCreatedEvent",
      "type": {
        "fields": [
          {
            "name": "multisig",
            "type": "pubkey"
          },
          {
            "name": "multisig_id",
            "type": "u64"
          },
          {
            "name": "owner",
            "type": "pubkey"
          },
          {
            "name": "threshold",
            "type": "u8"
          },
          {
            "name": "signers_count",
            "type": "u8"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Individual signature in multisig"
      ],
      "name": "MultisigSignature",
      "type": {
        "fields": [
          {
            "docs": [
              "Signer public key"
            ],
            "name": "signer",
            "type": "pubkey"
          },
          {
            "docs": [
              "Signature data"
            ],
            "name": "signature",
            "type": {
              "array": [
                "u8",
                64
              ]
            }
          },
          {
            "docs": [
              "Signature timestamp"
            ],
            "name": "signed_at",
            "type": "i64"
          },
          {
            "docs": [
              "Signature method/algorithm"
            ],
            "name": "signature_method",
            "type": "string"
          },
          {
            "docs": [
              "Additional verification data"
            ],
            "name": "verification_data",
            "type": {
              "option": "bytes"
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "NegotiationChatbot",
      "type": {
        "fields": [
          {
            "name": "initiator",
            "type": "pubkey"
          },
          {
            "name": "counterparty",
            "type": "pubkey"
          },
          {
            "name": "initial_offer",
            "type": "u64"
          },
          {
            "name": "current_offer",
            "type": "u64"
          },
          {
            "name": "status",
            "type": {
              "defined": {
                "name": "NegotiationStatus"
              }
            }
          },
          {
            "name": "negotiation_deadline",
            "type": "i64"
          },
          {
            "name": "terms",
            "type": {
              "vec": "string"
            }
          },
          {
            "name": "counter_offers",
            "type": {
              "vec": "u64"
            }
          },
          {
            "name": "auto_accept_threshold",
            "type": "u64"
          },
          {
            "name": "created_at",
            "type": "i64"
          },
          {
            "name": "last_activity",
            "type": "i64"
          },
          {
            "name": "bump",
            "type": "u8"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "NegotiationInitiatedEvent",
      "type": {
        "fields": [
          {
            "name": "negotiation",
            "type": "pubkey"
          },
          {
            "name": "initiator",
            "type": "pubkey"
          },
          {
            "name": "counterparty",
            "type": "pubkey"
          },
          {
            "name": "initial_offer",
            "type": "u64"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "NegotiationStatus",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "InitialOffer"
          },
          {
            "name": "CounterOffer"
          },
          {
            "name": "Accepted"
          },
          {
            "name": "Rejected"
          },
          {
            "name": "Expired"
          },
          {
            "name": "AutoAccepted"
          }
        ]
      }
    },
    {
      "name": "NetworkSecurityPolicies",
      "type": {
        "fields": [
          {
            "name": "firewall_required",
            "type": "bool"
          },
          {
            "name": "intrusion_detection",
            "type": "bool"
          },
          {
            "name": "traffic_monitoring",
            "type": "bool"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Notification methods"
      ],
      "name": "NotificationMethod",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "OnChain"
          },
          {
            "name": "Email"
          },
          {
            "name": "Sms"
          },
          {
            "name": "Push"
          },
          {
            "name": "InApp"
          },
          {
            "name": "All"
          }
        ]
      }
    },
    {
      "docs": [
        "Notification priorities"
      ],
      "name": "NotificationPriority",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Low"
          },
          {
            "name": "Medium"
          },
          {
            "name": "High"
          },
          {
            "name": "Critical"
          },
          {
            "name": "Emergency"
          }
        ]
      }
    },
    {
      "docs": [
        "Notification requirements for security events"
      ],
      "name": "NotificationRequirement",
      "type": {
        "fields": [
          {
            "docs": [
              "Event type"
            ],
            "name": "event_type",
            "type": {
              "defined": {
                "name": "SecurityEventType"
              }
            }
          },
          {
            "docs": [
              "Notification targets"
            ],
            "name": "targets",
            "type": {
              "vec": {
                "defined": {
                  "name": "NotificationTarget"
                }
              }
            }
          },
          {
            "docs": [
              "Notification method"
            ],
            "name": "method",
            "type": {
              "defined": {
                "name": "NotificationMethod"
              }
            }
          },
          {
            "docs": [
              "Notification timing"
            ],
            "name": "timing",
            "type": {
              "defined": {
                "name": "NotificationTiming"
              }
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Notification targets"
      ],
      "name": "NotificationTarget",
      "type": {
        "fields": [
          {
            "docs": [
              "Target type"
            ],
            "name": "target_type",
            "type": {
              "defined": {
                "name": "NotificationTargetType"
              }
            }
          },
          {
            "docs": [
              "Target identifier"
            ],
            "name": "target_id",
            "type": "string"
          },
          {
            "docs": [
              "Notification priority"
            ],
            "name": "priority",
            "type": {
              "defined": {
                "name": "NotificationPriority"
              }
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Types of notification targets"
      ],
      "name": "NotificationTargetType",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "User"
          },
          {
            "name": "Administrator"
          },
          {
            "name": "SecurityTeam"
          },
          {
            "name": "ComplianceTeam"
          },
          {
            "name": "Manager"
          },
          {
            "name": "AuditTeam"
          },
          {
            "name": "ExternalSystem"
          }
        ]
      }
    },
    {
      "docs": [
        "Notification timing"
      ],
      "name": "NotificationTiming",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Immediate"
          },
          {
            "name": "Delayed"
          },
          {
            "name": "Batched"
          },
          {
            "name": "Scheduled"
          }
        ]
      }
    },
    {
      "name": "PasswordPolicies",
      "type": {
        "fields": [
          {
            "name": "minimum_length",
            "type": "u8"
          },
          {
            "name": "complexity_requirements",
            "type": {
              "vec": "string"
            }
          },
          {
            "name": "history_count",
            "type": "u8"
          },
          {
            "name": "max_age",
            "type": "i64"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "Payment",
      "type": {
        "fields": [
          {
            "name": "work_order",
            "type": "pubkey"
          },
          {
            "name": "payer",
            "type": "pubkey"
          },
          {
            "name": "recipient",
            "type": "pubkey"
          },
          {
            "name": "amount",
            "type": "u64"
          },
          {
            "name": "token_mint",
            "type": "pubkey"
          },
          {
            "name": "is_confidential",
            "type": "bool"
          },
          {
            "name": "paid_at",
            "type": "i64"
          },
          {
            "name": "transfer_hook",
            "type": {
              "option": "pubkey"
            }
          },
          {
            "name": "transfer_fee_applied",
            "type": "bool"
          },
          {
            "name": "bump",
            "type": "u8"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "PaymentProcessedEvent",
      "type": {
        "fields": [
          {
            "name": "work_order",
            "type": "pubkey"
          },
          {
            "name": "from",
            "type": "pubkey"
          },
          {
            "name": "to",
            "type": "pubkey"
          },
          {
            "name": "amount",
            "type": "u64"
          },
          {
            "name": "timestamp",
            "type": "i64"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Pending transaction in multisig queue"
      ],
      "name": "PendingTransaction",
      "type": {
        "fields": [
          {
            "docs": [
              "Transaction ID"
            ],
            "name": "transaction_id",
            "type": "u64"
          },
          {
            "docs": [
              "Transaction type"
            ],
            "name": "transaction_type",
            "type": {
              "defined": {
                "name": "TransactionType"
              }
            }
          },
          {
            "docs": [
              "Target program/account"
            ],
            "name": "target",
            "type": "pubkey"
          },
          {
            "docs": [
              "Transaction data"
            ],
            "name": "data",
            "type": "bytes"
          },
          {
            "docs": [
              "Required signatures"
            ],
            "name": "required_signatures",
            "type": "u8"
          },
          {
            "docs": [
              "Current signatures"
            ],
            "name": "signatures",
            "type": {
              "vec": {
                "defined": {
                  "name": "MultisigSignature"
                }
              }
            }
          },
          {
            "docs": [
              "Creation timestamp"
            ],
            "name": "created_at",
            "type": "i64"
          },
          {
            "docs": [
              "Expiration timestamp"
            ],
            "name": "expires_at",
            "type": "i64"
          },
          {
            "docs": [
              "Transaction priority"
            ],
            "name": "priority",
            "type": {
              "defined": {
                "name": "TransactionPriority"
              }
            }
          },
          {
            "docs": [
              "Execution conditions"
            ],
            "name": "execution_conditions",
            "type": {
              "vec": {
                "defined": {
                  "name": "ExecutionCondition"
                }
              }
            }
          },
          {
            "docs": [
              "Transaction status"
            ],
            "name": "status",
            "type": {
              "defined": {
                "name": "TransactionStatus"
              }
            }
          },
          {
            "docs": [
              "Time lock (if applicable)"
            ],
            "name": "time_lock",
            "type": {
              "option": {
                "defined": {
                  "name": "TimeLock"
                }
              }
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Permission definition"
      ],
      "name": "Permission",
      "type": {
        "fields": [
          {
            "docs": [
              "Permission identifier"
            ],
            "name": "permission_id",
            "type": "string"
          },
          {
            "docs": [
              "Permission name"
            ],
            "name": "name",
            "type": "string"
          },
          {
            "docs": [
              "Permission description"
            ],
            "name": "description",
            "type": "string"
          },
          {
            "docs": [
              "Resource type this permission applies to"
            ],
            "name": "resource_type",
            "type": "string"
          },
          {
            "docs": [
              "Actions allowed by this permission"
            ],
            "name": "actions",
            "type": {
              "vec": {
                "defined": {
                  "name": "Action"
                }
              }
            }
          },
          {
            "docs": [
              "Permission scope"
            ],
            "name": "scope",
            "type": {
              "defined": {
                "name": "PermissionScope"
              }
            }
          },
          {
            "docs": [
              "Permission constraints"
            ],
            "name": "constraints",
            "type": {
              "vec": {
                "defined": {
                  "name": "PermissionConstraint"
                }
              }
            }
          },
          {
            "docs": [
              "Permission metadata"
            ],
            "name": "metadata",
            "type": {
              "defined": {
                "name": "PermissionMetadata"
              }
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Permission constraint"
      ],
      "name": "PermissionConstraint",
      "type": {
        "fields": [
          {
            "docs": [
              "Constraint type"
            ],
            "name": "constraint_type",
            "type": {
              "defined": {
                "name": "PermissionConstraintType"
              }
            }
          },
          {
            "docs": [
              "Constraint conditions"
            ],
            "name": "conditions",
            "type": {
              "vec": {
                "defined": {
                  "name": "ConstraintCondition"
                }
              }
            }
          },
          {
            "docs": [
              "Constraint enforcement"
            ],
            "name": "enforcement",
            "type": {
              "defined": {
                "name": "EnforcementLevel"
              }
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Types of permission constraints"
      ],
      "name": "PermissionConstraintType",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Temporal"
          },
          {
            "name": "Contextual"
          },
          {
            "name": "Conditional"
          },
          {
            "name": "ResourceBased"
          },
          {
            "name": "AttributeBased"
          },
          {
            "name": "RiskBased"
          }
        ]
      }
    },
    {
      "docs": [
        "Permission metadata"
      ],
      "name": "PermissionMetadata",
      "type": {
        "fields": [
          {
            "docs": [
              "Business justification"
            ],
            "name": "business_justification",
            "type": "string"
          },
          {
            "docs": [
              "Risk assessment"
            ],
            "name": "risk_assessment",
            "type": {
              "defined": {
                "name": "RiskAssessment"
              }
            }
          },
          {
            "docs": [
              "Compliance mapping"
            ],
            "name": "compliance_mapping",
            "type": {
              "vec": "string"
            }
          },
          {
            "docs": [
              "Related permissions"
            ],
            "name": "related_permissions",
            "type": {
              "vec": "string"
            }
          },
          {
            "docs": [
              "Permission owner"
            ],
            "name": "owner",
            "type": {
              "option": "pubkey"
            }
          },
          {
            "docs": [
              "Last review"
            ],
            "name": "last_review",
            "type": {
              "option": "i64"
            }
          },
          {
            "docs": [
              "Review frequency"
            ],
            "name": "review_frequency",
            "type": "i64"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Permission scope definition"
      ],
      "name": "PermissionScope",
      "type": {
        "fields": [
          {
            "docs": [
              "Scope type"
            ],
            "name": "scope_type",
            "type": {
              "defined": {
                "name": "ScopeType"
              }
            }
          },
          {
            "docs": [
              "Scope boundaries"
            ],
            "name": "boundaries",
            "type": {
              "defined": {
                "name": "ScopeBoundaries"
              }
            }
          },
          {
            "docs": [
              "Hierarchical scope"
            ],
            "name": "hierarchical",
            "type": "bool"
          },
          {
            "docs": [
              "Inherited permissions"
            ],
            "name": "inherited",
            "type": "bool"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Policy metadata"
      ],
      "name": "PolicyMetadata",
      "type": {
        "fields": [
          {
            "docs": [
              "Policy author"
            ],
            "name": "author",
            "type": {
              "option": "pubkey"
            }
          },
          {
            "docs": [
              "Policy approver"
            ],
            "name": "approver",
            "type": {
              "option": "pubkey"
            }
          },
          {
            "docs": [
              "Approval date"
            ],
            "name": "approval_date",
            "type": {
              "option": "i64"
            }
          },
          {
            "docs": [
              "Business justification"
            ],
            "name": "business_justification",
            "type": "string"
          },
          {
            "docs": [
              "Compliance references"
            ],
            "name": "compliance_references",
            "type": {
              "vec": "string"
            }
          },
          {
            "docs": [
              "Risk assessment"
            ],
            "name": "risk_assessment",
            "type": {
              "option": "string"
            }
          },
          {
            "docs": [
              "Review schedule"
            ],
            "name": "review_schedule",
            "type": {
              "defined": {
                "name": "ReviewSchedule"
              }
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Policy rule definition"
      ],
      "name": "PolicyRule",
      "type": {
        "fields": [
          {
            "docs": [
              "Rule identifier"
            ],
            "name": "rule_id",
            "type": "string"
          },
          {
            "docs": [
              "Rule conditions"
            ],
            "name": "conditions",
            "type": {
              "vec": {
                "defined": {
                  "name": "RuleCondition"
                }
              }
            }
          },
          {
            "docs": [
              "Rule effect"
            ],
            "name": "effect",
            "type": {
              "defined": {
                "name": "RuleEffect"
              }
            }
          },
          {
            "docs": [
              "Rule priority"
            ],
            "name": "priority",
            "type": "u8"
          },
          {
            "docs": [
              "Rule enabled"
            ],
            "name": "enabled",
            "type": "bool"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Policy scope"
      ],
      "name": "PolicyScope",
      "type": {
        "fields": [
          {
            "docs": [
              "Applicable subjects"
            ],
            "name": "subjects",
            "type": {
              "vec": "string"
            }
          },
          {
            "docs": [
              "Applicable resources"
            ],
            "name": "resources",
            "type": {
              "vec": "string"
            }
          },
          {
            "docs": [
              "Applicable actions"
            ],
            "name": "actions",
            "type": {
              "vec": "string"
            }
          },
          {
            "docs": [
              "Scope inheritance"
            ],
            "name": "inheritance",
            "type": {
              "defined": {
                "name": "ScopeInheritance"
              }
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Policy status"
      ],
      "name": "PolicyStatus",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Active"
          },
          {
            "name": "Inactive"
          },
          {
            "name": "Draft"
          },
          {
            "name": "UnderReview"
          },
          {
            "name": "Deprecated"
          },
          {
            "name": "Suspended"
          }
        ]
      }
    },
    {
      "docs": [
        "Types of access policies"
      ],
      "name": "PolicyType",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Allow"
          },
          {
            "name": "Deny"
          },
          {
            "name": "Conditional"
          },
          {
            "name": "Delegated"
          },
          {
            "name": "Temporary"
          },
          {
            "name": "Emergency"
          }
        ]
      }
    },
    {
      "name": "PricingAlgorithm",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Linear"
          },
          {
            "name": "Exponential"
          },
          {
            "name": "Logarithmic"
          },
          {
            "name": "Sigmoid"
          },
          {
            "name": "MarketBased"
          },
          {
            "name": "MLOptimized"
          },
          {
            "name": "DemandBased"
          },
          {
            "name": "ReputationBased"
          },
          {
            "name": "SurgePricing"
          },
          {
            "name": "MarketAverage"
          },
          {
            "name": "PerformanceBased"
          },
          {
            "name": "Seasonal"
          }
        ]
      }
    },
    {
      "name": "PricingModel",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Fixed"
          },
          {
            "name": "Hourly"
          },
          {
            "name": "PerTask"
          },
          {
            "name": "Subscription"
          },
          {
            "name": "Auction"
          },
          {
            "name": "Dynamic"
          },
          {
            "name": "RevenueShare"
          },
          {
            "name": "Tiered"
          }
        ]
      }
    },
    {
      "docs": [
        "Account specification for proposal instruction"
      ],
      "name": "ProposalAccount",
      "type": {
        "fields": [
          {
            "docs": [
              "Account public key"
            ],
            "name": "pubkey",
            "type": "pubkey"
          },
          {
            "docs": [
              "Is signer required"
            ],
            "name": "is_signer",
            "type": "bool"
          },
          {
            "docs": [
              "Is writable"
            ],
            "name": "is_writable",
            "type": "bool"
          },
          {
            "docs": [
              "Account description"
            ],
            "name": "description",
            "type": "string"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Individual instruction in proposal"
      ],
      "name": "ProposalInstruction",
      "type": {
        "fields": [
          {
            "docs": [
              "Target program"
            ],
            "name": "program_id",
            "type": "pubkey"
          },
          {
            "docs": [
              "Accounts required"
            ],
            "name": "accounts",
            "type": {
              "vec": {
                "defined": {
                  "name": "ProposalAccount"
                }
              }
            }
          },
          {
            "docs": [
              "Instruction data"
            ],
            "name": "data",
            "type": "bytes"
          },
          {
            "docs": [
              "Instruction description"
            ],
            "name": "description",
            "type": "string"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Proposal metadata"
      ],
      "name": "ProposalMetadata",
      "type": {
        "fields": [
          {
            "docs": [
              "IPFS hash for detailed proposal"
            ],
            "name": "ipfs_hash",
            "type": {
              "option": "string"
            }
          },
          {
            "docs": [
              "External references"
            ],
            "name": "external_references",
            "type": {
              "vec": "string"
            }
          },
          {
            "docs": [
              "Proposal tags"
            ],
            "name": "tags",
            "type": {
              "vec": "string"
            }
          },
          {
            "docs": [
              "Risk assessment"
            ],
            "name": "risk_assessment",
            "type": {
              "option": "string"
            }
          },
          {
            "docs": [
              "Impact analysis"
            ],
            "name": "impact_analysis",
            "type": {
              "option": "string"
            }
          },
          {
            "docs": [
              "Implementation timeline"
            ],
            "name": "implementation_timeline",
            "type": {
              "option": "string"
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Proposal execution status"
      ],
      "name": "ProposalStatus",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Draft"
          },
          {
            "name": "Active"
          },
          {
            "name": "Passed"
          },
          {
            "name": "Failed"
          },
          {
            "name": "Executed"
          },
          {
            "name": "Cancelled"
          },
          {
            "name": "Expired"
          }
        ]
      }
    },
    {
      "docs": [
        "Types of governance proposals"
      ],
      "name": "ProposalType",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "ParameterUpdate"
          },
          {
            "name": "ProtocolUpgrade"
          },
          {
            "name": "TreasuryOperation"
          },
          {
            "name": "FeeUpdate"
          },
          {
            "name": "SecurityUpdate"
          },
          {
            "name": "GovernanceUpdate"
          },
          {
            "name": "EmergencyAction"
          },
          {
            "name": "Custom"
          }
        ]
      }
    },
    {
      "name": "PurchaseStatus",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Pending"
          },
          {
            "name": "Confirmed"
          },
          {
            "name": "Completed"
          },
          {
            "name": "Cancelled"
          },
          {
            "name": "Paid"
          }
        ]
      }
    },
    {
      "docs": [
        "Methods for calculating quorum"
      ],
      "name": "QuorumMethod",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Absolute"
          },
          {
            "name": "Relative"
          },
          {
            "name": "Weighted"
          },
          {
            "name": "Dynamic"
          }
        ]
      }
    },
    {
      "docs": [
        "Quorum requirements for proposals"
      ],
      "name": "QuorumRequirements",
      "type": {
        "fields": [
          {
            "docs": [
              "Minimum participation rate (0-100)"
            ],
            "name": "minimum_participation",
            "type": "u8"
          },
          {
            "docs": [
              "Approval threshold (0-100)"
            ],
            "name": "approval_threshold",
            "type": "u8"
          },
          {
            "docs": [
              "Super majority required"
            ],
            "name": "super_majority_required",
            "type": "bool"
          },
          {
            "docs": [
              "Minimum total voting power"
            ],
            "name": "minimum_voting_power",
            "type": "u64"
          },
          {
            "docs": [
              "Quorum calculation method"
            ],
            "name": "quorum_method",
            "type": {
              "defined": {
                "name": "QuorumMethod"
              }
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Role-Based Access Control (RBAC) configuration"
      ],
      "name": "RbacConfig",
      "type": {
        "fields": [
          {
            "docs": [
              "Authority for RBAC management"
            ],
            "name": "authority",
            "type": "pubkey"
          },
          {
            "docs": [
              "Creation timestamp"
            ],
            "name": "created_at",
            "type": "i64"
          },
          {
            "docs": [
              "Last update timestamp"
            ],
            "name": "updated_at",
            "type": "i64"
          },
          {
            "docs": [
              "Version for compatibility"
            ],
            "name": "version",
            "type": "u8"
          },
          {
            "docs": [
              "Role definitions"
            ],
            "name": "roles",
            "type": {
              "vec": {
                "defined": {
                  "name": "Role"
                }
              }
            }
          },
          {
            "docs": [
              "Permission definitions"
            ],
            "name": "permissions",
            "type": {
              "vec": {
                "defined": {
                  "name": "Permission"
                }
              }
            }
          },
          {
            "docs": [
              "Access policies"
            ],
            "name": "access_policies",
            "type": {
              "vec": {
                "defined": {
                  "name": "AccessPolicy"
                }
              }
            }
          },
          {
            "docs": [
              "Security policies"
            ],
            "name": "security_policies",
            "type": {
              "defined": {
                "name": "SecurityPolicies"
              }
            }
          },
          {
            "docs": [
              "Audit configuration"
            ],
            "name": "audit_config",
            "type": {
              "defined": {
                "name": "AccessAuditConfig"
              }
            }
          },
          {
            "docs": [
              "Emergency access procedures"
            ],
            "name": "emergency_access",
            "type": {
              "defined": {
                "name": "EmergencyAccessConfig"
              }
            }
          },
          {
            "docs": [
              "Reserved space"
            ],
            "name": "reserved",
            "type": {
              "array": [
                "u8",
                128
              ]
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "RbacConfigInitializedEvent",
      "type": {
        "fields": [
          {
            "name": "rbac_config",
            "type": "pubkey"
          },
          {
            "name": "authority",
            "type": "pubkey"
          },
          {
            "name": "roles_count",
            "type": "u32"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "ReplicationRecord",
      "type": {
        "fields": [
          {
            "name": "record_id",
            "type": "u64"
          },
          {
            "name": "original_agent",
            "type": "pubkey"
          },
          {
            "name": "replicated_agent",
            "type": "pubkey"
          },
          {
            "name": "replicator",
            "type": "pubkey"
          },
          {
            "name": "fee_paid",
            "type": "u64"
          },
          {
            "name": "replicated_at",
            "type": "i64"
          },
          {
            "name": "cnft_mint",
            "type": {
              "option": "pubkey"
            }
          },
          {
            "name": "bump",
            "type": "u8"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "ReplicationTemplate",
      "type": {
        "fields": [
          {
            "name": "source_agent",
            "type": "pubkey"
          },
          {
            "name": "creator",
            "type": "pubkey"
          },
          {
            "name": "genome_hash",
            "type": "string"
          },
          {
            "name": "base_capabilities",
            "type": {
              "vec": "string"
            }
          },
          {
            "name": "replication_fee",
            "type": "u64"
          },
          {
            "name": "max_replications",
            "type": "u32"
          },
          {
            "name": "current_replications",
            "type": "u32"
          },
          {
            "name": "is_active",
            "type": "bool"
          },
          {
            "name": "created_at",
            "type": "i64"
          },
          {
            "name": "cnft_asset_id",
            "type": {
              "option": "pubkey"
            }
          },
          {
            "name": "merkle_tree",
            "type": {
              "option": "pubkey"
            }
          },
          {
            "name": "metadata_uri",
            "type": "string"
          },
          {
            "name": "bump",
            "type": "u8"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "ReplicationTemplateCreatedEvent",
      "type": {
        "fields": [
          {
            "name": "template",
            "type": "pubkey"
          },
          {
            "name": "agent",
            "type": "pubkey"
          },
          {
            "name": "owner",
            "type": "pubkey"
          },
          {
            "name": "fee",
            "type": "u64"
          },
          {
            "name": "timestamp",
            "type": "i64"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Data structure for creating a replication template"
      ],
      "name": "ReplicationTemplateData",
      "type": {
        "fields": [
          {
            "name": "genome_hash",
            "type": "string"
          },
          {
            "name": "base_capabilities",
            "type": {
              "vec": "string"
            }
          },
          {
            "name": "replication_fee",
            "type": "u64"
          },
          {
            "name": "max_replications",
            "type": "u32"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Report data container"
      ],
      "name": "ReportData",
      "type": {
        "fields": [
          {
            "docs": [
              "Summary statistics"
            ],
            "name": "summary",
            "type": {
              "defined": {
                "name": "ReportSummary"
              }
            }
          },
          {
            "docs": [
              "Detailed entries"
            ],
            "name": "entries",
            "type": {
              "vec": {
                "defined": {
                  "name": "ReportEntry"
                }
              }
            }
          },
          {
            "docs": [
              "Compliance metrics"
            ],
            "name": "compliance_metrics",
            "type": {
              "defined": {
                "name": "ComplianceMetrics"
              }
            }
          },
          {
            "docs": [
              "Risk indicators"
            ],
            "name": "risk_indicators",
            "type": {
              "vec": {
                "defined": {
                  "name": "RiskIndicator"
                }
              }
            }
          },
          {
            "docs": [
              "Recommendations"
            ],
            "name": "recommendations",
            "type": {
              "vec": "string"
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Report status"
      ],
      "name": "ReportStatus",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Draft"
          },
          {
            "name": "Generated"
          },
          {
            "name": "Reviewed"
          },
          {
            "name": "Approved"
          },
          {
            "name": "Submitted"
          },
          {
            "name": "Acknowledged"
          },
          {
            "name": "Rejected"
          }
        ]
      }
    },
    {
      "docs": [
        "Report summary statistics"
      ],
      "name": "ReportSummary",
      "type": {
        "fields": [
          {
            "docs": [
              "Total transactions"
            ],
            "name": "total_transactions",
            "type": "u64"
          },
          {
            "docs": [
              "Total volume"
            ],
            "name": "total_volume",
            "type": "u64"
          },
          {
            "docs": [
              "High-risk transactions"
            ],
            "name": "high_risk_transactions",
            "type": "u64"
          },
          {
            "docs": [
              "Compliance violations"
            ],
            "name": "compliance_violations",
            "type": "u64"
          },
          {
            "docs": [
              "Security incidents"
            ],
            "name": "security_incidents",
            "type": "u64"
          },
          {
            "docs": [
              "Average risk score"
            ],
            "name": "average_risk_score",
            "type": "u8"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Types of compliance reports"
      ],
      "name": "ReportType",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "FinancialTransactions"
          },
          {
            "name": "SuspiciousActivity"
          },
          {
            "name": "RegulatoryCompliance"
          },
          {
            "name": "SecurityIncidents"
          },
          {
            "name": "AuditSummary"
          },
          {
            "name": "RiskAssessment"
          },
          {
            "name": "GovernanceActivity"
          },
          {
            "name": "DataPrivacyCompliance"
          }
        ]
      }
    },
    {
      "docs": [
        "Reporting frequency options"
      ],
      "name": "ReportingFrequency",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Daily"
          },
          {
            "name": "Weekly"
          },
          {
            "name": "Monthly"
          },
          {
            "name": "Quarterly"
          },
          {
            "name": "Annually"
          },
          {
            "name": "OnDemand"
          }
        ]
      }
    },
    {
      "name": "ResaleMarket",
      "type": {
        "fields": [
          {
            "name": "agent",
            "type": "pubkey"
          },
          {
            "name": "seller",
            "type": "pubkey"
          },
          {
            "name": "price",
            "type": "u64"
          },
          {
            "name": "royalty_percentage",
            "type": "u32"
          },
          {
            "name": "is_listed",
            "type": "bool"
          },
          {
            "name": "created_at",
            "type": "i64"
          },
          {
            "name": "sold_at",
            "type": {
              "option": "i64"
            }
          },
          {
            "name": "buyer",
            "type": {
              "option": "pubkey"
            }
          },
          {
            "name": "bump",
            "type": "u8"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Review schedule for policies"
      ],
      "name": "ReviewSchedule",
      "type": {
        "fields": [
          {
            "docs": [
              "Review frequency"
            ],
            "name": "frequency",
            "type": "i64"
          },
          {
            "docs": [
              "Last review date"
            ],
            "name": "last_review",
            "type": {
              "option": "i64"
            }
          },
          {
            "docs": [
              "Next review date"
            ],
            "name": "next_review",
            "type": "i64"
          },
          {
            "docs": [
              "Review owners"
            ],
            "name": "review_owners",
            "type": {
              "vec": "pubkey"
            }
          },
          {
            "docs": [
              "Review criteria"
            ],
            "name": "review_criteria",
            "type": {
              "vec": "string"
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Risk acceptance status"
      ],
      "name": "RiskAcceptance",
      "type": {
        "fields": [
          {
            "docs": [
              "Risk accepted"
            ],
            "name": "accepted",
            "type": "bool"
          },
          {
            "docs": [
              "Accepting authority"
            ],
            "name": "accepting_authority",
            "type": {
              "option": "pubkey"
            }
          },
          {
            "docs": [
              "Acceptance date"
            ],
            "name": "acceptance_date",
            "type": {
              "option": "i64"
            }
          },
          {
            "docs": [
              "Acceptance reasoning"
            ],
            "name": "reasoning",
            "type": {
              "option": "string"
            }
          },
          {
            "docs": [
              "Review date"
            ],
            "name": "review_date",
            "type": {
              "option": "i64"
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Risk assessment for permissions"
      ],
      "name": "RiskAssessment",
      "type": {
        "fields": [
          {
            "docs": [
              "Overall risk score"
            ],
            "name": "risk_score",
            "type": "u8"
          },
          {
            "docs": [
              "Risk factors"
            ],
            "name": "risk_factors",
            "type": {
              "vec": {
                "defined": {
                  "name": "RiskFactor"
                }
              }
            }
          },
          {
            "docs": [
              "Mitigation measures"
            ],
            "name": "mitigation_measures",
            "type": {
              "vec": "string"
            }
          },
          {
            "docs": [
              "Risk acceptance"
            ],
            "name": "risk_acceptance",
            "type": {
              "defined": {
                "name": "RiskAcceptance"
              }
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Risk categories"
      ],
      "name": "RiskCategory",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Operational"
          },
          {
            "name": "Financial"
          },
          {
            "name": "Compliance"
          },
          {
            "name": "Security"
          },
          {
            "name": "Reputational"
          },
          {
            "name": "Technical"
          },
          {
            "name": "Legal"
          }
        ]
      }
    },
    {
      "docs": [
        "Individual risk factor"
      ],
      "name": "RiskFactor",
      "type": {
        "fields": [
          {
            "docs": [
              "Factor name"
            ],
            "name": "name",
            "type": "string"
          },
          {
            "docs": [
              "Factor category"
            ],
            "name": "category",
            "type": {
              "defined": {
                "name": "RiskCategory"
              }
            }
          },
          {
            "docs": [
              "Impact score"
            ],
            "name": "impact",
            "type": "u8"
          },
          {
            "docs": [
              "Likelihood score"
            ],
            "name": "likelihood",
            "type": "u8"
          },
          {
            "docs": [
              "Risk score"
            ],
            "name": "risk_score",
            "type": "u8"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Risk indicator"
      ],
      "name": "RiskIndicator",
      "type": {
        "fields": [
          {
            "docs": [
              "Indicator name"
            ],
            "name": "name",
            "type": "string"
          },
          {
            "docs": [
              "Current value"
            ],
            "name": "current_value",
            "type": "u64"
          },
          {
            "docs": [
              "Threshold value"
            ],
            "name": "threshold_value",
            "type": "u64"
          },
          {
            "docs": [
              "Trend direction"
            ],
            "name": "trend",
            "type": {
              "defined": {
                "name": "TrendDirection"
              }
            }
          },
          {
            "docs": [
              "Severity if threshold exceeded"
            ],
            "name": "severity",
            "type": {
              "defined": {
                "name": "ViolationSeverity"
              }
            }
          },
          {
            "docs": [
              "Recommended actions"
            ],
            "name": "recommended_actions",
            "type": {
              "vec": "string"
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Risk levels for roles"
      ],
      "name": "RiskLevel",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Low"
          },
          {
            "name": "Medium"
          },
          {
            "name": "High"
          },
          {
            "name": "Critical"
          }
        ]
      }
    },
    {
      "docs": [
        "Role definition with permissions and constraints"
      ],
      "name": "Role",
      "type": {
        "fields": [
          {
            "docs": [
              "Role identifier"
            ],
            "name": "role_id",
            "type": "string"
          },
          {
            "docs": [
              "Role name"
            ],
            "name": "name",
            "type": "string"
          },
          {
            "docs": [
              "Role description"
            ],
            "name": "description",
            "type": "string"
          },
          {
            "docs": [
              "Role type"
            ],
            "name": "role_type",
            "type": {
              "defined": {
                "name": "RoleType"
              }
            }
          },
          {
            "docs": [
              "Permission assignments"
            ],
            "name": "permissions",
            "type": {
              "vec": "string"
            }
          },
          {
            "docs": [
              "Role constraints"
            ],
            "name": "constraints",
            "type": {
              "defined": {
                "name": "RoleConstraints"
              }
            }
          },
          {
            "docs": [
              "Inheritance relationships"
            ],
            "name": "inherits_from",
            "type": {
              "vec": "string"
            }
          },
          {
            "docs": [
              "Role metadata"
            ],
            "name": "metadata",
            "type": {
              "defined": {
                "name": "RoleMetadata"
              }
            }
          },
          {
            "docs": [
              "Role status"
            ],
            "name": "status",
            "type": {
              "defined": {
                "name": "RoleStatus"
              }
            }
          },
          {
            "docs": [
              "Creation timestamp"
            ],
            "name": "created_at",
            "type": "i64"
          },
          {
            "docs": [
              "Last modification timestamp"
            ],
            "name": "modified_at",
            "type": "i64"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Constraints applied to roles"
      ],
      "name": "RoleConstraints",
      "type": {
        "fields": [
          {
            "docs": [
              "Time-based constraints"
            ],
            "name": "time_constraints",
            "type": {
              "option": {
                "defined": {
                  "name": "TimeConstraints"
                }
              }
            }
          },
          {
            "docs": [
              "Location-based constraints"
            ],
            "name": "location_constraints",
            "type": {
              "option": {
                "defined": {
                  "name": "LocationConstraints"
                }
              }
            }
          },
          {
            "docs": [
              "Resource-based constraints"
            ],
            "name": "resource_constraints",
            "type": {
              "option": {
                "defined": {
                  "name": "ResourceConstraints"
                }
              }
            }
          },
          {
            "docs": [
              "Session-based constraints"
            ],
            "name": "session_constraints",
            "type": {
              "option": {
                "defined": {
                  "name": "SessionConstraints"
                }
              }
            }
          },
          {
            "docs": [
              "Segregation of duties constraints"
            ],
            "name": "sod_constraints",
            "type": {
              "vec": {
                "defined": {
                  "name": "SodConstraint"
                }
              }
            }
          },
          {
            "docs": [
              "Maximum concurrent sessions"
            ],
            "name": "max_concurrent_sessions",
            "type": {
              "option": "u32"
            }
          },
          {
            "docs": [
              "Role activation requirements"
            ],
            "name": "activation_requirements",
            "type": {
              "vec": {
                "defined": {
                  "name": "ActivationRequirement"
                }
              }
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Role metadata for additional information"
      ],
      "name": "RoleMetadata",
      "type": {
        "fields": [
          {
            "docs": [
              "Business purpose"
            ],
            "name": "business_purpose",
            "type": "string"
          },
          {
            "docs": [
              "Risk level"
            ],
            "name": "risk_level",
            "type": {
              "defined": {
                "name": "RiskLevel"
              }
            }
          },
          {
            "docs": [
              "Data access level"
            ],
            "name": "data_access_level",
            "type": {
              "defined": {
                "name": "DataAccessLevel"
              }
            }
          },
          {
            "docs": [
              "Compliance requirements"
            ],
            "name": "compliance_requirements",
            "type": {
              "vec": "string"
            }
          },
          {
            "docs": [
              "Role owner"
            ],
            "name": "role_owner",
            "type": {
              "option": "pubkey"
            }
          },
          {
            "docs": [
              "Role custodian"
            ],
            "name": "role_custodian",
            "type": {
              "option": "pubkey"
            }
          },
          {
            "docs": [
              "Review frequency"
            ],
            "name": "review_frequency",
            "type": "i64"
          },
          {
            "docs": [
              "Last review timestamp"
            ],
            "name": "last_review",
            "type": {
              "option": "i64"
            }
          },
          {
            "docs": [
              "Next review due"
            ],
            "name": "next_review",
            "type": {
              "option": "i64"
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Role status"
      ],
      "name": "RoleStatus",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Active"
          },
          {
            "name": "Inactive"
          },
          {
            "name": "Deprecated"
          },
          {
            "name": "UnderReview"
          },
          {
            "name": "Suspended"
          }
        ]
      }
    },
    {
      "docs": [
        "Types of roles in the system"
      ],
      "name": "RoleType",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Administrative"
          },
          {
            "name": "Operational"
          },
          {
            "name": "ReadOnly"
          },
          {
            "name": "Compliance"
          },
          {
            "name": "Emergency"
          },
          {
            "name": "Custom"
          },
          {
            "name": "Service"
          },
          {
            "name": "Guest"
          }
        ]
      }
    },
    {
      "name": "RoyaltyConfig",
      "type": {
        "fields": [
          {
            "name": "percentage",
            "type": "u32"
          },
          {
            "name": "min_amount",
            "type": "u64"
          },
          {
            "name": "max_amount",
            "type": "u64"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "RoyaltyStream",
      "type": {
        "fields": [
          {
            "name": "agent",
            "type": "pubkey"
          },
          {
            "name": "original_creator",
            "type": "pubkey"
          },
          {
            "name": "config",
            "type": {
              "defined": {
                "name": "RoyaltyConfig"
              }
            }
          },
          {
            "name": "total_paid",
            "type": "u64"
          },
          {
            "name": "last_payment",
            "type": "i64"
          },
          {
            "name": "is_active",
            "type": "bool"
          },
          {
            "name": "created_at",
            "type": "i64"
          },
          {
            "name": "bump",
            "type": "u8"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "RoyaltyStreamCreatedEvent",
      "type": {
        "fields": [
          {
            "name": "stream",
            "type": "pubkey"
          },
          {
            "name": "agent",
            "type": "pubkey"
          },
          {
            "name": "creator",
            "type": "pubkey"
          },
          {
            "name": "percentage",
            "type": "u32"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Rule effects"
      ],
      "name": "RuleEffect",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Allow"
          },
          {
            "name": "Deny"
          },
          {
            "name": "AuditOnly"
          },
          {
            "name": "RequireApproval"
          },
          {
            "name": "RequireMfa"
          },
          {
            "name": "RequireJustification"
          }
        ]
      }
    },
    {
      "docs": [
        "Scope boundaries definition"
      ],
      "name": "ScopeBoundaries",
      "type": {
        "fields": [
          {
            "docs": [
              "Included resources"
            ],
            "name": "included_resources",
            "type": {
              "vec": "string"
            }
          },
          {
            "docs": [
              "Excluded resources"
            ],
            "name": "excluded_resources",
            "type": {
              "vec": "string"
            }
          },
          {
            "docs": [
              "Resource patterns (regex)"
            ],
            "name": "resource_patterns",
            "type": {
              "vec": "string"
            }
          },
          {
            "docs": [
              "Hierarchical boundaries"
            ],
            "name": "hierarchical_boundaries",
            "type": {
              "vec": {
                "defined": {
                  "name": "HierarchicalBoundary"
                }
              }
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Scope inheritance options"
      ],
      "name": "ScopeInheritance",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "None"
          },
          {
            "name": "Hierarchical"
          },
          {
            "name": "Delegated"
          },
          {
            "name": "Inherited"
          }
        ]
      }
    },
    {
      "docs": [
        "Types of permission scopes"
      ],
      "name": "ScopeType",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Global"
          },
          {
            "name": "Organization"
          },
          {
            "name": "Department"
          },
          {
            "name": "Project"
          },
          {
            "name": "Resource"
          },
          {
            "name": "Individual"
          }
        ]
      }
    },
    {
      "docs": [
        "Types of security events"
      ],
      "name": "SecurityEventType",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "AccountLockout"
          },
          {
            "name": "PasswordChange"
          },
          {
            "name": "PrivilegeEscalation"
          },
          {
            "name": "SuspiciousActivity"
          },
          {
            "name": "PolicyViolation"
          },
          {
            "name": "AccessDenied"
          },
          {
            "name": "DataBreach"
          },
          {
            "name": "SystemCompromise"
          }
        ]
      }
    },
    {
      "docs": [
        "Comprehensive security policies configuration"
      ],
      "name": "SecurityPolicies",
      "type": {
        "fields": [
          {
            "docs": [
              "Authentication policies"
            ],
            "name": "authentication",
            "type": {
              "defined": {
                "name": "AuthenticationPolicies"
              }
            }
          },
          {
            "docs": [
              "Authorization policies"
            ],
            "name": "authorization",
            "type": {
              "defined": {
                "name": "AuthorizationPolicies"
              }
            }
          },
          {
            "docs": [
              "Password policies"
            ],
            "name": "password",
            "type": {
              "defined": {
                "name": "PasswordPolicies"
              }
            }
          },
          {
            "docs": [
              "Session policies"
            ],
            "name": "session",
            "type": {
              "defined": {
                "name": "SessionPolicies"
              }
            }
          },
          {
            "docs": [
              "Data protection policies"
            ],
            "name": "data_protection",
            "type": {
              "defined": {
                "name": "DataProtectionPolicies"
              }
            }
          },
          {
            "docs": [
              "Network security policies"
            ],
            "name": "network_security",
            "type": {
              "defined": {
                "name": "NetworkSecurityPolicies"
              }
            }
          },
          {
            "docs": [
              "Incident response policies"
            ],
            "name": "incident_response",
            "type": {
              "defined": {
                "name": "IncidentResponsePolicies"
              }
            }
          },
          {
            "docs": [
              "Compliance policies"
            ],
            "name": "compliance",
            "type": {
              "defined": {
                "name": "CompliancePolicies"
              }
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "ServiceAuctionCreatedEvent",
      "type": {
        "fields": [
          {
            "name": "auction",
            "type": "pubkey"
          },
          {
            "name": "agent",
            "type": "pubkey"
          },
          {
            "name": "creator",
            "type": "pubkey"
          },
          {
            "name": "starting_price",
            "type": "u64"
          },
          {
            "name": "auction_type",
            "type": {
              "defined": {
                "name": "AuctionType"
              }
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "ServiceListing",
      "type": {
        "fields": [
          {
            "name": "agent",
            "type": "pubkey"
          },
          {
            "name": "owner",
            "type": "pubkey"
          },
          {
            "name": "title",
            "type": "string"
          },
          {
            "name": "description",
            "type": "string"
          },
          {
            "name": "price",
            "type": "u64"
          },
          {
            "name": "token_mint",
            "type": "pubkey"
          },
          {
            "name": "service_type",
            "type": "string"
          },
          {
            "name": "payment_token",
            "type": "pubkey"
          },
          {
            "name": "estimated_delivery",
            "type": "i64"
          },
          {
            "name": "tags",
            "type": {
              "vec": "string"
            }
          },
          {
            "name": "is_active",
            "type": "bool"
          },
          {
            "name": "total_orders",
            "type": "u32"
          },
          {
            "name": "rating",
            "type": "f64"
          },
          {
            "name": "created_at",
            "type": "i64"
          },
          {
            "name": "updated_at",
            "type": "i64"
          },
          {
            "name": "transfer_hook",
            "type": {
              "option": "pubkey"
            }
          },
          {
            "name": "bump",
            "type": "u8"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "ServiceListingCreatedEvent",
      "type": {
        "fields": [
          {
            "name": "listing",
            "type": "pubkey"
          },
          {
            "name": "creator",
            "type": "pubkey"
          },
          {
            "name": "price",
            "type": "u64"
          },
          {
            "name": "timestamp",
            "type": "i64"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "ServiceListingData",
      "type": {
        "fields": [
          {
            "name": "title",
            "type": "string"
          },
          {
            "name": "description",
            "type": "string"
          },
          {
            "name": "price",
            "type": "u64"
          },
          {
            "name": "token_mint",
            "type": "pubkey"
          },
          {
            "name": "service_type",
            "type": "string"
          },
          {
            "name": "payment_token",
            "type": "pubkey"
          },
          {
            "name": "estimated_delivery",
            "type": "i64"
          },
          {
            "name": "tags",
            "type": {
              "vec": "string"
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "ServicePurchase",
      "type": {
        "fields": [
          {
            "name": "customer",
            "type": "pubkey"
          },
          {
            "name": "agent",
            "type": "pubkey"
          },
          {
            "name": "listing",
            "type": "pubkey"
          },
          {
            "name": "listing_id",
            "type": "u64"
          },
          {
            "name": "quantity",
            "type": "u32"
          },
          {
            "name": "requirements",
            "type": {
              "vec": "string"
            }
          },
          {
            "name": "custom_instructions",
            "type": "string"
          },
          {
            "name": "deadline",
            "type": "i64"
          },
          {
            "name": "payment_amount",
            "type": "u64"
          },
          {
            "name": "payment_token",
            "type": "pubkey"
          },
          {
            "name": "status",
            "type": {
              "defined": {
                "name": "PurchaseStatus"
              }
            }
          },
          {
            "name": "purchased_at",
            "type": "i64"
          },
          {
            "name": "updated_at",
            "type": "i64"
          },
          {
            "name": "transfer_hook_applied",
            "type": "bool"
          },
          {
            "name": "bump",
            "type": "u8"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "ServicePurchaseData",
      "type": {
        "fields": [
          {
            "name": "listing_id",
            "type": "u64"
          },
          {
            "name": "quantity",
            "type": "u32"
          },
          {
            "name": "requirements",
            "type": {
              "vec": "string"
            }
          },
          {
            "name": "custom_instructions",
            "type": "string"
          },
          {
            "name": "deadline",
            "type": "i64"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "ServicePurchasedEvent",
      "type": {
        "fields": [
          {
            "name": "service",
            "type": "pubkey"
          },
          {
            "name": "buyer",
            "type": "pubkey"
          },
          {
            "name": "quantity",
            "type": "u64"
          },
          {
            "name": "price",
            "type": "u64"
          },
          {
            "name": "timestamp",
            "type": "i64"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Session-based access constraints"
      ],
      "name": "SessionConstraints",
      "type": {
        "fields": [
          {
            "docs": [
              "Maximum session duration"
            ],
            "name": "max_session_duration",
            "type": "i64"
          },
          {
            "docs": [
              "Idle timeout"
            ],
            "name": "idle_timeout",
            "type": "i64"
          },
          {
            "docs": [
              "Re-authentication interval"
            ],
            "name": "reauth_interval",
            "type": "i64"
          },
          {
            "docs": [
              "Multi-factor authentication required"
            ],
            "name": "mfa_required",
            "type": "bool"
          },
          {
            "docs": [
              "Device fingerprinting required"
            ],
            "name": "device_fingerprinting",
            "type": "bool"
          },
          {
            "docs": [
              "Session encryption required"
            ],
            "name": "session_encryption",
            "type": "bool"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "SessionPolicies",
      "type": {
        "fields": [
          {
            "name": "max_session_duration",
            "type": "i64"
          },
          {
            "name": "idle_timeout",
            "type": "i64"
          },
          {
            "name": "concurrent_sessions",
            "type": "u8"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Segregation of duties constraint"
      ],
      "name": "SodConstraint",
      "type": {
        "fields": [
          {
            "docs": [
              "Constraint name"
            ],
            "name": "name",
            "type": "string"
          },
          {
            "docs": [
              "Conflicting roles"
            ],
            "name": "conflicting_roles",
            "type": {
              "vec": "string"
            }
          },
          {
            "docs": [
              "Constraint type"
            ],
            "name": "constraint_type",
            "type": {
              "defined": {
                "name": "SodConstraintType"
              }
            }
          },
          {
            "docs": [
              "Enforcement level"
            ],
            "name": "enforcement_level",
            "type": {
              "defined": {
                "name": "EnforcementLevel"
              }
            }
          },
          {
            "docs": [
              "Exception procedures"
            ],
            "name": "exception_procedures",
            "type": {
              "vec": "string"
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Types of segregation of duties constraints"
      ],
      "name": "SodConstraintType",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Static"
          },
          {
            "name": "Dynamic"
          },
          {
            "name": "Temporal"
          },
          {
            "name": "Contextual"
          }
        ]
      }
    },
    {
      "docs": [
        "Triggers for step-up authentication"
      ],
      "name": "StepUpTrigger",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "HighRiskAction"
          },
          {
            "name": "SensitiveData"
          },
          {
            "name": "LargeTransaction"
          },
          {
            "name": "NewDevice"
          },
          {
            "name": "UnusualLocation"
          },
          {
            "name": "TimeBasedRisk"
          },
          {
            "name": "BehaviorAnomaly"
          }
        ]
      }
    },
    {
      "docs": [
        "Submission details for regulatory reports"
      ],
      "name": "SubmissionDetails",
      "type": {
        "fields": [
          {
            "docs": [
              "Submission timestamp"
            ],
            "name": "submitted_at",
            "type": "i64"
          },
          {
            "docs": [
              "Regulatory body"
            ],
            "name": "regulatory_body",
            "type": "string"
          },
          {
            "docs": [
              "Submission reference"
            ],
            "name": "submission_reference",
            "type": "string"
          },
          {
            "docs": [
              "Acknowledgment received"
            ],
            "name": "acknowledged",
            "type": "bool"
          },
          {
            "docs": [
              "Acknowledgment timestamp"
            ],
            "name": "acknowledged_at",
            "type": {
              "option": "i64"
            }
          },
          {
            "docs": [
              "Response from regulatory body"
            ],
            "name": "regulatory_response",
            "type": {
              "option": "string"
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Time-based access constraints"
      ],
      "name": "TimeConstraints",
      "type": {
        "fields": [
          {
            "docs": [
              "Allowed hours (0-23)"
            ],
            "name": "allowed_hours",
            "type": "bytes"
          },
          {
            "docs": [
              "Allowed days of week (1-7)"
            ],
            "name": "allowed_days",
            "type": "bytes"
          },
          {
            "docs": [
              "Timezone for time calculations"
            ],
            "name": "timezone",
            "type": "string"
          },
          {
            "docs": [
              "Maximum session duration (seconds)"
            ],
            "name": "max_session_duration",
            "type": {
              "option": "i64"
            }
          },
          {
            "docs": [
              "Role expiration timestamp"
            ],
            "name": "expires_at",
            "type": {
              "option": "i64"
            }
          },
          {
            "docs": [
              "Periodic reactivation required"
            ],
            "name": "reactivation_period",
            "type": {
              "option": "i64"
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Time lock mechanism for delayed execution"
      ],
      "name": "TimeLock",
      "type": {
        "fields": [
          {
            "docs": [
              "Lock duration in seconds"
            ],
            "name": "duration",
            "type": "i64"
          },
          {
            "docs": [
              "Lock start timestamp"
            ],
            "name": "locked_at",
            "type": "i64"
          },
          {
            "docs": [
              "Unlock timestamp"
            ],
            "name": "unlocks_at",
            "type": "i64"
          },
          {
            "docs": [
              "Early unlock conditions"
            ],
            "name": "early_unlock_conditions",
            "type": {
              "vec": {
                "defined": {
                  "name": "ExecutionCondition"
                }
              }
            }
          },
          {
            "docs": [
              "Lock type"
            ],
            "name": "lock_type",
            "type": {
              "defined": {
                "name": "TimeLockType"
              }
            }
          },
          {
            "docs": [
              "Can be cancelled before execution"
            ],
            "name": "cancellable",
            "type": "bool"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Types of time locks"
      ],
      "name": "TimeLockType",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Standard"
          },
          {
            "name": "Vesting"
          },
          {
            "name": "Emergency"
          },
          {
            "name": "Governance"
          }
        ]
      }
    },
    {
      "name": "TopAgentAddedEvent",
      "type": {
        "fields": [
          {
            "name": "market_analytics",
            "type": "pubkey"
          },
          {
            "name": "agent",
            "type": "pubkey"
          },
          {
            "name": "timestamp",
            "type": "i64"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Transaction priority levels"
      ],
      "name": "TransactionPriority",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Low"
          },
          {
            "name": "Normal"
          },
          {
            "name": "High"
          },
          {
            "name": "Critical"
          },
          {
            "name": "Emergency"
          }
        ]
      }
    },
    {
      "docs": [
        "Transaction execution status"
      ],
      "name": "TransactionStatus",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Pending"
          },
          {
            "name": "PartiallyApproved"
          },
          {
            "name": "FullyApproved"
          },
          {
            "name": "Executed"
          },
          {
            "name": "Cancelled"
          },
          {
            "name": "Expired"
          },
          {
            "name": "Failed"
          }
        ]
      }
    },
    {
      "docs": [
        "Types of transactions that can be executed"
      ],
      "name": "TransactionType",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Transfer"
          },
          {
            "name": "Withdrawal"
          },
          {
            "name": "EscrowRelease"
          },
          {
            "name": "ProposalCreation"
          },
          {
            "name": "VoteExecution"
          },
          {
            "name": "ParameterUpdate"
          },
          {
            "name": "SignerAddition"
          },
          {
            "name": "SignerRemoval"
          },
          {
            "name": "ThresholdUpdate"
          },
          {
            "name": "ConfigUpdate"
          },
          {
            "name": "EmergencyFreeze"
          },
          {
            "name": "EmergencyUnfreeze"
          },
          {
            "name": "SecurityPolicyUpdate"
          },
          {
            "name": "ProtocolUpgrade"
          },
          {
            "name": "FeatureToggle"
          },
          {
            "name": "RiskParameterUpdate"
          },
          {
            "name": "CustomInstruction"
          }
        ]
      }
    },
    {
      "docs": [
        "Trend direction for risk indicators"
      ],
      "name": "TrendDirection",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Increasing"
          },
          {
            "name": "Decreasing"
          },
          {
            "name": "Stable"
          },
          {
            "name": "Unknown"
          }
        ]
      }
    },
    {
      "docs": [
        "Methods to unlock accounts"
      ],
      "name": "UnlockMethod",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "TimeBasedAutoUnlock"
          },
          {
            "name": "AdminUnlock"
          },
          {
            "name": "SelfServiceUnlock"
          },
          {
            "name": "MultiFactorUnlock"
          },
          {
            "name": "SupervisorUnlock"
          }
        ]
      }
    },
    {
      "name": "UserRegistry",
      "type": {
        "fields": [
          {
            "name": "user",
            "type": "pubkey"
          },
          {
            "name": "agent_count",
            "type": "u16"
          },
          {
            "name": "listing_count",
            "type": "u16"
          },
          {
            "name": "work_order_count",
            "type": "u16"
          },
          {
            "name": "channel_count",
            "type": "u16"
          },
          {
            "name": "total_volume_traded",
            "type": "u64"
          },
          {
            "name": "last_activity",
            "type": "i64"
          },
          {
            "name": "created_at",
            "type": "i64"
          },
          {
            "name": "is_rate_limited",
            "type": "bool"
          },
          {
            "name": "rate_limit_expiry",
            "type": "i64"
          },
          {
            "name": "last_extension_registration",
            "type": "i64"
          },
          {
            "name": "last_dispute_filing",
            "type": "i64"
          },
          {
            "name": "last_evidence_submission",
            "type": "i64"
          },
          {
            "name": "last_batch_execution",
            "type": "i64"
          },
          {
            "name": "last_dashboard_update",
            "type": "i64"
          },
          {
            "name": "last_bulk_deal_creation",
            "type": "i64"
          },
          {
            "name": "last_dashboard_creation",
            "type": "i64"
          },
          {
            "name": "bump",
            "type": "u8"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Value types for constraint conditions"
      ],
      "name": "ValueType",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "String"
          },
          {
            "name": "Number"
          },
          {
            "name": "Boolean"
          },
          {
            "name": "Date"
          },
          {
            "name": "Time"
          },
          {
            "name": "Duration"
          },
          {
            "name": "List"
          },
          {
            "name": "Object"
          }
        ]
      }
    },
    {
      "docs": [
        "Violation severity levels"
      ],
      "name": "ViolationSeverity",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Low"
          },
          {
            "name": "Medium"
          },
          {
            "name": "High"
          },
          {
            "name": "Critical"
          }
        ]
      }
    },
    {
      "name": "VolumeTier",
      "type": {
        "fields": [
          {
            "name": "min_quantity",
            "type": "u32"
          },
          {
            "name": "max_quantity",
            "type": "u32"
          },
          {
            "name": "discount_percentage",
            "type": "u32"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Individual vote record"
      ],
      "name": "Vote",
      "type": {
        "fields": [
          {
            "docs": [
              "Voter public key"
            ],
            "name": "voter",
            "type": "pubkey"
          },
          {
            "docs": [
              "Vote choice"
            ],
            "name": "choice",
            "type": {
              "defined": {
                "name": "VoteChoice"
              }
            }
          },
          {
            "docs": [
              "Voting power used"
            ],
            "name": "voting_power",
            "type": "u64"
          },
          {
            "docs": [
              "Vote timestamp"
            ],
            "name": "voted_at",
            "type": "i64"
          },
          {
            "docs": [
              "Vote reasoning (optional)"
            ],
            "name": "reasoning",
            "type": {
              "option": "string"
            }
          },
          {
            "docs": [
              "Delegation info (if delegated vote)"
            ],
            "name": "delegation_info",
            "type": {
              "option": {
                "defined": {
                  "name": "DelegationInfo"
                }
              }
            }
          }
        ],
        "kind": "struct"
      }
    },
    {
      "docs": [
        "Vote choices"
      ],
      "name": "VoteChoice",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "For"
          },
          {
            "name": "Against"
          },
          {
            "name": "Abstain"
          }
        ]
      }
    },
    {
      "docs": [
        "Voting results for proposal"
      ],
      "name": "VotingResults",
      "type": {
        "fields": [
          {
            "docs": [
              "Total votes for"
            ],
            "name": "votes_for",
            "type": "u64"
          },
          {
            "docs": [
              "Total votes against"
            ],
            "name": "votes_against",
            "type": "u64"
          },
          {
            "docs": [
              "Total votes abstain"
            ],
            "name": "votes_abstain",
            "type": "u64"
          },
          {
            "docs": [
              "Total voting power"
            ],
            "name": "total_voting_power",
            "type": "u64"
          },
          {
            "docs": [
              "Participation rate"
            ],
            "name": "participation_rate",
            "type": "u8"
          },
          {
            "docs": [
              "Individual votes"
            ],
            "name": "individual_votes",
            "type": {
              "vec": {
                "defined": {
                  "name": "Vote"
                }
              }
            }
          },
          {
            "docs": [
              "Weighted voting enabled"
            ],
            "name": "weighted_voting",
            "type": "bool"
          },
          {
            "docs": [
              "Quorum reached"
            ],
            "name": "quorum_reached",
            "type": "bool"
          },
          {
            "docs": [
              "Approval threshold met"
            ],
            "name": "approval_threshold_met",
            "type": "bool"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "WorkDelivery",
      "type": {
        "fields": [
          {
            "name": "work_order",
            "type": "pubkey"
          },
          {
            "name": "provider",
            "type": "pubkey"
          },
          {
            "name": "deliverables",
            "type": {
              "vec": {
                "defined": {
                  "name": "Deliverable"
                }
              }
            }
          },
          {
            "name": "ipfs_hash",
            "type": "string"
          },
          {
            "name": "metadata_uri",
            "type": "string"
          },
          {
            "name": "submitted_at",
            "type": "i64"
          },
          {
            "name": "bump",
            "type": "u8"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "WorkDeliveryData",
      "type": {
        "fields": [
          {
            "name": "deliverables",
            "type": {
              "vec": {
                "defined": {
                  "name": "Deliverable"
                }
              }
            }
          },
          {
            "name": "ipfs_hash",
            "type": "string"
          },
          {
            "name": "metadata_uri",
            "type": "string"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "WorkDeliverySubmittedEvent",
      "type": {
        "fields": [
          {
            "name": "work_order",
            "type": "pubkey"
          },
          {
            "name": "provider",
            "type": "pubkey"
          },
          {
            "name": "ipfs_hash",
            "type": "string"
          },
          {
            "name": "timestamp",
            "type": "i64"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "WorkOrder",
      "type": {
        "fields": [
          {
            "name": "client",
            "type": "pubkey"
          },
          {
            "name": "provider",
            "type": "pubkey"
          },
          {
            "name": "title",
            "type": "string"
          },
          {
            "name": "description",
            "type": "string"
          },
          {
            "name": "requirements",
            "type": {
              "vec": "string"
            }
          },
          {
            "name": "payment_amount",
            "type": "u64"
          },
          {
            "name": "payment_token",
            "type": "pubkey"
          },
          {
            "name": "status",
            "type": {
              "defined": {
                "name": "WorkOrderStatus"
              }
            }
          },
          {
            "name": "created_at",
            "type": "i64"
          },
          {
            "name": "updated_at",
            "type": "i64"
          },
          {
            "name": "deadline",
            "type": "i64"
          },
          {
            "name": "delivered_at",
            "type": {
              "option": "i64"
            }
          },
          {
            "name": "bump",
            "type": "u8"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "WorkOrderCreatedEvent",
      "type": {
        "fields": [
          {
            "name": "work_order",
            "type": "pubkey"
          },
          {
            "name": "client",
            "type": "pubkey"
          },
          {
            "name": "provider",
            "type": "pubkey"
          },
          {
            "name": "amount",
            "type": "u64"
          },
          {
            "name": "timestamp",
            "type": "i64"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "WorkOrderData",
      "type": {
        "fields": [
          {
            "name": "order_id",
            "type": "u64"
          },
          {
            "name": "provider",
            "type": "pubkey"
          },
          {
            "name": "title",
            "type": "string"
          },
          {
            "name": "description",
            "type": "string"
          },
          {
            "name": "requirements",
            "type": {
              "vec": "string"
            }
          },
          {
            "name": "payment_amount",
            "type": "u64"
          },
          {
            "name": "payment_token",
            "type": "pubkey"
          },
          {
            "name": "deadline",
            "type": "i64"
          }
        ],
        "kind": "struct"
      }
    },
    {
      "name": "WorkOrderStatus",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Created"
          },
          {
            "name": "Open"
          },
          {
            "name": "Submitted"
          },
          {
            "name": "InProgress"
          },
          {
            "name": "Approved"
          },
          {
            "name": "Completed"
          },
          {
            "name": "Cancelled"
          }
        ]
      }
    }
  ]
}
