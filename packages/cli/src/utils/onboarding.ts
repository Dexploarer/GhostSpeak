/**
 * Enhanced onboarding experience for new users
 * Provides guided setup with clear explanations
 */

import chalk from 'chalk'
import { intro, outro, text, select, confirm, isCancel, cancel, spinner, log } from '@clack/prompts'
import { existsSync, mkdirSync, writeFileSync } from 'fs'
import { join } from 'path'
import { homedir } from 'os'
import { infoBox, successBox, warningBox, stepIndicator, divider } from './format-helpers.js'
import { WalletService } from '../services/wallet-service.js'
import { initializeClient } from './client.js'
import { estimateAndDisplay } from '../services/cost-estimator.js'

export interface OnboardingProgress {
  step: number
  totalSteps: number
  completedSteps: Set<string>
  skippedSteps: Set<string>
}

export interface OnboardingConfig {
  skipWelcome?: boolean
  network?: 'devnet' | 'testnet' | 'mainnet-beta'
  autoFaucet?: boolean
  createAgent?: boolean
}

const ONBOARDING_STEPS = [
  'welcome',
  'network-selection',
  'wallet-setup',
  'funding',
  'first-agent',
  'marketplace-tour',
  'completion'
] as const

type OnboardingStep = typeof ONBOARDING_STEPS[number]

export class OnboardingService {
  private progress: OnboardingProgress
  private config: OnboardingConfig
  private walletService: WalletService
  
  constructor(config: OnboardingConfig = {}) {
    this.config = config
    this.progress = {
      step: 1,
      totalSteps: ONBOARDING_STEPS.length,
      completedSteps: new Set(),
      skippedSteps: new Set()
    }
    this.walletService = new WalletService()
  }
  
  /**
   * Start the complete onboarding flow
   */
  async start(): Promise<void> {
    if (!this.config.skipWelcome) {
      await this.welcomeStep()
    }
    
    await this.networkSelectionStep()
    await this.walletSetupStep()
    await this.fundingStep()
    
    if (this.config.createAgent !== false) {
      await this.firstAgentStep()
    }
    
    await this.marketplaceTourStep()
    await this.completionStep()
  }
  
  /**
   * Welcome step with introduction
   */
  private async welcomeStep(): Promise<void> {
    intro(chalk.cyan('üöÄ Welcome to GhostSpeak!'))
    
    console.log(infoBox('What is GhostSpeak?', [\n      'GhostSpeak is a decentralized AI agent commerce protocol.',\n      'Here you can:',\n      '‚Ä¢ Register AI agents to provide services',\n      '‚Ä¢ Browse and purchase services from other agents',\n      '‚Ä¢ Create secure escrow payments',\n      '‚Ä¢ Participate in the AI agent economy'\n    ]))\n    \n    console.log('')\n    console.log(stepIndicator(1, this.progress.totalSteps, 'Introduction'))\n    \n    const ready = await confirm({\n      message: 'Ready to get started?',\n      active: 'Yes, let\\'s go!',\n      inactive: 'Maybe later'\n    })\n    \n    if (isCancel(ready) || !ready) {\n      cancel('Setup cancelled. Run \"gs quickstart\" anytime to continue.')\n      process.exit(0)\n    }\n    \n    this.markStepCompleted('welcome')\n  }\n  \n  /**\n   * Network selection step\n   */\n  private async networkSelectionStep(): Promise<void> {\n    console.log('')\n    console.log(stepIndicator(2, this.progress.totalSteps, 'Network Selection'))\n    \n    if (this.config.network) {\n      console.log(infoBox('Network Selected', [\n        `Using ${this.config.network} network`,\n        this.config.network === 'devnet' ? 'Perfect for testing and development' : 'Production network'\n      ]))\n      this.markStepCompleted('network-selection')\n      return\n    }\n    \n    console.log(infoBox('Choose Your Network', [\n      'Devnet: Free SOL, perfect for testing (Recommended for beginners)',\n      'Testnet: Testing network with test tokens',\n      'Mainnet: Real SOL, production environment'\n    ]))\n    \n    const network = await select({\n      message: 'Which network would you like to use?',\n      options: [\n        { value: 'devnet', label: 'üß™ Devnet (Recommended)', hint: 'Free SOL for testing' },\n        { value: 'testnet', label: 'üß™ Testnet', hint: 'Test environment' },\n        { value: 'mainnet-beta', label: 'üåê Mainnet', hint: 'Production (costs real SOL)' }\n      ]\n    })\n    \n    if (isCancel(network)) {\n      cancel('Setup cancelled')\n      process.exit(0)\n    }\n    \n    this.config.network = network as any\n    \n    // Save network preference\n    await this.saveProgress()\n    \n    this.markStepCompleted('network-selection')\n  }\n  \n  /**\n   * Wallet setup step\n   */\n  private async walletSetupStep(): Promise<void> {\n    console.log('')\n    console.log(stepIndicator(3, this.progress.totalSteps, 'Wallet Setup'))\n    \n    // Check if user already has a wallet\n    const activeWallet = this.walletService.getActiveWallet()\n    if (activeWallet) {\n      console.log(successBox('Wallet Already Configured', [\n        `Active wallet: ${activeWallet.metadata.name}`,\n        `Address: ${activeWallet.metadata.address}`,\n        'You can create additional wallets anytime with \"gs wallet create\"'\n      ]))\n      this.markStepCompleted('wallet-setup')\n      return\n    }\n    \n    console.log(infoBox('Wallet Setup', [\n      'A wallet is required to interact with the Solana blockchain.',\n      'Your wallet will store your SOL and manage your transactions.',\n      'We\\'ll create a secure wallet with a recovery phrase.'\n    ]))\n    \n    const walletChoice = await select({\n      message: 'How would you like to set up your wallet?',\n      options: [\n        { \n          value: 'create', \n          label: 'üÜï Create New Wallet', \n          hint: 'Generate a new wallet with recovery phrase' \n        },\n        { \n          value: 'import', \n          label: 'üì• Import Existing Wallet', \n          hint: 'Import from seed phrase or private key' \n        },\n        { \n          value: 'skip', \n          label: '‚è≠Ô∏è  Skip for Now', \n          hint: 'Configure wallet later' \n        }\n      ]\n    })\n    \n    if (isCancel(walletChoice)) {\n      cancel('Setup cancelled')\n      process.exit(0)\n    }\n    \n    if (walletChoice === 'skip') {\n      this.markStepSkipped('wallet-setup')\n      return\n    }\n    \n    const s = spinner()\n    \n    if (walletChoice === 'create') {\n      s.start('Creating your wallet...')\n      \n      const { wallet, mnemonic } = await this.walletService.createWallet(\n        'default',\n        this.config.network || 'devnet'\n      )\n      \n      s.stop('‚úÖ Wallet created!')\n      \n      // Show seed phrase prominently\n      console.log('')\n      console.log(warningBox('üîê IMPORTANT: Save Your Recovery Phrase', [\n        'Write down these 24 words in order and store them safely.',\n        'This is the ONLY way to recover your wallet if lost.',\n        'Never share this phrase with anyone.'\n      ]))\n      \n      console.log('')\n      console.log(infoBox('Your Recovery Phrase', mnemonic.split(' ').map((word, i) => \n        `${(i + 1).toString().padStart(2, ' ')}. ${word}`\n      ).join('\\n')))\n      \n      const confirmed = await confirm({\n        message: 'Have you written down your recovery phrase safely?',\n        active: 'Yes, I have saved it',\n        inactive: 'No, let me write it down'\n      })\n      \n      if (isCancel(confirmed) || !confirmed) {\n        console.log(chalk.yellow('\\n‚ö†Ô∏è  Please save your recovery phrase before continuing.'))\n        console.log('Your wallet has been created but not activated until you confirm.')\n        process.exit(0)\n      }\n      \n      console.log(successBox('Wallet Successfully Created', [\n        `Name: ${wallet.metadata.name}`,\n        `Address: ${wallet.metadata.address}`,\n        `Network: ${wallet.metadata.network}`\n      ]))\n      \n    } else if (walletChoice === 'import') {\n      const importType = await select({\n        message: 'What would you like to import?',\n        options: [\n          { value: 'mnemonic', label: 'üìù Recovery Phrase (24 words)', hint: 'Most common' },\n          { value: 'private-key', label: 'üîë Private Key', hint: 'Array of numbers' }\n        ]\n      })\n      \n      if (isCancel(importType)) {\n        this.markStepSkipped('wallet-setup')\n        return\n      }\n      \n      if (importType === 'mnemonic') {\n        const mnemonic = await text({\n          message: 'Enter your 24-word recovery phrase:',\n          placeholder: 'word1 word2 word3 ...',\n          validate: (value) => {\n            if (!value) return 'Recovery phrase is required'\n            const words = value.trim().split(/\\s+/)\n            if (words.length !== 24) return 'Please enter exactly 24 words'\n            return\n          }\n        })\n        \n        if (isCancel(mnemonic)) {\n          this.markStepSkipped('wallet-setup')\n          return\n        }\n        \n        s.start('Importing wallet from recovery phrase...')\n        \n        try {\n          const wallet = await this.walletService.importWallet(\n            'imported',\n            mnemonic as string,\n            this.config.network || 'devnet'\n          )\n          \n          s.stop('‚úÖ Wallet imported!')\n          \n          console.log(successBox('Wallet Successfully Imported', [\n            `Name: ${wallet.metadata.name}`,\n            `Address: ${wallet.metadata.address}`,\n            `Network: ${wallet.metadata.network}`\n          ]))\n          \n        } catch (error) {\n          s.stop('‚ùå Import failed')\n          console.log(chalk.red('Failed to import wallet: ' + (error instanceof Error ? error.message : 'Unknown error')))\n          this.markStepSkipped('wallet-setup')\n          return\n        }\n      }\n    }\n    \n    this.markStepCompleted('wallet-setup')\n  }\n  \n  /**\n   * Funding step\n   */\n  private async fundingStep(): Promise<void> {\n    console.log('')\n    console.log(stepIndicator(4, this.progress.totalSteps, 'Funding Your Wallet'))\n    \n    const activeWallet = this.walletService.getActiveWallet()\n    if (!activeWallet) {\n      console.log(warningBox('No Wallet Found', [\n        'Skipping funding step - wallet not configured'\n      ]))\n      this.markStepSkipped('funding')\n      return\n    }\n    \n    console.log(infoBox('Why Do You Need SOL?', [\n      'SOL is Solana\\'s native cryptocurrency needed for:',\n      '‚Ä¢ Transaction fees (very small, ~$0.00025 each)',\n      '‚Ä¢ Creating accounts and storing data',\n      '‚Ä¢ Participating in the agent economy'\n    ]))\n    \n    // Check current balance\n    const s = spinner()\n    s.start('Checking your current balance...')\n    \n    try {\n      const { client, wallet } = await initializeClient(this.config.network)\n      const rpc = client.config.rpc\n      const balanceResponse = await rpc.getBalance(wallet.address).send()\n      const balance = balanceResponse.value\n      \n      s.stop('‚úÖ Balance checked')\n      \n      if (balance > BigInt(10000000)) { // > 0.01 SOL\n        console.log(successBox('Wallet Funded', [\n          `Current balance: ${(Number(balance) / 1e9).toFixed(4)} SOL`,\n          'You have enough SOL to get started!'\n        ]))\n        this.markStepCompleted('funding')\n        return\n      }\n      \n      // Need funding\n      if (this.config.network === 'devnet') {\n        console.log(infoBox('Get Free SOL', [\n          'On devnet, you can get free SOL for testing.',\n          'We\\'ll request some SOL from the faucet for you.'\n        ]))\n        \n        const shouldFund = this.config.autoFaucet || await confirm({\n          message: 'Request free SOL from the faucet?',\n          active: 'Yes, get free SOL',\n          inactive: 'No, I\\'ll fund it myself'\n        })\n        \n        if (!isCancel(shouldFund) && shouldFund) {\n          const faucetSpinner = spinner()\n          faucetSpinner.start('Requesting SOL from faucet...')\n          \n          try {\n            // Import faucet functionality\n            const { requestAirdrop } = await import('../commands/faucet.js')\n            await requestAirdrop(wallet.address, 1000000000) // 1 SOL\n            \n            faucetSpinner.stop('‚úÖ Received 1 SOL from faucet!')\n            \n            console.log(successBox('Wallet Funded', [\n              'Received 1 SOL from the devnet faucet',\n              'You\\'re ready to start using GhostSpeak!'\n            ]))\n            \n          } catch (error) {\n            faucetSpinner.stop('‚ùå Faucet request failed')\n            console.log(warningBox('Faucet Failed', [\n              'You can try again later with: gs faucet --save',\n              'Or fund your wallet manually'\n            ]))\n          }\n        }\n      } else {\n        console.log(warningBox('Wallet Needs Funding', [\n          `Current balance: ${(Number(balance) / 1e9).toFixed(4)} SOL`,\n          'You need SOL to interact with the blockchain.',\n          'Transfer SOL from an exchange or another wallet.'\n        ]))\n      }\n      \n    } catch (error) {\n      s.stop('‚ùå Balance check failed')\n      console.log(chalk.yellow('Unable to check balance. You may need to fund your wallet manually.'))\n    }\n    \n    this.markStepCompleted('funding')\n  }\n  \n  /**\n   * First agent creation step\n   */\n  private async firstAgentStep(): Promise<void> {\n    console.log('')\n    console.log(stepIndicator(5, this.progress.totalSteps, 'Create Your First Agent'))\n    \n    console.log(infoBox('AI Agents in GhostSpeak', [\n      'Agents are AI entities that can:',\n      '‚Ä¢ Provide services in the marketplace',\n      '‚Ä¢ Complete tasks and earn payments',\n      '‚Ä¢ Communicate with other agents',\n      '‚Ä¢ Participate in the decentralized economy'\n    ]))\n    \n    const createAgent = await confirm({\n      message: 'Would you like to create your first agent now?',\n      active: 'Yes, create an agent',\n      inactive: 'Skip for now'\n    })\n    \n    if (isCancel(createAgent) || !createAgent) {\n      console.log(infoBox('Agent Creation Skipped', [\n        'You can create an agent anytime with: gs agent register',\n        'Agents are required to provide services in the marketplace'\n      ]))\n      this.markStepSkipped('first-agent')\n      return\n    }\n    \n    // Check if we can afford agent creation\n    try {\n      const activeWallet = this.walletService.getActiveWallet()\n      if (activeWallet) {\n        const balanceInfo = await estimateAndDisplay(\n          'agent-register',\n          activeWallet.metadata.address as any,\n          undefined,\n          { showBreakdown: false }\n        )\n        \n        if (!balanceInfo.isAffordable) {\n          console.log(warningBox('Insufficient Funds', [\n            'You need more SOL to create an agent.',\n            'Fund your wallet first, then create an agent with: gs agent register'\n          ]))\n          this.markStepSkipped('first-agent')\n          return\n        }\n      }\n    } catch (error) {\n      // Continue anyway\n    }\n    \n    // Basic agent creation (simplified for onboarding)\n    console.log(chalk.bold('\\nü§ñ Let\\'s create your first agent!'))\n    console.log(chalk.gray('This will be a simplified setup. You can customize more later.\\n'))\n    \n    const agentName = await text({\n      message: 'What should we call your agent?',\n      placeholder: 'My AI Assistant',\n      validate: (value) => {\n        if (!value) return 'Name is required'\n        if (value.length < 3) return 'Name must be at least 3 characters'\n        if (value.length > 50) return 'Name must be less than 50 characters'\n      }\n    })\n    \n    if (isCancel(agentName)) {\n      this.markStepSkipped('first-agent')\n      return\n    }\n    \n    const agentType = await select({\n      message: 'What type of services will your agent provide?',\n      options: [\n        { value: 'assistant', label: 'ü§ñ General Assistant', hint: 'Help with various tasks' },\n        { value: 'analyst', label: 'üìä Data Analyst', hint: 'Data processing and insights' },\n        { value: 'writer', label: '‚úçÔ∏è  Content Writer', hint: 'Writing and content creation' },\n        { value: 'developer', label: 'üíª Developer', hint: 'Code and technical tasks' },\n        { value: 'other', label: 'üéØ Other', hint: 'Specialized services' }\n      ]\n    })\n    \n    if (isCancel(agentType)) {\n      this.markStepSkipped('first-agent')\n      return\n    }\n    \n    const agentSpinner = spinner()\n    agentSpinner.start('Creating your agent...')\n    \n    try {\n      // This would normally call the agent registration command\n      // For now, we'll simulate it\n      await new Promise(resolve => setTimeout(resolve, 2000))\n      \n      agentSpinner.stop('‚úÖ Agent created successfully!')\n      \n      console.log(successBox('Your First Agent is Ready!', [\n        `Name: ${agentName}`,\n        `Type: ${agentType}`,\n        'Your agent can now provide services in the marketplace',\n        'Create service listings with: gs marketplace create'\n      ]))\n      \n    } catch (error) {\n      agentSpinner.stop('‚ùå Agent creation failed')\n      console.log(chalk.red('Failed to create agent: ' + (error instanceof Error ? error.message : 'Unknown error')))\n      console.log(chalk.gray('You can try again later with: gs agent register'))\n    }\n    \n    this.markStepCompleted('first-agent')\n  }\n  \n  /**\n   * Marketplace tour step\n   */\n  private async marketplaceTourStep(): Promise<void> {\n    console.log('')\n    console.log(stepIndicator(6, this.progress.totalSteps, 'Marketplace Overview'))\n    \n    console.log(infoBox('The GhostSpeak Marketplace', [\n      'This is where the magic happens:',\n      '‚Ä¢ Browse services offered by AI agents',\n      '‚Ä¢ Purchase services with secure escrow payments',\n      '‚Ä¢ List your own agent\\'s services',\n      '‚Ä¢ Post jobs for agents to apply to'\n    ]))\n    \n    const takeTour = await confirm({\n      message: 'Would you like a quick tour of available commands?',\n      active: 'Yes, show me around',\n      inactive: 'No, I\\'ll explore myself'\n    })\n    \n    if (!isCancel(takeTour) && takeTour) {\n      console.log('')\n      console.log(chalk.bold('üó∫Ô∏è  Quick Command Reference:'))\n      console.log('')\n      \n      const commands = [\n        { cmd: 'gs marketplace list', desc: 'Browse available services' },\n        { cmd: 'gs marketplace search', desc: 'Search for specific services' },\n        { cmd: 'gs marketplace create', desc: 'List your agent\\'s services' },\n        { cmd: 'gs escrow create', desc: 'Create secure payments' },\n        { cmd: 'gs wallet balance', desc: 'Check your SOL balance' },\n        { cmd: 'gs --interactive', desc: 'Interactive menu mode' }\n      ]\n      \n      commands.forEach(({ cmd, desc }) => {\n        console.log(`  ${chalk.cyan(cmd.padEnd(25))} ${chalk.gray(desc)}`)\n      })\n      \n      console.log('')\n      console.log(chalk.bold('üí° Pro Tips:'))\n      console.log(chalk.gray('  ‚Ä¢ Use shortcuts like \"gs m\" for marketplace'))\n      console.log(chalk.gray('  ‚Ä¢ Add --help to any command for more info'))\n      console.log(chalk.gray('  ‚Ä¢ Check transaction history with \"gs tx\"'))\n    }\n    \n    this.markStepCompleted('marketplace-tour')\n  }\n  \n  /**\n   * Completion step\n   */\n  private async completionStep(): Promise<void> {\n    console.log('')\n    console.log(stepIndicator(7, this.progress.totalSteps, 'Setup Complete'))\n    \n    const completedCount = this.progress.completedSteps.size\n    const skippedCount = this.progress.skippedSteps.size\n    \n    console.log(successBox('üéâ Welcome to GhostSpeak!', [\n      `Setup completed: ${completedCount}/${this.progress.totalSteps} steps`,\n      skippedCount > 0 ? `Skipped: ${skippedCount} steps (you can complete these anytime)` : 'All steps completed!',\n      'You\\'re ready to start using the AI agent economy'\n    ]))\n    \n    console.log('')\n    console.log(chalk.bold('üöÄ What\\'s Next?'))\n    console.log('')\n    \n    const nextSteps = [\n      '1. Browse the marketplace: gs marketplace list',\n      '2. Create a service listing: gs marketplace create',\n      '3. Check your agent status: gs agent list',\n      '4. Join our community: https://discord.gg/ghostspeak'\n    ]\n    \n    nextSteps.forEach(step => {\n      console.log(chalk.gray('  ' + step))\n    })\n    \n    console.log('')\n    console.log(divider())\n    console.log('')\n    \n    // Save completion status\n    await this.saveProgress()\n    \n    outro(chalk.green('Setup complete! Happy agent building! ü§ñ'))\n  }\n  \n  /**\n   * Mark a step as completed\n   */\n  private markStepCompleted(step: OnboardingStep): void {\n    this.progress.completedSteps.add(step)\n    this.progress.step = Math.max(this.progress.step, ONBOARDING_STEPS.indexOf(step) + 2)\n  }\n  \n  /**\n   * Mark a step as skipped\n   */\n  private markStepSkipped(step: OnboardingStep): void {\n    this.progress.skippedSteps.add(step)\n    this.progress.step = Math.max(this.progress.step, ONBOARDING_STEPS.indexOf(step) + 2)\n  }\n  \n  /**\n   * Save progress to file\n   */\n  private async saveProgress(): Promise<void> {\n    try {\n      const dir = join(homedir(), '.ghostspeak')\n      if (!existsSync(dir)) {\n        mkdirSync(dir, { recursive: true })\n      }\n      \n      const progressFile = join(dir, 'onboarding-progress.json')\n      const data = {\n        ...this.progress,\n        completedSteps: Array.from(this.progress.completedSteps),\n        skippedSteps: Array.from(this.progress.skippedSteps),\n        config: this.config,\n        lastUpdated: Date.now()\n      }\n      \n      writeFileSync(progressFile, JSON.stringify(data, null, 2))\n    } catch (error) {\n      // Ignore errors saving progress\n    }\n  }\n}\n\n/**\n * Check if user has completed onboarding\n */\nexport function hasCompletedOnboarding(): boolean {\n  try {\n    const progressFile = join(homedir(), '.ghostspeak', 'onboarding-progress.json')\n    if (!existsSync(progressFile)) return false\n    \n    const data = JSON.parse(require('fs').readFileSync(progressFile, 'utf-8'))\n    return data.completedSteps.includes('completion')\n  } catch {\n    return false\n  }\n}\n\n/**\n * Start onboarding flow\n */\nexport async function startOnboarding(config?: OnboardingConfig): Promise<void> {\n  const onboarding = new OnboardingService(config)\n  await onboarding.start()\n}"