name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        registry-url: 'https://registry.npmjs.org'

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown

    - name: Install wasm-pack
      run: cargo install wasm-pack

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.npm
          ~/.cache/bun
          ~/.cargo/registry
          ~/.cargo/git
          src/wasm/crypto-wasm/target
        key: ${{ runner.os }}-release-${{ hashFiles('**/package.json', '**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-release-

    - name: Install dependencies
      run: bun install --frozen-lockfile

    - name: Type check
      run: bun run type-check

    - name: Lint
      run: bun run lint

    - name: Run tests
      run: bun run test:ci

    - name: Build production package
      run: NODE_ENV=production bun run build

    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Update package version
      run: |
        bun --version
        cat package.json | bun -p "JSON.stringify({...JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf8')), version: '${{ steps.version.outputs.VERSION }}'}, null, 2)" > package.json.tmp
        mv package.json.tmp package.json

    - name: Publish to npm
      run: npm publish --provenance
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.version.outputs.VERSION }}
        body: |
          ## Changes in ${{ steps.version.outputs.VERSION }}
          
          See [CHANGELOG.md](CHANGELOG.md) for detailed changes.
          
          ## Installation
          ```bash
          npm install @ghostspeak/sdk@${{ steps.version.outputs.VERSION }}
          # or
          bun add @ghostspeak/sdk@${{ steps.version.outputs.VERSION }}
          ```
          
          ## Package Details
          - **TypeScript SDK** for GhostSpeak AI Agent Commerce Protocol
          - **Production Ready** with 0 TypeScript errors
          - **Full Solana Web3.js v2** integration
          - **SPL Token-2022** support with confidential transfers
          - **ElGamal encryption** with bulletproofs
          - **Compressed NFT** support
        draft: false
        prerelease: false