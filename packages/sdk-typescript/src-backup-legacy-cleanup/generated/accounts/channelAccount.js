/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
} from '@solana/kit';
import {
  getChannelVisibilityDecoder,
  getChannelVisibilityEncoder,
} from '../types';
export const CHANNEL_ACCOUNT_DISCRIMINATOR = new Uint8Array([
  140, 232, 26, 78, 89, 26, 17, 244,
]);
export function getChannelAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CHANNEL_ACCOUNT_DISCRIMINATOR
  );
}
export function getChannelAccountEncoder() {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['creator', getAddressEncoder()],
      ['feePerMessage', getU64Encoder()],
      ['escrowBalance', getU64Encoder()],
      ['createdAt', getI64Encoder()],
      ['maxParticipants', getU32Encoder()],
      ['currentParticipants', getU32Encoder()],
      ['name', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['description', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['visibility', getChannelVisibilityEncoder()],
      ['isActive', getBooleanEncoder()],
      ['lastSyncTimestamp', getI64Encoder()],
      ['totalCompressedMessages', getU64Encoder()],
      ['compressedDataSize', getU64Encoder()],
      ['bump', getU8Encoder()],
      ['reserved', getArrayEncoder(getU8Encoder(), { size: 5 })],
    ]),
    (value) => ({ ...value, discriminator: CHANNEL_ACCOUNT_DISCRIMINATOR })
  );
}
export function getChannelAccountDecoder() {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['creator', getAddressDecoder()],
    ['feePerMessage', getU64Decoder()],
    ['escrowBalance', getU64Decoder()],
    ['createdAt', getI64Decoder()],
    ['maxParticipants', getU32Decoder()],
    ['currentParticipants', getU32Decoder()],
    ['name', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['description', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['visibility', getChannelVisibilityDecoder()],
    ['isActive', getBooleanDecoder()],
    ['lastSyncTimestamp', getI64Decoder()],
    ['totalCompressedMessages', getU64Decoder()],
    ['compressedDataSize', getU64Decoder()],
    ['bump', getU8Decoder()],
    ['reserved', getArrayDecoder(getU8Decoder(), { size: 5 })],
  ]);
}
export function getChannelAccountCodec() {
  return combineCodec(getChannelAccountEncoder(), getChannelAccountDecoder());
}
export function decodeChannelAccount(encodedAccount) {
  return decodeAccount(encodedAccount, getChannelAccountDecoder());
}
export async function fetchChannelAccount(rpc, address, config) {
  const maybeAccount = await fetchMaybeChannelAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}
export async function fetchMaybeChannelAccount(rpc, address, config) {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeChannelAccount(maybeAccount);
}
export async function fetchAllChannelAccount(rpc, addresses, config) {
  const maybeAccounts = await fetchAllMaybeChannelAccount(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}
export async function fetchAllMaybeChannelAccount(rpc, addresses, config) {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeChannelAccount(maybeAccount)
  );
}
//# sourceMappingURL=channelAccount.js.map
