/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from '@solana/kit';
export const CHANNEL_INVITATION_DISCRIMINATOR = new Uint8Array([
  103, 36, 72, 198, 173, 128, 0, 255,
]);
export function getChannelInvitationDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CHANNEL_INVITATION_DISCRIMINATOR
  );
}
export function getChannelInvitationEncoder() {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['channel', getAddressEncoder()],
      ['inviter', getAddressEncoder()],
      ['invitee', getAddressEncoder()],
      ['invitationHash', getArrayEncoder(getU8Encoder(), { size: 32 })],
      ['createdAt', getI64Encoder()],
      ['expiresAt', getI64Encoder()],
      ['nonce', getU64Encoder()],
      ['isAccepted', getBooleanEncoder()],
      ['isUsed', getBooleanEncoder()],
      ['bump', getU8Encoder()],
      ['reserved', getArrayEncoder(getU8Encoder(), { size: 5 })],
    ]),
    (value) => ({ ...value, discriminator: CHANNEL_INVITATION_DISCRIMINATOR })
  );
}
export function getChannelInvitationDecoder() {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['channel', getAddressDecoder()],
    ['inviter', getAddressDecoder()],
    ['invitee', getAddressDecoder()],
    ['invitationHash', getArrayDecoder(getU8Decoder(), { size: 32 })],
    ['createdAt', getI64Decoder()],
    ['expiresAt', getI64Decoder()],
    ['nonce', getU64Decoder()],
    ['isAccepted', getBooleanDecoder()],
    ['isUsed', getBooleanDecoder()],
    ['bump', getU8Decoder()],
    ['reserved', getArrayDecoder(getU8Decoder(), { size: 5 })],
  ]);
}
export function getChannelInvitationCodec() {
  return combineCodec(
    getChannelInvitationEncoder(),
    getChannelInvitationDecoder()
  );
}
export function decodeChannelInvitation(encodedAccount) {
  return decodeAccount(encodedAccount, getChannelInvitationDecoder());
}
export async function fetchChannelInvitation(rpc, address, config) {
  const maybeAccount = await fetchMaybeChannelInvitation(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}
export async function fetchMaybeChannelInvitation(rpc, address, config) {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeChannelInvitation(maybeAccount);
}
export async function fetchAllChannelInvitation(rpc, addresses, config) {
  const maybeAccounts = await fetchAllMaybeChannelInvitation(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}
export async function fetchAllMaybeChannelInvitation(rpc, addresses, config) {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeChannelInvitation(maybeAccount)
  );
}
//# sourceMappingURL=channelInvitation.js.map
