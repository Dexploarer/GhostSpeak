/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
} from '@solana/kit';
import { getMessageTypeDecoder, getMessageTypeEncoder } from '../types';
export const CHANNEL_MESSAGE_DISCRIMINATOR = new Uint8Array([
  172, 149, 77, 27, 88, 227, 80, 87,
]);
export function getChannelMessageDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CHANNEL_MESSAGE_DISCRIMINATOR
  );
}
export function getChannelMessageEncoder() {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['channel', getAddressEncoder()],
      ['sender', getAddressEncoder()],
      ['replyTo', getOptionEncoder(getAddressEncoder())],
      ['createdAt', getI64Encoder()],
      ['editedAt', getOptionEncoder(getI64Encoder())],
      ['content', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['messageType', getMessageTypeEncoder()],
      ['bump', getU8Encoder()],
      ['reserved', getArrayEncoder(getU8Encoder(), { size: 6 })],
    ]),
    (value) => ({ ...value, discriminator: CHANNEL_MESSAGE_DISCRIMINATOR })
  );
}
export function getChannelMessageDecoder() {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['channel', getAddressDecoder()],
    ['sender', getAddressDecoder()],
    ['replyTo', getOptionDecoder(getAddressDecoder())],
    ['createdAt', getI64Decoder()],
    ['editedAt', getOptionDecoder(getI64Decoder())],
    ['content', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['messageType', getMessageTypeDecoder()],
    ['bump', getU8Decoder()],
    ['reserved', getArrayDecoder(getU8Decoder(), { size: 6 })],
  ]);
}
export function getChannelMessageCodec() {
  return combineCodec(getChannelMessageEncoder(), getChannelMessageDecoder());
}
export function decodeChannelMessage(encodedAccount) {
  return decodeAccount(encodedAccount, getChannelMessageDecoder());
}
export async function fetchChannelMessage(rpc, address, config) {
  const maybeAccount = await fetchMaybeChannelMessage(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}
export async function fetchMaybeChannelMessage(rpc, address, config) {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeChannelMessage(maybeAccount);
}
export async function fetchAllChannelMessage(rpc, addresses, config) {
  const maybeAccounts = await fetchAllMaybeChannelMessage(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}
export async function fetchAllMaybeChannelMessage(rpc, addresses, config) {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeChannelMessage(maybeAccount)
  );
}
//# sourceMappingURL=channelMessage.js.map
