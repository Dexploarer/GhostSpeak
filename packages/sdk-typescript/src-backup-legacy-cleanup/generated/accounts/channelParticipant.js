/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from '@solana/kit';
export const CHANNEL_PARTICIPANT_DISCRIMINATOR = new Uint8Array([
  147, 89, 184, 207, 10, 190, 78, 145,
]);
export function getChannelParticipantDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CHANNEL_PARTICIPANT_DISCRIMINATOR
  );
}
export function getChannelParticipantEncoder() {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['channel', getAddressEncoder()],
      ['participant', getAddressEncoder()],
      ['joinedAt', getI64Encoder()],
      ['messagesSent', getU64Encoder()],
      ['lastMessageAt', getI64Encoder()],
      ['isActive', getBooleanEncoder()],
      ['bump', getU8Encoder()],
      ['reserved', getArrayEncoder(getU8Encoder(), { size: 6 })],
    ]),
    (value) => ({ ...value, discriminator: CHANNEL_PARTICIPANT_DISCRIMINATOR })
  );
}
export function getChannelParticipantDecoder() {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['channel', getAddressDecoder()],
    ['participant', getAddressDecoder()],
    ['joinedAt', getI64Decoder()],
    ['messagesSent', getU64Decoder()],
    ['lastMessageAt', getI64Decoder()],
    ['isActive', getBooleanDecoder()],
    ['bump', getU8Decoder()],
    ['reserved', getArrayDecoder(getU8Decoder(), { size: 6 })],
  ]);
}
export function getChannelParticipantCodec() {
  return combineCodec(
    getChannelParticipantEncoder(),
    getChannelParticipantDecoder()
  );
}
export function decodeChannelParticipant(encodedAccount) {
  return decodeAccount(encodedAccount, getChannelParticipantDecoder());
}
export async function fetchChannelParticipant(rpc, address, config) {
  const maybeAccount = await fetchMaybeChannelParticipant(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}
export async function fetchMaybeChannelParticipant(rpc, address, config) {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeChannelParticipant(maybeAccount);
}
export async function fetchAllChannelParticipant(rpc, addresses, config) {
  const maybeAccounts = await fetchAllMaybeChannelParticipant(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}
export async function fetchAllMaybeChannelParticipant(rpc, addresses, config) {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeChannelParticipant(maybeAccount)
  );
}
//# sourceMappingURL=channelParticipant.js.map
