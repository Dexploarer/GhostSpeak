/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from '@solana/kit';
import {
  getMessageStatusDecoder,
  getMessageStatusEncoder,
  getMessageTypeDecoder,
  getMessageTypeEncoder,
} from '../types';
export const MESSAGE_ACCOUNT_DISCRIMINATOR = new Uint8Array([
  97, 144, 24, 58, 225, 40, 89, 223,
]);
export function getMessageAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    MESSAGE_ACCOUNT_DISCRIMINATOR
  );
}
export function getMessageAccountEncoder() {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['sender', getAddressEncoder()],
      ['recipient', getAddressEncoder()],
      ['payloadHash', getArrayEncoder(getU8Encoder(), { size: 32 })],
      ['createdAt', getI64Encoder()],
      ['expiresAt', getI64Encoder()],
      ['messageType', getMessageTypeEncoder()],
      ['status', getMessageStatusEncoder()],
      ['bump', getU8Encoder()],
      ['reserved', getArrayEncoder(getU8Encoder(), { size: 5 })],
    ]),
    (value) => ({ ...value, discriminator: MESSAGE_ACCOUNT_DISCRIMINATOR })
  );
}
export function getMessageAccountDecoder() {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['sender', getAddressDecoder()],
    ['recipient', getAddressDecoder()],
    ['payloadHash', getArrayDecoder(getU8Decoder(), { size: 32 })],
    ['createdAt', getI64Decoder()],
    ['expiresAt', getI64Decoder()],
    ['messageType', getMessageTypeDecoder()],
    ['status', getMessageStatusDecoder()],
    ['bump', getU8Decoder()],
    ['reserved', getArrayDecoder(getU8Decoder(), { size: 5 })],
  ]);
}
export function getMessageAccountCodec() {
  return combineCodec(getMessageAccountEncoder(), getMessageAccountDecoder());
}
export function decodeMessageAccount(encodedAccount) {
  return decodeAccount(encodedAccount, getMessageAccountDecoder());
}
export async function fetchMessageAccount(rpc, address, config) {
  const maybeAccount = await fetchMaybeMessageAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}
export async function fetchMaybeMessageAccount(rpc, address, config) {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeMessageAccount(maybeAccount);
}
export async function fetchAllMessageAccount(rpc, addresses, config) {
  const maybeAccounts = await fetchAllMaybeMessageAccount(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}
export async function fetchAllMaybeMessageAccount(rpc, addresses, config) {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeMessageAccount(maybeAccount)
  );
}
//# sourceMappingURL=messageAccount.js.map
