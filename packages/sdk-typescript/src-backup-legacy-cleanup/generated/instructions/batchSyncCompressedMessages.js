/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from '@solana/kit';
import { POD_COM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory } from '../shared';
export const BATCH_SYNC_COMPRESSED_MESSAGES_DISCRIMINATOR = new Uint8Array([
  217, 170, 84, 220, 234, 64, 208, 239,
]);
export function getBatchSyncCompressedMessagesDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    BATCH_SYNC_COMPRESSED_MESSAGES_DISCRIMINATOR
  );
}
export function getBatchSyncCompressedMessagesInstructionDataEncoder() {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      [
        'messageHashes',
        getArrayEncoder(getArrayEncoder(getU8Encoder(), { size: 32 })),
      ],
      ['syncTimestamp', getI64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: BATCH_SYNC_COMPRESSED_MESSAGES_DISCRIMINATOR,
    })
  );
}
export function getBatchSyncCompressedMessagesInstructionDataDecoder() {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    [
      'messageHashes',
      getArrayDecoder(getArrayDecoder(getU8Decoder(), { size: 32 })),
    ],
    ['syncTimestamp', getI64Decoder()],
  ]);
}
export function getBatchSyncCompressedMessagesInstructionDataCodec() {
  return combineCodec(
    getBatchSyncCompressedMessagesInstructionDataEncoder(),
    getBatchSyncCompressedMessagesInstructionDataDecoder()
  );
}
export function getBatchSyncCompressedMessagesInstruction(input, config) {
  // Program address.
  const programAddress = config?.programAddress ?? POD_COM_PROGRAM_ADDRESS;
  // Original accounts.
  const originalAccounts = {
    channelAccount: { value: input.channelAccount ?? null, isWritable: true },
    feePayer: { value: input.feePayer ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    compressionProgram: {
      value: input.compressionProgram ?? null,
      isWritable: false,
    },
    registeredProgramId: {
      value: input.registeredProgramId ?? null,
      isWritable: false,
    },
    noopProgram: { value: input.noopProgram ?? null, isWritable: false },
    accountCompressionAuthority: {
      value: input.accountCompressionAuthority ?? null,
      isWritable: false,
    },
    accountCompressionProgram: {
      value: input.accountCompressionProgram ?? null,
      isWritable: false,
    },
    merkleTree: { value: input.merkleTree ?? null, isWritable: false },
    nullifierQueue: { value: input.nullifierQueue ?? null, isWritable: false },
    cpiAuthorityPda: {
      value: input.cpiAuthorityPda ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts;
  // Original args.
  const args = { ...input };
  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value = '11111111111111111111111111111111';
  }
  if (!accounts.compressionProgram.value) {
    accounts.compressionProgram.value =
      'cmtDvXumGCrqC1Age74AVPhSRVXJMd8PJS91L8KbNCK';
  }
  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.channelAccount),
      getAccountMeta(accounts.feePayer),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.compressionProgram),
      getAccountMeta(accounts.registeredProgramId),
      getAccountMeta(accounts.noopProgram),
      getAccountMeta(accounts.accountCompressionAuthority),
      getAccountMeta(accounts.accountCompressionProgram),
      getAccountMeta(accounts.merkleTree),
      getAccountMeta(accounts.nullifierQueue),
      getAccountMeta(accounts.cpiAuthorityPda),
    ],
    programAddress,
    data: getBatchSyncCompressedMessagesInstructionDataEncoder().encode(args),
  };
  return instruction;
}
export function parseBatchSyncCompressedMessagesInstruction(instruction) {
  if (instruction.accounts.length < 12) {
    throw new Error(
      'BatchSyncCompressedMessages instruction: Insufficient accounts provided. Expected at least required accounts for batch message synchronization'
    );
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts[accountIndex];
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      channelAccount: getNextAccount(),
      feePayer: getNextAccount(),
      authority: getNextAccount(),
      systemProgram: getNextAccount(),
      compressionProgram: getNextAccount(),
      registeredProgramId: getNextAccount(),
      noopProgram: getNextAccount(),
      accountCompressionAuthority: getNextAccount(),
      accountCompressionProgram: getNextAccount(),
      merkleTree: getNextAccount(),
      nullifierQueue: getNextAccount(),
      cpiAuthorityPda: getNextAccount(),
    },
    data: getBatchSyncCompressedMessagesInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
//# sourceMappingURL=batchSyncCompressedMessages.js.map
