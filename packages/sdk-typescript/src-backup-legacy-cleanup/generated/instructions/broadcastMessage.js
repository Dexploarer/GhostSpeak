/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
} from '@solana/kit';
import { POD_COM_PROGRAM_ADDRESS } from '../programs';
import { expectAddress, expectSome, getAccountMetaFactory } from '../shared';
import { getMessageTypeDecoder, getMessageTypeEncoder } from '../types';
export const BROADCAST_MESSAGE_DISCRIMINATOR = new Uint8Array([
  253, 144, 203, 42, 219, 122, 147, 97,
]);
export function getBroadcastMessageDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    BROADCAST_MESSAGE_DISCRIMINATOR
  );
}
export function getBroadcastMessageInstructionDataEncoder() {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['content', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['messageType', getMessageTypeEncoder()],
      ['replyTo', getOptionEncoder(getAddressEncoder())],
      ['nonce', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: BROADCAST_MESSAGE_DISCRIMINATOR })
  );
}
export function getBroadcastMessageInstructionDataDecoder() {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['content', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['messageType', getMessageTypeDecoder()],
    ['replyTo', getOptionDecoder(getAddressDecoder())],
    ['nonce', getU64Decoder()],
  ]);
}
export function getBroadcastMessageInstructionDataCodec() {
  return combineCodec(
    getBroadcastMessageInstructionDataEncoder(),
    getBroadcastMessageInstructionDataDecoder()
  );
}
export async function getBroadcastMessageInstructionAsync(input, config) {
  // Program address.
  const programAddress = config?.programAddress ?? POD_COM_PROGRAM_ADDRESS;
  // Original accounts.
  const originalAccounts = {
    channelAccount: { value: input.channelAccount ?? null, isWritable: true },
    participantAccount: {
      value: input.participantAccount ?? null,
      isWritable: true,
    },
    agentAccount: { value: input.agentAccount ?? null, isWritable: false },
    messageAccount: { value: input.messageAccount ?? null, isWritable: true },
    user: { value: input.user ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts;
  // Original args.
  const args = { ...input };
  // Resolve default values.
  if (!accounts.agentAccount.value) {
    accounts.agentAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([97, 103, 101, 110, 116])),
        getAddressEncoder().encode(expectAddress(accounts.user.value)),
      ],
    });
  }
  if (!accounts.participantAccount.value) {
    accounts.participantAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([112, 97, 114, 116, 105, 99, 105, 112, 97, 110, 116])
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.channelAccount.value)
        ),
        getAddressEncoder().encode(expectAddress(accounts.agentAccount.value)),
      ],
    });
  }
  if (!accounts.messageAccount.value) {
    accounts.messageAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            99, 104, 97, 110, 110, 101, 108, 95, 109, 101, 115, 115, 97, 103,
            101,
          ])
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.channelAccount.value)
        ),
        getAddressEncoder().encode(expectAddress(accounts.user.value)),
        getU64Encoder().encode(expectSome(args.nonce)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value = '11111111111111111111111111111111';
  }
  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.channelAccount),
      getAccountMeta(accounts.participantAccount),
      getAccountMeta(accounts.agentAccount),
      getAccountMeta(accounts.messageAccount),
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getBroadcastMessageInstructionDataEncoder().encode(args),
  };
  return instruction;
}
export function getBroadcastMessageInstruction(input, config) {
  // Program address.
  const programAddress = config?.programAddress ?? POD_COM_PROGRAM_ADDRESS;
  // Original accounts.
  const originalAccounts = {
    channelAccount: { value: input.channelAccount ?? null, isWritable: true },
    participantAccount: {
      value: input.participantAccount ?? null,
      isWritable: true,
    },
    agentAccount: { value: input.agentAccount ?? null, isWritable: false },
    messageAccount: { value: input.messageAccount ?? null, isWritable: true },
    user: { value: input.user ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts;
  // Original args.
  const args = { ...input };
  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value = '11111111111111111111111111111111';
  }
  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.channelAccount),
      getAccountMeta(accounts.participantAccount),
      getAccountMeta(accounts.agentAccount),
      getAccountMeta(accounts.messageAccount),
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getBroadcastMessageInstructionDataEncoder().encode(args),
  };
  return instruction;
}
export function parseBroadcastMessageInstruction(instruction) {
  if (instruction.accounts.length < 6) {
    throw new Error(
      'BroadcastMessage instruction: Insufficient accounts provided. Expected at least required accounts'
    );
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts[accountIndex];
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      channelAccount: getNextAccount(),
      participantAccount: getNextAccount(),
      agentAccount: getNextAccount(),
      messageAccount: getNextAccount(),
      user: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getBroadcastMessageInstructionDataDecoder().decode(instruction.data),
  };
}
//# sourceMappingURL=broadcastMessage.js.map
