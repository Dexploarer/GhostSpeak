/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
} from '@solana/kit';
import { POD_COM_PROGRAM_ADDRESS } from '../programs';
import { expectAddress, expectSome, getAccountMetaFactory } from '../shared';
import {
  getChannelVisibilityDecoder,
  getChannelVisibilityEncoder,
} from '../types';
export const CREATE_CHANNEL_DISCRIMINATOR = new Uint8Array([
  37, 105, 253, 99, 87, 46, 223, 20,
]);
export function getCreateChannelDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_CHANNEL_DISCRIMINATOR
  );
}
export function getCreateChannelInstructionDataEncoder() {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['name', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['description', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['visibility', getChannelVisibilityEncoder()],
      ['maxParticipants', getU32Encoder()],
      ['feePerMessage', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CREATE_CHANNEL_DISCRIMINATOR })
  );
}
export function getCreateChannelInstructionDataDecoder() {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['name', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['description', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['visibility', getChannelVisibilityDecoder()],
    ['maxParticipants', getU32Decoder()],
    ['feePerMessage', getU64Decoder()],
  ]);
}
export function getCreateChannelInstructionDataCodec() {
  return combineCodec(
    getCreateChannelInstructionDataEncoder(),
    getCreateChannelInstructionDataDecoder()
  );
}
export async function getCreateChannelInstructionAsync(input, config) {
  // Program address.
  const programAddress = config?.programAddress ?? POD_COM_PROGRAM_ADDRESS;
  // Original accounts.
  const originalAccounts = {
    channelAccount: { value: input.channelAccount ?? null, isWritable: true },
    creator: { value: input.creator ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts;
  // Original args.
  const args = { ...input };
  // Resolve default values.
  if (!accounts.channelAccount.value) {
    accounts.channelAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([99, 104, 97, 110, 110, 101, 108])
        ),
        getAddressEncoder().encode(expectAddress(accounts.creator.value)),
        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()).encode(
          expectSome(args.name)
        ),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value = '11111111111111111111111111111111';
  }
  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.channelAccount),
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateChannelInstructionDataEncoder().encode(args),
  };
  return instruction;
}
export function getCreateChannelInstruction(input, config) {
  // Program address.
  const programAddress = config?.programAddress ?? POD_COM_PROGRAM_ADDRESS;
  // Original accounts.
  const originalAccounts = {
    channelAccount: { value: input.channelAccount ?? null, isWritable: true },
    creator: { value: input.creator ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts;
  // Original args.
  const args = { ...input };
  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value = '11111111111111111111111111111111';
  }
  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.channelAccount),
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateChannelInstructionDataEncoder().encode(args),
  };
  return instruction;
}
export function parseCreateChannelInstruction(instruction) {
  if (instruction.accounts.length < 3) {
    throw new Error(
      'CreateChannel instruction: Insufficient accounts provided. Expected at least 3 accounts (channelAccount, creator, systemProgram)'
    );
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts[accountIndex];
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      channelAccount: getNextAccount(),
      creator: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCreateChannelInstructionDataDecoder().decode(instruction.data),
  };
}
//# sourceMappingURL=createChannel.js.map
