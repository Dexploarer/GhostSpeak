/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
} from '@solana/kit';
import { POD_COM_PROGRAM_ADDRESS } from '../programs';
import { expectAddress, getAccountMetaFactory } from '../shared';
export const DEPOSIT_ESCROW_DISCRIMINATOR = new Uint8Array([
  226, 112, 158, 176, 178, 118, 153, 128,
]);
export function getDepositEscrowDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    DEPOSIT_ESCROW_DISCRIMINATOR
  );
}
export function getDepositEscrowInstructionDataEncoder() {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: DEPOSIT_ESCROW_DISCRIMINATOR })
  );
}
export function getDepositEscrowInstructionDataDecoder() {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amount', getU64Decoder()],
  ]);
}
export function getDepositEscrowInstructionDataCodec() {
  return combineCodec(
    getDepositEscrowInstructionDataEncoder(),
    getDepositEscrowInstructionDataDecoder()
  );
}
export async function getDepositEscrowInstructionAsync(input, config) {
  // Program address.
  const programAddress = config?.programAddress ?? POD_COM_PROGRAM_ADDRESS;
  // Original accounts.
  const originalAccounts = {
    escrowAccount: { value: input.escrowAccount ?? null, isWritable: true },
    channelAccount: { value: input.channelAccount ?? null, isWritable: true },
    depositor: { value: input.depositor ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts;
  // Original args.
  const args = { ...input };
  // Resolve default values.
  if (!accounts.escrowAccount.value) {
    accounts.escrowAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([101, 115, 99, 114, 111, 119])),
        getAddressEncoder().encode(
          expectAddress(accounts.channelAccount.value)
        ),
        getAddressEncoder().encode(expectAddress(accounts.depositor.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value = '11111111111111111111111111111111';
  }
  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.escrowAccount),
      getAccountMeta(accounts.channelAccount),
      getAccountMeta(accounts.depositor),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getDepositEscrowInstructionDataEncoder().encode(args),
  };
  return instruction;
}
export function getDepositEscrowInstruction(input, config) {
  // Program address.
  const programAddress = config?.programAddress ?? POD_COM_PROGRAM_ADDRESS;
  // Original accounts.
  const originalAccounts = {
    escrowAccount: { value: input.escrowAccount ?? null, isWritable: true },
    channelAccount: { value: input.channelAccount ?? null, isWritable: true },
    depositor: { value: input.depositor ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts;
  // Original args.
  const args = { ...input };
  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value = '11111111111111111111111111111111';
  }
  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.escrowAccount),
      getAccountMeta(accounts.channelAccount),
      getAccountMeta(accounts.depositor),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getDepositEscrowInstructionDataEncoder().encode(args),
  };
  return instruction;
}
export function parseDepositEscrowInstruction(instruction) {
  if (instruction.accounts.length < 4) {
    throw new Error(
      'DepositEscrow instruction: Insufficient accounts provided. Expected at least required accounts for escrow deposit'
    );
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts[accountIndex];
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      escrowAccount: getNextAccount(),
      channelAccount: getNextAccount(),
      depositor: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getDepositEscrowInstructionDataDecoder().decode(instruction.data),
  };
}
//# sourceMappingURL=depositEscrow.js.map
