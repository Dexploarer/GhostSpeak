/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from '@solana/kit';
import { POD_COM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory } from '../shared';
export const GET_CHANNEL_PARTICIPANTS_DISCRIMINATOR = new Uint8Array([
  87, 16, 96, 73, 86, 56, 98, 70,
]);
export function getGetChannelParticipantsDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    GET_CHANNEL_PARTICIPANTS_DISCRIMINATOR
  );
}
export function getGetChannelParticipantsInstructionDataEncoder() {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: GET_CHANNEL_PARTICIPANTS_DISCRIMINATOR,
    })
  );
}
export function getGetChannelParticipantsInstructionDataDecoder() {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}
export function getGetChannelParticipantsInstructionDataCodec() {
  return combineCodec(
    getGetChannelParticipantsInstructionDataEncoder(),
    getGetChannelParticipantsInstructionDataDecoder()
  );
}
export function getGetChannelParticipantsInstruction(input, config) {
  // Program address.
  const programAddress = config?.programAddress ?? POD_COM_PROGRAM_ADDRESS;
  // Original accounts.
  const originalAccounts = {
    channelAccount: { value: input.channelAccount ?? null, isWritable: false },
  };
  const accounts = originalAccounts;
  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [getAccountMeta(accounts.channelAccount)],
    programAddress,
    data: getGetChannelParticipantsInstructionDataEncoder().encode({}),
  };
  return instruction;
}
export function parseGetChannelParticipantsInstruction(instruction) {
  if (instruction.accounts.length < 1) {
    throw new Error(
      'GetChannelParticipants instruction: Insufficient accounts provided. Expected at least required accounts for participant retrieval'
    );
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts[accountIndex];
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      channelAccount: getNextAccount(),
    },
    data: getGetChannelParticipantsInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
//# sourceMappingURL=getChannelParticipants.js.map
