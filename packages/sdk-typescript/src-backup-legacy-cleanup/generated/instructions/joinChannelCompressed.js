/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from '@solana/kit';
import { POD_COM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory } from '../shared';
export const JOIN_CHANNEL_COMPRESSED_DISCRIMINATOR = new Uint8Array([
  167, 194, 203, 130, 133, 162, 10, 88,
]);
export function getJoinChannelCompressedDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    JOIN_CHANNEL_COMPRESSED_DISCRIMINATOR
  );
}
export function getJoinChannelCompressedInstructionDataEncoder() {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['metadataHash', getArrayEncoder(getU8Encoder(), { size: 32 })],
    ]),
    (value) => ({
      ...value,
      discriminator: JOIN_CHANNEL_COMPRESSED_DISCRIMINATOR,
    })
  );
}
export function getJoinChannelCompressedInstructionDataDecoder() {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['metadataHash', getArrayDecoder(getU8Decoder(), { size: 32 })],
  ]);
}
export function getJoinChannelCompressedInstructionDataCodec() {
  return combineCodec(
    getJoinChannelCompressedInstructionDataEncoder(),
    getJoinChannelCompressedInstructionDataDecoder()
  );
}
export function getJoinChannelCompressedInstruction(input, config) {
  // Program address.
  const programAddress = config?.programAddress ?? POD_COM_PROGRAM_ADDRESS;
  // Original accounts.
  const originalAccounts = {
    channelAccount: { value: input.channelAccount ?? null, isWritable: true },
    agentAccount: { value: input.agentAccount ?? null, isWritable: false },
    invitationAccount: {
      value: input.invitationAccount ?? null,
      isWritable: false,
    },
    feePayer: { value: input.feePayer ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    registeredProgramId: {
      value: input.registeredProgramId ?? null,
      isWritable: false,
    },
    noopProgram: { value: input.noopProgram ?? null, isWritable: false },
    accountCompressionAuthority: {
      value: input.accountCompressionAuthority ?? null,
      isWritable: false,
    },
    accountCompressionProgram: {
      value: input.accountCompressionProgram ?? null,
      isWritable: false,
    },
    merkleTree: { value: input.merkleTree ?? null, isWritable: false },
    nullifierQueue: { value: input.nullifierQueue ?? null, isWritable: false },
    cpiAuthorityPda: {
      value: input.cpiAuthorityPda ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts;
  // Original args.
  const args = { ...input };
  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value = '11111111111111111111111111111111';
  }
  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.channelAccount),
      getAccountMeta(accounts.agentAccount),
      getAccountMeta(accounts.invitationAccount),
      getAccountMeta(accounts.feePayer),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.registeredProgramId),
      getAccountMeta(accounts.noopProgram),
      getAccountMeta(accounts.accountCompressionAuthority),
      getAccountMeta(accounts.accountCompressionProgram),
      getAccountMeta(accounts.merkleTree),
      getAccountMeta(accounts.nullifierQueue),
      getAccountMeta(accounts.cpiAuthorityPda),
    ],
    programAddress,
    data: getJoinChannelCompressedInstructionDataEncoder().encode(args),
  };
  return instruction;
}
export function parseJoinChannelCompressedInstruction(instruction) {
  if (instruction.accounts.length < 13) {
    throw new Error(
      'JoinChannelCompressed instruction: Insufficient accounts provided. Expected at least required accounts for compressed channel joining'
    );
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts[accountIndex];
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === POD_COM_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      channelAccount: getNextAccount(),
      agentAccount: getNextAccount(),
      invitationAccount: getNextOptionalAccount(),
      feePayer: getNextAccount(),
      authority: getNextAccount(),
      systemProgram: getNextAccount(),
      registeredProgramId: getNextAccount(),
      noopProgram: getNextAccount(),
      accountCompressionAuthority: getNextAccount(),
      accountCompressionProgram: getNextAccount(),
      merkleTree: getNextAccount(),
      nullifierQueue: getNextAccount(),
      cpiAuthorityPda: getNextAccount(),
    },
    data: getJoinChannelCompressedInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
//# sourceMappingURL=joinChannelCompressed.js.map
