/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from '@solana/kit';
import { POD_COM_PROGRAM_ADDRESS } from '../programs';
import { expectAddress, getAccountMetaFactory } from '../shared';
export const LEAVE_CHANNEL_DISCRIMINATOR = new Uint8Array([
  104, 0, 75, 134, 95, 80, 68, 186,
]);
export function getLeaveChannelDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    LEAVE_CHANNEL_DISCRIMINATOR
  );
}
export function getLeaveChannelInstructionDataEncoder() {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: LEAVE_CHANNEL_DISCRIMINATOR })
  );
}
export function getLeaveChannelInstructionDataDecoder() {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}
export function getLeaveChannelInstructionDataCodec() {
  return combineCodec(
    getLeaveChannelInstructionDataEncoder(),
    getLeaveChannelInstructionDataDecoder()
  );
}
export async function getLeaveChannelInstructionAsync(input, config) {
  // Program address.
  const programAddress = config?.programAddress ?? POD_COM_PROGRAM_ADDRESS;
  // Original accounts.
  const originalAccounts = {
    channelAccount: { value: input.channelAccount ?? null, isWritable: true },
    participantAccount: {
      value: input.participantAccount ?? null,
      isWritable: true,
    },
    agentAccount: { value: input.agentAccount ?? null, isWritable: false },
    user: { value: input.user ?? null, isWritable: true },
  };
  const accounts = originalAccounts;
  // Resolve default values.
  if (!accounts.agentAccount.value) {
    accounts.agentAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([97, 103, 101, 110, 116])),
        getAddressEncoder().encode(expectAddress(accounts.user.value)),
      ],
    });
  }
  if (!accounts.participantAccount.value) {
    accounts.participantAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([112, 97, 114, 116, 105, 99, 105, 112, 97, 110, 116])
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.channelAccount.value)
        ),
        getAddressEncoder().encode(expectAddress(accounts.agentAccount.value)),
      ],
    });
  }
  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.channelAccount),
      getAccountMeta(accounts.participantAccount),
      getAccountMeta(accounts.agentAccount),
      getAccountMeta(accounts.user),
    ],
    programAddress,
    data: getLeaveChannelInstructionDataEncoder().encode({}),
  };
  return instruction;
}
export function getLeaveChannelInstruction(input, config) {
  // Program address.
  const programAddress = config?.programAddress ?? POD_COM_PROGRAM_ADDRESS;
  // Original accounts.
  const originalAccounts = {
    channelAccount: { value: input.channelAccount ?? null, isWritable: true },
    participantAccount: {
      value: input.participantAccount ?? null,
      isWritable: true,
    },
    agentAccount: { value: input.agentAccount ?? null, isWritable: false },
    user: { value: input.user ?? null, isWritable: true },
  };
  const accounts = originalAccounts;
  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.channelAccount),
      getAccountMeta(accounts.participantAccount),
      getAccountMeta(accounts.agentAccount),
      getAccountMeta(accounts.user),
    ],
    programAddress,
    data: getLeaveChannelInstructionDataEncoder().encode({}),
  };
  return instruction;
}
export function parseLeaveChannelInstruction(instruction) {
  if (instruction.accounts.length < 4) {
    throw new Error(
      'LeaveChannel instruction: Insufficient accounts provided. Expected at least required accounts for channel operations'
    );
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts[accountIndex];
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      channelAccount: getNextAccount(),
      participantAccount: getNextAccount(),
      agentAccount: getNextAccount(),
      user: getNextAccount(),
    },
    data: getLeaveChannelInstructionDataDecoder().decode(instruction.data),
  };
}
//# sourceMappingURL=leaveChannel.js.map
