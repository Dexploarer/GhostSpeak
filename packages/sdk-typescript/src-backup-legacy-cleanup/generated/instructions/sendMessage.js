/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from '@solana/kit';
import { POD_COM_PROGRAM_ADDRESS } from '../programs';
import { expectAddress, getAccountMetaFactory } from '../shared';
import { getMessageTypeDecoder, getMessageTypeEncoder } from '../types';
export const SEND_MESSAGE_DISCRIMINATOR = new Uint8Array([
  57, 40, 34, 178, 189, 10, 65, 26,
]);
export function getSendMessageDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SEND_MESSAGE_DISCRIMINATOR
  );
}
export function getSendMessageInstructionDataEncoder() {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['recipient', getAddressEncoder()],
      ['payloadHash', getArrayEncoder(getU8Encoder(), { size: 32 })],
      ['messageType', getMessageTypeEncoder()],
    ]),
    (value) => ({ ...value, discriminator: SEND_MESSAGE_DISCRIMINATOR })
  );
}
export function getSendMessageInstructionDataDecoder() {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['recipient', getAddressDecoder()],
    ['payloadHash', getArrayDecoder(getU8Decoder(), { size: 32 })],
    ['messageType', getMessageTypeDecoder()],
  ]);
}
export function getSendMessageInstructionDataCodec() {
  return combineCodec(
    getSendMessageInstructionDataEncoder(),
    getSendMessageInstructionDataDecoder()
  );
}
export async function getSendMessageInstructionAsync(input, config) {
  // Program address.
  const programAddress = config?.programAddress ?? POD_COM_PROGRAM_ADDRESS;
  // Original accounts.
  const originalAccounts = {
    messageAccount: { value: input.messageAccount ?? null, isWritable: true },
    senderAgent: { value: input.senderAgent ?? null, isWritable: false },
    signer: { value: input.signer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts;
  // Original args.
  const args = { ...input };
  // Resolve default values.
  if (!accounts.senderAgent.value) {
    accounts.senderAgent.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([97, 103, 101, 110, 116])),
        getAddressEncoder().encode(expectAddress(accounts.signer.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value = '11111111111111111111111111111111';
  }
  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.messageAccount),
      getAccountMeta(accounts.senderAgent),
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getSendMessageInstructionDataEncoder().encode(args),
  };
  return instruction;
}
export function getSendMessageInstruction(input, config) {
  // Program address.
  const programAddress = config?.programAddress ?? POD_COM_PROGRAM_ADDRESS;
  // Original accounts.
  const originalAccounts = {
    messageAccount: { value: input.messageAccount ?? null, isWritable: true },
    senderAgent: { value: input.senderAgent ?? null, isWritable: false },
    signer: { value: input.signer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts;
  // Original args.
  const args = { ...input };
  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value = '11111111111111111111111111111111';
  }
  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.messageAccount),
      getAccountMeta(accounts.senderAgent),
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getSendMessageInstructionDataEncoder().encode(args),
  };
  return instruction;
}
export function parseSendMessageInstruction(instruction) {
  if (instruction.accounts.length < 4) {
    throw new Error(
      'SendMessage instruction: Insufficient accounts provided. Expected at least 4 accounts (messageAccount, sender, recipient, systemProgram)'
    );
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts[accountIndex];
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      messageAccount: getNextAccount(),
      senderAgent: getNextAccount(),
      signer: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getSendMessageInstructionDataDecoder().decode(instruction.data),
  };
}
//# sourceMappingURL=sendMessage.js.map
