/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
} from '@solana/kit';
import { POD_COM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory } from '../shared';
export const UPDATE_CHANNEL_DISCRIMINATOR = new Uint8Array([
  75, 204, 94, 165, 60, 180, 193, 217,
]);
export function getUpdateChannelDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    UPDATE_CHANNEL_DISCRIMINATOR
  );
}
export function getUpdateChannelInstructionDataEncoder() {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      [
        'name',
        getOptionEncoder(
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())
        ),
      ],
      [
        'description',
        getOptionEncoder(
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())
        ),
      ],
      ['maxParticipants', getOptionEncoder(getU32Encoder())],
      ['feePerMessage', getOptionEncoder(getU64Encoder())],
      ['isActive', getOptionEncoder(getBooleanEncoder())],
    ]),
    (value) => ({ ...value, discriminator: UPDATE_CHANNEL_DISCRIMINATOR })
  );
}
export function getUpdateChannelInstructionDataDecoder() {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    [
      'name',
      getOptionDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
    [
      'description',
      getOptionDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
    ['maxParticipants', getOptionDecoder(getU32Decoder())],
    ['feePerMessage', getOptionDecoder(getU64Decoder())],
    ['isActive', getOptionDecoder(getBooleanDecoder())],
  ]);
}
export function getUpdateChannelInstructionDataCodec() {
  return combineCodec(
    getUpdateChannelInstructionDataEncoder(),
    getUpdateChannelInstructionDataDecoder()
  );
}
export function getUpdateChannelInstruction(input, config) {
  // Program address.
  const programAddress = config?.programAddress ?? POD_COM_PROGRAM_ADDRESS;
  // Original accounts.
  const originalAccounts = {
    channelAccount: { value: input.channelAccount ?? null, isWritable: true },
    signer: { value: input.signer ?? null, isWritable: false },
  };
  const accounts = originalAccounts;
  // Original args.
  const args = { ...input };
  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.channelAccount),
      getAccountMeta(accounts.signer),
    ],
    programAddress,
    data: getUpdateChannelInstructionDataEncoder().encode(args),
  };
  return instruction;
}
export function parseUpdateChannelInstruction(instruction) {
  if (instruction.accounts.length < 2) {
    throw new Error(
      'UpdateChannel instruction: Insufficient accounts provided. Expected at least 2 accounts (channelAccount, creator)'
    );
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts[accountIndex];
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      channelAccount: getNextAccount(),
      signer: getNextAccount(),
    },
    data: getUpdateChannelInstructionDataDecoder().decode(instruction.data),
  };
}
//# sourceMappingURL=updateChannel.js.map
