/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from '@solana/kit';
import { POD_COM_PROGRAM_ADDRESS } from '../programs';
import { expectAddress, getAccountMetaFactory } from '../shared';
import { getMessageStatusDecoder, getMessageStatusEncoder } from '../types';
export const UPDATE_MESSAGE_STATUS_DISCRIMINATOR = new Uint8Array([
  82, 100, 156, 74, 97, 190, 248, 132,
]);
export function getUpdateMessageStatusDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    UPDATE_MESSAGE_STATUS_DISCRIMINATOR
  );
}
export function getUpdateMessageStatusInstructionDataEncoder() {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['newStatus', getMessageStatusEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: UPDATE_MESSAGE_STATUS_DISCRIMINATOR,
    })
  );
}
export function getUpdateMessageStatusInstructionDataDecoder() {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['newStatus', getMessageStatusDecoder()],
  ]);
}
export function getUpdateMessageStatusInstructionDataCodec() {
  return combineCodec(
    getUpdateMessageStatusInstructionDataEncoder(),
    getUpdateMessageStatusInstructionDataDecoder()
  );
}
export async function getUpdateMessageStatusInstructionAsync(input, config) {
  // Program address.
  const programAddress = config?.programAddress ?? POD_COM_PROGRAM_ADDRESS;
  // Original accounts.
  const originalAccounts = {
    messageAccount: { value: input.messageAccount ?? null, isWritable: true },
    recipientAgent: { value: input.recipientAgent ?? null, isWritable: false },
    signer: { value: input.signer ?? null, isWritable: false },
  };
  const accounts = originalAccounts;
  // Original args.
  const args = { ...input };
  // Resolve default values.
  if (!accounts.recipientAgent.value) {
    accounts.recipientAgent.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([97, 103, 101, 110, 116])),
        getAddressEncoder().encode(expectAddress(accounts.signer.value)),
      ],
    });
  }
  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.messageAccount),
      getAccountMeta(accounts.recipientAgent),
      getAccountMeta(accounts.signer),
    ],
    programAddress,
    data: getUpdateMessageStatusInstructionDataEncoder().encode(args),
  };
  return instruction;
}
export function getUpdateMessageStatusInstruction(input, config) {
  // Program address.
  const programAddress = config?.programAddress ?? POD_COM_PROGRAM_ADDRESS;
  // Original accounts.
  const originalAccounts = {
    messageAccount: { value: input.messageAccount ?? null, isWritable: true },
    recipientAgent: { value: input.recipientAgent ?? null, isWritable: false },
    signer: { value: input.signer ?? null, isWritable: false },
  };
  const accounts = originalAccounts;
  // Original args.
  const args = { ...input };
  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.messageAccount),
      getAccountMeta(accounts.recipientAgent),
      getAccountMeta(accounts.signer),
    ],
    programAddress,
    data: getUpdateMessageStatusInstructionDataEncoder().encode(args),
  };
  return instruction;
}
export function parseUpdateMessageStatusInstruction(instruction) {
  if (instruction.accounts.length < 3) {
    throw new Error(
      'UpdateMessageStatus instruction: Insufficient accounts provided. Expected at least 2 accounts (messageAccount, authority)'
    );
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts[accountIndex];
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      messageAccount: getNextAccount(),
      recipientAgent: getNextAccount(),
      signer: getNextAccount(),
    },
    data: getUpdateMessageStatusInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
//# sourceMappingURL=updateMessageStatus.js.map
