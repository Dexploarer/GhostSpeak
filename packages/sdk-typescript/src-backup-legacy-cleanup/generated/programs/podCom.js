/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { containsBytes, fixEncoderSize, getBytesEncoder } from '@solana/kit';
export const POD_COM_PROGRAM_ADDRESS =
  'HEpGLgYsE1kP8aoYKyLFc3JVVrofS7T4zEA6fWBJsZps';
export var PodComAccount;
(function (PodComAccount) {
  PodComAccount[(PodComAccount['AgentAccount'] = 0)] = 'AgentAccount';
  PodComAccount[(PodComAccount['ChannelAccount'] = 1)] = 'ChannelAccount';
  PodComAccount[(PodComAccount['ChannelInvitation'] = 2)] = 'ChannelInvitation';
  PodComAccount[(PodComAccount['ChannelMessage'] = 3)] = 'ChannelMessage';
  PodComAccount[(PodComAccount['ChannelParticipant'] = 4)] =
    'ChannelParticipant';
  PodComAccount[(PodComAccount['EscrowAccount'] = 5)] = 'EscrowAccount';
  PodComAccount[(PodComAccount['MessageAccount'] = 6)] = 'MessageAccount';
})(PodComAccount || (PodComAccount = {}));
export function identifyPodComAccount(account) {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([241, 119, 69, 140, 233, 9, 112, 50])
      ),
      0
    )
  ) {
    return PodComAccount.AgentAccount;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([140, 232, 26, 78, 89, 26, 17, 244])
      ),
      0
    )
  ) {
    return PodComAccount.ChannelAccount;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([103, 36, 72, 198, 173, 128, 0, 255])
      ),
      0
    )
  ) {
    return PodComAccount.ChannelInvitation;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([172, 149, 77, 27, 88, 227, 80, 87])
      ),
      0
    )
  ) {
    return PodComAccount.ChannelMessage;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([147, 89, 184, 207, 10, 190, 78, 145])
      ),
      0
    )
  ) {
    return PodComAccount.ChannelParticipant;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([36, 69, 48, 18, 128, 225, 125, 135])
      ),
      0
    )
  ) {
    return PodComAccount.EscrowAccount;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([97, 144, 24, 58, 225, 40, 89, 223])
      ),
      0
    )
  ) {
    return PodComAccount.MessageAccount;
  }
  throw new Error(
    'The provided account could not be identified as a podCom account.'
  );
}
export var PodComInstruction;
(function (PodComInstruction) {
  PodComInstruction[(PodComInstruction['BatchSyncCompressedMessages'] = 0)] =
    'BatchSyncCompressedMessages';
  PodComInstruction[(PodComInstruction['BroadcastMessage'] = 1)] =
    'BroadcastMessage';
  PodComInstruction[(PodComInstruction['BroadcastMessageCompressed'] = 2)] =
    'BroadcastMessageCompressed';
  PodComInstruction[(PodComInstruction['CreateChannel'] = 3)] = 'CreateChannel';
  PodComInstruction[(PodComInstruction['CreateChannelV2'] = 4)] =
    'CreateChannelV2';
  PodComInstruction[(PodComInstruction['DepositEscrow'] = 5)] = 'DepositEscrow';
  PodComInstruction[(PodComInstruction['GetChannelParticipants'] = 6)] =
    'GetChannelParticipants';
  PodComInstruction[(PodComInstruction['InviteToChannel'] = 7)] =
    'InviteToChannel';
  PodComInstruction[(PodComInstruction['JoinChannel'] = 8)] = 'JoinChannel';
  PodComInstruction[(PodComInstruction['JoinChannelCompressed'] = 9)] =
    'JoinChannelCompressed';
  PodComInstruction[(PodComInstruction['LeaveChannel'] = 10)] = 'LeaveChannel';
  PodComInstruction[(PodComInstruction['RegisterAgent'] = 11)] =
    'RegisterAgent';
  PodComInstruction[(PodComInstruction['SendMessage'] = 12)] = 'SendMessage';
  PodComInstruction[(PodComInstruction['UpdateAgent'] = 13)] = 'UpdateAgent';
  PodComInstruction[(PodComInstruction['UpdateChannel'] = 14)] =
    'UpdateChannel';
  PodComInstruction[(PodComInstruction['UpdateMessageStatus'] = 15)] =
    'UpdateMessageStatus';
  PodComInstruction[(PodComInstruction['WithdrawEscrow'] = 16)] =
    'WithdrawEscrow';
})(PodComInstruction || (PodComInstruction = {}));
export function identifyPodComInstruction(instruction) {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([217, 170, 84, 220, 234, 64, 208, 239])
      ),
      0
    )
  ) {
    return PodComInstruction.BatchSyncCompressedMessages;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([253, 144, 203, 42, 219, 122, 147, 97])
      ),
      0
    )
  ) {
    return PodComInstruction.BroadcastMessage;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([15, 17, 113, 35, 186, 246, 41, 108])
      ),
      0
    )
  ) {
    return PodComInstruction.BroadcastMessageCompressed;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([37, 105, 253, 99, 87, 46, 223, 20])
      ),
      0
    )
  ) {
    return PodComInstruction.CreateChannel;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([174, 160, 51, 205, 169, 202, 17, 144])
      ),
      0
    )
  ) {
    return PodComInstruction.CreateChannelV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([226, 112, 158, 176, 178, 118, 153, 128])
      ),
      0
    )
  ) {
    return PodComInstruction.DepositEscrow;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([87, 16, 96, 73, 86, 56, 98, 70])
      ),
      0
    )
  ) {
    return PodComInstruction.GetChannelParticipants;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([203, 52, 194, 48, 173, 5, 43, 235])
      ),
      0
    )
  ) {
    return PodComInstruction.InviteToChannel;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([124, 39, 115, 89, 217, 26, 38, 29])
      ),
      0
    )
  ) {
    return PodComInstruction.JoinChannel;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([167, 194, 203, 130, 133, 162, 10, 88])
      ),
      0
    )
  ) {
    return PodComInstruction.JoinChannelCompressed;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([104, 0, 75, 134, 95, 80, 68, 186])
      ),
      0
    )
  ) {
    return PodComInstruction.LeaveChannel;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([135, 157, 66, 195, 2, 113, 175, 30])
      ),
      0
    )
  ) {
    return PodComInstruction.RegisterAgent;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([57, 40, 34, 178, 189, 10, 65, 26])
      ),
      0
    )
  ) {
    return PodComInstruction.SendMessage;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([85, 2, 178, 9, 119, 139, 102, 164])
      ),
      0
    )
  ) {
    return PodComInstruction.UpdateAgent;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([75, 204, 94, 165, 60, 180, 193, 217])
      ),
      0
    )
  ) {
    return PodComInstruction.UpdateChannel;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([82, 100, 156, 74, 97, 190, 248, 132])
      ),
      0
    )
  ) {
    return PodComInstruction.UpdateMessageStatus;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([81, 84, 226, 128, 245, 47, 96, 104])
      ),
      0
    )
  ) {
    return PodComInstruction.WithdrawEscrow;
  }
  throw new Error(
    'The provided instruction could not be identified as a podCom instruction.'
  );
}
//# sourceMappingURL=podCom.js.map
