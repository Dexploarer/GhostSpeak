/**
 * This code was GENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  type Account,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
} from '@solana/accounts';
import {
  getAddressDecoder,
  getAddressEncoder,
  type Address,
} from '@solana/addresses';
import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Codec,
  type Decoder,
  type Encoder,
  type ReadonlyUint8Array,
} from '@solana/codecs';

export const LISTING_ACCOUNT_DISCRIMINATOR = new Uint8Array([
  78, 213, 156, 47, 199, 88, 201, 132,
]);

export function getListingAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    LISTING_ACCOUNT_DISCRIMINATOR
  );
}

export type ListingAccount = {
  discriminator: ReadonlyUint8Array;
  listingId: bigint;
  seller: Address;
  serviceTitle: string;
  serviceDescription: string;
  price: bigint;
  paymentToken: Address;
  serviceType: string;
  estimatedDelivery: bigint;
  tags: string[];
  status: ListingStatus;
  createdAt: bigint;
  updatedAt: bigint;
  totalSales: bigint;
  rating: number;
  bump: number;
  reserved: ReadonlyUint8Array;
};

export type ListingAccountArgs = {
  listingId: number | bigint;
  seller: Address;
  serviceTitle: string;
  serviceDescription: string;
  price: number | bigint;
  paymentToken: Address;
  serviceType: string;
  estimatedDelivery: number | bigint;
  tags: string[];
  status: ListingStatus;
  createdAt: number | bigint;
  updatedAt: number | bigint;
  totalSales: number | bigint;
  rating: number;
  bump: number;
  reserved: ReadonlyUint8Array;
};

export enum ListingStatus {
  Active = 0,
  Inactive = 1,
  Suspended = 2,
  Sold = 3,
}

export function getListingAccountEncoder(): Encoder<ListingAccountArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['listingId', getU64Encoder()],
      ['seller', getAddressEncoder()],
      ['serviceTitle', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['serviceDescription', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['price', getU64Encoder()],
      ['paymentToken', getAddressEncoder()],
      ['serviceType', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['estimatedDelivery', getI64Encoder()],
      ['tags', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['status', getU8Encoder()],
      ['createdAt', getI64Encoder()],
      ['updatedAt', getI64Encoder()],
      ['totalSales', getU64Encoder()],
      ['rating', getU8Encoder()],
      ['bump', getU8Encoder()],
      ['reserved', fixEncoderSize(getBytesEncoder(), 30)],
    ]),
    (value) => ({ ...value, discriminator: LISTING_ACCOUNT_DISCRIMINATOR })
  );
}

export function getListingAccountDecoder(): Decoder<ListingAccount> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['listingId', getU64Decoder()],
    ['seller', getAddressDecoder()],
    ['serviceTitle', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['serviceDescription', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['price', getU64Decoder()],
    ['paymentToken', getAddressDecoder()],
    ['serviceType', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['estimatedDelivery', getI64Decoder()],
    ['tags', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['status', getU8Decoder()],
    ['createdAt', getI64Decoder()],
    ['updatedAt', getI64Decoder()],
    ['totalSales', getU64Decoder()],
    ['rating', getU8Decoder()],
    ['bump', getU8Decoder()],
    ['reserved', fixDecoderSize(getBytesDecoder(), 30)],
  ]);
}

export function getListingAccountCodec(): Codec<ListingAccountArgs, ListingAccount> {
  return combineCodec(getListingAccountEncoder(), getListingAccountDecoder());
}

export function decodeListingAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<ListingAccount, TAddress>;
export function decodeListingAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<ListingAccount, TAddress>;
export function decodeListingAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<ListingAccount, TAddress> | MaybeAccount<ListingAccount, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getListingAccountDecoder()
  );
}

export async function fetchListingAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<ListingAccount, TAddress>> {
  const maybeAccount = await fetchMaybeListingAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeListingAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<ListingAccount, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeListingAccount(maybeAccount);
}

export async function fetchAllListingAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<ListingAccount>[]> {
  const maybeAccounts = await fetchAllMaybeListingAccount(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeListingAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<ListingAccount>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeListingAccount(maybeAccount));
} 