/**
 * This code was GENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import { Address } from '@solana/addresses';
import {
  IAccountMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
} from '../../utils/instruction-compat';
import { 
  combineCodec,
  getArrayDecoder, 
  getArrayEncoder, 
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder, 
  getUtf8Encoder,
  transformEncoder,
  type Codec,
  type Decoder,
  type Encoder,
} from '@solana/codecs';

// Define missing types for compatibility
type ReadonlyAccount<T> = T;
type WritableAccount<T> = T;
type WritableSignerAccount<T> = T;

export const CREATE_SERVICE_LISTING_DISCRIMINATOR = new Uint8Array([
  123, 200, 88, 156, 92, 201, 77, 45,
]);

export function getCreateServiceListingDiscriminatorBytes() {
  return CREATE_SERVICE_LISTING_DISCRIMINATOR.slice();
}

export type CreateServiceListingInstruction<
  TProgram extends string = 'PodAI111111111111111111111111111111111111111',
  TAccountServiceListing extends string | IAccountMeta<string> = string,
  TAccountAgent extends string | IAccountMeta<string> = string,
  TAccountCreator extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountServiceListing extends string
        ? WritableAccount<TAccountServiceListing>
        : TAccountServiceListing,
      TAccountAgent extends string
        ? ReadonlyAccount<TAccountAgent>
        : TAccountAgent,
      TAccountCreator extends string
        ? WritableSignerAccount<TAccountCreator>
        : TAccountCreator,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreateServiceListingInstructionData = {
  discriminator: Uint8Array;
  listingData: ServiceListingData;
};

export type ServiceListingData = {
  title: string;
  description: string;
  price: bigint;
  tokenMint: Address;
  serviceType: string;
  paymentToken: Address;
  estimatedDelivery: bigint;
  tags: string[];
};

export type CreateServiceListingInstructionDataArgs = {
  listingData: ServiceListingDataArgs;
};

export type ServiceListingDataArgs = {
  title: string;
  description: string;
  price: number | bigint;
  tokenMint: Address;
  serviceType: string;
  paymentToken: Address;
  estimatedDelivery: number | bigint;
  tags: string[];
};

export function getCreateServiceListingInstructionDataEncoder(): Encoder<CreateServiceListingInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getCreateServiceListingDiscriminatorBytes()],
      ['listingData', getServiceListingDataEncoder()],
    ]),
    (value) => ({ ...value, discriminator: getCreateServiceListingDiscriminatorBytes() })
  );
}

export function getCreateServiceListingInstructionDataDecoder(): Decoder<CreateServiceListingInstructionData> {
  return getStructDecoder([
    ['discriminator', getCreateServiceListingDiscriminatorBytes()],
    ['listingData', getServiceListingDataDecoder()],
  ]);
}

export function getCreateServiceListingInstructionDataCodec(): Codec<
  CreateServiceListingInstructionDataArgs,
  CreateServiceListingInstructionData
> {
  return combineCodec(
    getCreateServiceListingInstructionDataEncoder(),
    getCreateServiceListingInstructionDataDecoder()
  );
}

export function getServiceListingDataEncoder(): Encoder<ServiceListingDataArgs> {
  return getStructEncoder([
    ['title', getUtf8Encoder()],
    ['description', getUtf8Encoder()],
    ['price', getU64Encoder()],
    ['tokenMint', getUtf8Encoder()],
    ['serviceType', getUtf8Encoder()],
    ['paymentToken', getUtf8Encoder()],
    ['estimatedDelivery', getU64Encoder()],
    ['tags', getArrayEncoder(getUtf8Encoder())],
  ]);
}

export function getServiceListingDataDecoder(): Decoder<ServiceListingData> {
  return getStructDecoder([
    ['title', getUtf8Decoder()],
    ['description', getUtf8Decoder()],
    ['price', getU64Decoder()],
    ['tokenMint', getUtf8Decoder()],
    ['serviceType', getUtf8Decoder()],
    ['paymentToken', getUtf8Decoder()],
    ['estimatedDelivery', getU64Decoder()],
    ['tags', getArrayDecoder(getUtf8Decoder())],
  ]);
}

export function getServiceListingDataCodec(): Codec<ServiceListingDataArgs, ServiceListingData> {
  return combineCodec(getServiceListingDataEncoder(), getServiceListingDataDecoder());
}

export type CreateServiceListingInput<
  TAccountServiceListing extends string = string,
  TAccountAgent extends string = string,
  TAccountCreator extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  serviceListing: Address<TAccountServiceListing>;
  agent: Address<TAccountAgent>;
  creator: Address<TAccountCreator>;
  systemProgram?: Address<TAccountSystemProgram>;
  listingData: ServiceListingDataArgs;
};

export function getCreateServiceListingInstruction<
  TAccountServiceListing extends string,
  TAccountAgent extends string,
  TAccountCreator extends string,
  TAccountSystemProgram extends string,
>(
  input: CreateServiceListingInput<TAccountServiceListing, TAccountAgent, TAccountCreator, TAccountSystemProgram>
): CreateServiceListingInstruction<
  'PodAI111111111111111111111111111111111111111',
  TAccountServiceListing,
  TAccountAgent,
  TAccountCreator,
  TAccountSystemProgram
> {
  // Program ID
  const programId = 'PodAI111111111111111111111111111111111111111' as Address<'PodAI111111111111111111111111111111111111111'>;

  // Accounts
  const accounts: CreateServiceListingInstruction<
    'PodAI111111111111111111111111111111111111111',
    TAccountServiceListing,
    TAccountAgent,
    TAccountCreator,
    TAccountSystemProgram
  >['accounts'] = [
    {
      address: input.serviceListing,
      role: 'writable',
    },
    {
      address: input.agent,
      role: 'readonly',
    },
    {
      address: input.creator,
      role: 'writable',
      signer: true,
    },
    {
      address: input.systemProgram ?? ('11111111111111111111111111111111' as Address<TAccountSystemProgram>),
      role: 'readonly',
    },
  ];

  // Instruction data
  const args = { listingData: input.listingData };
  const data = getCreateServiceListingInstructionDataEncoder().encode(args);

  return {
    programId,
    accounts,
    data,
  };
}

export type ParsedCreateServiceListingInstruction<
  TProgram extends string = 'PodAI111111111111111111111111111111111111111',
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    serviceListing: TAccountMetas[0];
    agent: TAccountMetas[1];
    creator: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
  };
  data: CreateServiceListingInstructionData;
};

export function parseCreateServiceListingInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>
): ParsedCreateServiceListingInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      serviceListing: getNextAccount(),
      agent: getNextAccount(),
      creator: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCreateServiceListingInstructionDataDecoder().decode(instruction.data),
  };
}

// Async version for modern Web3.js v2 usage
export async function getCreateServiceListingInstructionAsync<
  TAccountServiceListing extends string,
  TAccountAgent extends string,
  TAccountCreator extends string,
  TAccountSystemProgram extends string,
>(
  input: CreateServiceListingInput<TAccountServiceListing, TAccountAgent, TAccountCreator, TAccountSystemProgram>
): Promise<CreateServiceListingInstruction<
  'PodAI111111111111111111111111111111111111111',
  TAccountServiceListing,
  TAccountAgent,
  TAccountCreator,
  TAccountSystemProgram
>> {
  return getCreateServiceListingInstruction(input);
} 