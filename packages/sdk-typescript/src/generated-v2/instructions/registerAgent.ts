/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  getAddressEncoder,
  getProgramDerivedAddress,
  type Address,
} from '@solana/addresses';
import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  transformDecoder,
  type Codec,
  type Decoder,
  type Encoder,
} from '@solana/codecs';
import type {
  IAccountMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
} from '@solana/instructions';
import { AccountRole } from '@solana/instructions';
import {
  type IAccountSignerMeta,
  type TransactionSigner,
} from '@solana/signers';
import { POD_COM_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
} from '../shared';

export const REGISTER_AGENT_DISCRIMINATOR = new Uint8Array([
  135, 157, 66, 195, 2, 113, 175, 30,
]);

export function getRegisterAgentDiscriminatorBytes() {
  return REGISTER_AGENT_DISCRIMINATOR;
}

export type RegisterAgentInstruction<
  TProgram extends string = typeof POD_COM_PROGRAM_ADDRESS,
  TAccountAgentAccount extends string | IAccountMeta<string> = string,
  TAccountSigner extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAgentAccount extends string
        ? IAccountMeta<string>
        : TAccountAgentAccount,
      TAccountSigner extends string
        ? IAccountMeta<string> & IAccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountSystemProgram extends string
        ? IAccountMeta<string>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type RegisterAgentInstructionData = {
  discriminator: Uint8Array;
  capabilities: bigint;
  metadataUri: string;
};

export type RegisterAgentInstructionDataArgs = {
  capabilities: number | bigint;
  metadataUri: string;
};

export function getRegisterAgentInstructionDataEncoder(): Encoder<RegisterAgentInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getBytesEncoder()],
      ['capabilities', getU64Encoder()],
      ['metadataUri', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ]),
    (value) => ({ ...value, discriminator: REGISTER_AGENT_DISCRIMINATOR })
  );
}

export function getRegisterAgentInstructionDataDecoder(): Decoder<RegisterAgentInstructionData> {
  return transformDecoder(
    getStructDecoder([
      ['discriminator', getBytesDecoder()],
      ['capabilities', getU64Decoder()],
      ['metadataUri', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: value.discriminator instanceof Uint8Array ? value.discriminator : new Uint8Array(value.discriminator),
    })
  );
}

export function getRegisterAgentInstructionDataCodec(): Codec<
  RegisterAgentInstructionDataArgs,
  RegisterAgentInstructionData
> {
  return combineCodec(
    getRegisterAgentInstructionDataEncoder(),
    getRegisterAgentInstructionDataDecoder()
  );
}

export type RegisterAgentAsyncInput<
  TAccountAgentAccount extends string = string,
  TAccountSigner extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  agentAccount?: Address<TAccountAgentAccount>;
  signer: TransactionSigner<TAccountSigner>;
  systemProgram?: Address<TAccountSystemProgram>;
  capabilities: RegisterAgentInstructionDataArgs['capabilities'];
  metadataUri: RegisterAgentInstructionDataArgs['metadataUri'];
};

export async function getRegisterAgentInstructionAsync<
  TAccountAgentAccount extends string,
  TAccountSigner extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof POD_COM_PROGRAM_ADDRESS,
>(
  input: RegisterAgentAsyncInput<
    TAccountAgentAccount,
    TAccountSigner,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  RegisterAgentInstruction<
    TProgramAddress,
    TAccountAgentAccount,
    TAccountSigner,
    TAccountSystemProgram
  >
> {
  const programAddress = config?.programAddress ?? POD_COM_PROGRAM_ADDRESS;
  let agentAccount: Address<string>;
  if (input.agentAccount) {
    agentAccount = input.agentAccount as Address<string>;
  } else {
    const derived = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([97, 103, 101, 110, 116])),
        getAddressEncoder().encode(expectAddress(input.signer.address)),
      ],
    });
    agentAccount = Array.isArray(derived) ? (derived[0] as unknown as Address<string>) : (derived as Address<string>);
  }
  const systemProgram = input.systemProgram ?? ('11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>);
  const accounts: [
    IAccountMeta<string>,
    IAccountSignerMeta<TAccountSigner, TransactionSigner<TAccountSigner>>,
    IAccountMeta<string>
  ] = [
    { address: agentAccount, role: AccountRole.WRITABLE },
    { address: input.signer.address, role: AccountRole.WRITABLE_SIGNER, signer: input.signer } as IAccountSignerMeta<TAccountSigner, TransactionSigner<TAccountSigner>>,
    { address: systemProgram, role: AccountRole.READONLY },
  ];
  const data = getRegisterAgentInstructionDataEncoder().encode(input as RegisterAgentInstructionDataArgs);
  return ({
    programAddress,
    accounts,
    data: data as Uint8Array & ArrayBufferLike,
  } as unknown) as RegisterAgentInstruction<
    TProgramAddress,
    TAccountAgentAccount,
    TAccountSigner,
    TAccountSystemProgram
  >;
}

export type RegisterAgentInput<
  TAccountAgentAccount extends string = string,
  TAccountSigner extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  agentAccount: Address<TAccountAgentAccount>;
  signer: TransactionSigner<TAccountSigner>;
  systemProgram?: Address<TAccountSystemProgram>;
  capabilities: RegisterAgentInstructionDataArgs['capabilities'];
  metadataUri: RegisterAgentInstructionDataArgs['metadataUri'];
};

export function getRegisterAgentInstruction<
  TAccountAgentAccount extends string,
  TAccountSigner extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof POD_COM_PROGRAM_ADDRESS,
>(
  input: RegisterAgentInput<
    TAccountAgentAccount,
    TAccountSigner,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): RegisterAgentInstruction<
  TProgramAddress,
  TAccountAgentAccount,
  TAccountSigner,
  TAccountSystemProgram
> {
  const programAddress = config?.programAddress ?? POD_COM_PROGRAM_ADDRESS;
  const systemProgram = input.systemProgram ?? ('11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>);
  const accounts: [
    IAccountMeta<string>,
    IAccountSignerMeta<TAccountSigner, TransactionSigner<TAccountSigner>>,
    IAccountMeta<string>
  ] = [
    { address: input.agentAccount, role: AccountRole.WRITABLE },
    { address: input.signer.address, role: AccountRole.WRITABLE_SIGNER, signer: input.signer } as IAccountSignerMeta<TAccountSigner, TransactionSigner<TAccountSigner>>,
    { address: systemProgram, role: AccountRole.READONLY },
  ];
  const data = getRegisterAgentInstructionDataEncoder().encode(input as RegisterAgentInstructionDataArgs);
  return ({
    programAddress,
    accounts,
    data: data as Uint8Array & ArrayBufferLike,
  } as unknown) as RegisterAgentInstruction<
    TProgramAddress,
    TAccountAgentAccount,
    TAccountSigner,
    TAccountSystemProgram
  >;
}

export type ParsedRegisterAgentInstruction<
  TProgram extends string = typeof POD_COM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    agentAccount: TAccountMetas[0];
    signer: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
  };
  data: RegisterAgentInstructionData;
};

export function parseRegisterAgentInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedRegisterAgentInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // Specific error for instruction validation
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      agentAccount: getNextAccount(),
      signer: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getRegisterAgentInstructionDataDecoder().decode(instruction.data),
  };
}
