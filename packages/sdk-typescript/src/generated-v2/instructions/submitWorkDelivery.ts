/**
 * This code was GENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { 
  getArrayDecoder, 
  getArrayEncoder, 
  getUtf8Decoder, 
  getUtf8Encoder 
} from '@solana/web3.js';

export const SUBMIT_WORK_DELIVERY_DISCRIMINATOR = new Uint8Array([
  201, 45, 78, 92, 156, 89, 23, 177,
]);

export function getSubmitWorkDeliveryDiscriminatorBytes() {
  return SUBMIT_WORK_DELIVERY_DISCRIMINATOR.slice();
}

export type SubmitWorkDeliveryInstruction<
  TProgram extends string = 'PodAI111111111111111111111111111111111111111',
  TAccountWorkDelivery extends string | IAccountMeta<string> = string,
  TAccountWorkOrder extends string | IAccountMeta<string> = string,
  TAccountProvider extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountWorkDelivery extends string
        ? WritableAccount<TAccountWorkDelivery>
        : TAccountWorkDelivery,
      TAccountWorkOrder extends string
        ? WritableAccount<TAccountWorkOrder>
        : TAccountWorkOrder,
      TAccountProvider extends string
        ? WritableSignerAccount<TAccountProvider>
        : TAccountProvider,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type SubmitWorkDeliveryInstructionData = {
  discriminator: ReadonlyUint8Array;
  deliveryData: WorkDeliveryData;
};

export type WorkDeliveryData = {
  deliverables: Deliverable[];
  ipfsHash: string;
  metadataUri: string;
};

export type Deliverable = {
  __kind: 'Code' | 'Document' | 'Design' | 'Analysis' | 'Other';
};

export type SubmitWorkDeliveryInstructionDataArgs = {
  deliveryData: WorkDeliveryDataArgs;
};

export type WorkDeliveryDataArgs = {
  deliverables: DeliverableArgs[];
  ipfsHash: string;
  metadataUri: string;
};

export type DeliverableArgs = {
  __kind: 'Code' | 'Document' | 'Design' | 'Analysis' | 'Other';
};

export function getSubmitWorkDeliveryInstructionDataEncoder(): Encoder<SubmitWorkDeliveryInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getSubmitWorkDeliveryDiscriminatorBytes()],
      ['deliveryData', getWorkDeliveryDataEncoder()],
    ]),
    (value) => ({ ...value, discriminator: getSubmitWorkDeliveryDiscriminatorBytes() })
  );
}

export function getSubmitWorkDeliveryInstructionDataDecoder(): Decoder<SubmitWorkDeliveryInstructionData> {
  return getStructDecoder([
    ['discriminator', getSubmitWorkDeliveryDiscriminatorBytes()],
    ['deliveryData', getWorkDeliveryDataDecoder()],
  ]);
}

export function getSubmitWorkDeliveryInstructionDataCodec(): Codec<
  SubmitWorkDeliveryInstructionDataArgs,
  SubmitWorkDeliveryInstructionData
> {
  return combineCodec(
    getSubmitWorkDeliveryInstructionDataEncoder(),
    getSubmitWorkDeliveryInstructionDataDecoder()
  );
}

export function getWorkDeliveryDataEncoder(): Encoder<WorkDeliveryDataArgs> {
  return getStructEncoder([
    ['deliverables', getArrayEncoder(getDeliverableEncoder())],
    ['ipfsHash', getUtf8Encoder()],
    ['metadataUri', getUtf8Encoder()],
  ]);
}

export function getWorkDeliveryDataDecoder(): Decoder<WorkDeliveryData> {
  return getStructDecoder([
    ['deliverables', getArrayDecoder(getDeliverableDecoder())],
    ['ipfsHash', getUtf8Decoder()],
    ['metadataUri', getUtf8Decoder()],
  ]);
}

export function getWorkDeliveryDataCodec(): Codec<WorkDeliveryDataArgs, WorkDeliveryData> {
  return combineCodec(getWorkDeliveryDataEncoder(), getWorkDeliveryDataDecoder());
}

export function getDeliverableEncoder(): Encoder<DeliverableArgs> {
  return getStructEncoder([
    ['__kind', getUtf8Encoder()],
  ]);
}

export function getDeliverableDecoder(): Decoder<Deliverable> {
  return getStructDecoder([
    ['__kind', getUtf8Decoder()],
  ]);
}

export function getDeliverableCodec(): Codec<DeliverableArgs, Deliverable> {
  return combineCodec(getDeliverableEncoder(), getDeliverableDecoder());
}

export type SubmitWorkDeliveryInput<
  TAccountWorkDelivery extends string = string,
  TAccountWorkOrder extends string = string,
  TAccountProvider extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  workDelivery: Address<TAccountWorkDelivery>;
  workOrder: Address<TAccountWorkOrder>;
  provider: Address<TAccountProvider>;
  systemProgram?: Address<TAccountSystemProgram>;
  deliveryData: WorkDeliveryDataArgs;
};

export function getSubmitWorkDeliveryInstruction<
  TAccountWorkDelivery extends string,
  TAccountWorkOrder extends string,
  TAccountProvider extends string,
  TAccountSystemProgram extends string,
>(
  input: SubmitWorkDeliveryInput<TAccountWorkDelivery, TAccountWorkOrder, TAccountProvider, TAccountSystemProgram>
): SubmitWorkDeliveryInstruction<
  'PodAI111111111111111111111111111111111111111',
  TAccountWorkDelivery,
  TAccountWorkOrder,
  TAccountProvider,
  TAccountSystemProgram
> {
  // Program ID
  const programId = 'PodAI111111111111111111111111111111111111111' as Address<'PodAI111111111111111111111111111111111111111'>;

  // Accounts
  const accounts: SubmitWorkDeliveryInstruction<
    'PodAI111111111111111111111111111111111111111',
    TAccountWorkDelivery,
    TAccountWorkOrder,
    TAccountProvider,
    TAccountSystemProgram
  >['accounts'] = [
    {
      address: input.workDelivery,
      role: 'writable',
    },
    {
      address: input.workOrder,
      role: 'writable',
    },
    {
      address: input.provider,
      role: 'writable',
      signer: true,
    },
    {
      address: input.systemProgram ?? ('11111111111111111111111111111111' as Address<TAccountSystemProgram>),
      role: 'readonly',
    },
  ];

  // Instruction data
  const args = { deliveryData: input.deliveryData };
  const data = getSubmitWorkDeliveryInstructionDataEncoder().encode(args);

  return {
    programId,
    accounts,
    data,
  };
}

export type ParsedSubmitWorkDeliveryInstruction<
  TProgram extends string = 'PodAI111111111111111111111111111111111111111',
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programId: Address<TProgram>;
  accounts: {
    workDelivery: TAccountMetas[0];
    workOrder: TAccountMetas[1];
    provider: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
  };
  data: SubmitWorkDeliveryInstructionData;
};

export function parseSubmitWorkDeliveryInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>
): ParsedSubmitWorkDeliveryInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programId: instruction.programId,
    accounts: {
      workDelivery: getNextAccount(),
      workOrder: getNextAccount(),
      provider: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getSubmitWorkDeliveryInstructionDataDecoder().decode(instruction.data),
  };
}

// Async version for modern Web3.js v2 usage
export async function getSubmitWorkDeliveryInstructionAsync<
  TAccountWorkDelivery extends string,
  TAccountWorkOrder extends string,
  TAccountProvider extends string,
  TAccountSystemProgram extends string,
>(
  input: SubmitWorkDeliveryInput<TAccountWorkDelivery, TAccountWorkOrder, TAccountProvider, TAccountSystemProgram>
): Promise<SubmitWorkDeliveryInstruction<
  'PodAI111111111111111111111111111111111111111',
  TAccountWorkDelivery,
  TAccountWorkOrder,
  TAccountProvider,
  TAccountSystemProgram
>> {
  return getSubmitWorkDeliveryInstruction(input);
} 