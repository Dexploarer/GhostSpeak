/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const A2_A_MESSAGE_DISCRIMINATOR = new Uint8Array([
  174, 118, 140, 42, 3, 207, 16, 145,
]);

export function getA2AMessageDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    A2_A_MESSAGE_DISCRIMINATOR
  );
}

export type A2AMessage = {
  discriminator: ReadonlyUint8Array;
  messageId: bigint;
  session: Address;
  sender: Address;
  content: string;
  messageType: string;
  sentAt: bigint;
  bump: number;
};

export type A2AMessageArgs = {
  messageId: number | bigint;
  session: Address;
  sender: Address;
  content: string;
  messageType: string;
  sentAt: number | bigint;
  bump: number;
};

export function getA2AMessageEncoder(): Encoder<A2AMessageArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['messageId', getU64Encoder()],
      ['session', getAddressEncoder()],
      ['sender', getAddressEncoder()],
      ['content', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['messageType', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['sentAt', getI64Encoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: A2_A_MESSAGE_DISCRIMINATOR })
  );
}

export function getA2AMessageDecoder(): Decoder<A2AMessage> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['messageId', getU64Decoder()],
    ['session', getAddressDecoder()],
    ['sender', getAddressDecoder()],
    ['content', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['messageType', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['sentAt', getI64Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getA2AMessageCodec(): Codec<A2AMessageArgs, A2AMessage> {
  return combineCodec(getA2AMessageEncoder(), getA2AMessageDecoder());
}

export function decodeA2AMessage<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<A2AMessage, TAddress>;
export function decodeA2AMessage<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<A2AMessage, TAddress>;
export function decodeA2AMessage<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<A2AMessage, TAddress> | MaybeAccount<A2AMessage, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getA2AMessageDecoder()
  );
}

export async function fetchA2AMessage<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<A2AMessage, TAddress>> {
  const maybeAccount = await fetchMaybeA2AMessage(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeA2AMessage<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<A2AMessage, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeA2AMessage(maybeAccount);
}

export async function fetchAllA2AMessage(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<A2AMessage>[]> {
  const maybeAccounts = await fetchAllMaybeA2AMessage(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeA2AMessage(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<A2AMessage>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeA2AMessage(maybeAccount));
}
