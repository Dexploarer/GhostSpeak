/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const A2_A_SESSION_DISCRIMINATOR = new Uint8Array([
  35, 65, 251, 143, 132, 134, 104, 33,
]);

export function getA2ASessionDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    A2_A_SESSION_DISCRIMINATOR
  );
}

export interface A2ASession {
  discriminator: ReadonlyUint8Array;
  sessionId: bigint;
  initiator: Address;
  responder: Address;
  sessionType: string;
  metadata: string;
  isActive: boolean;
  createdAt: bigint;
  expiresAt: bigint;
  bump: number;
}

export interface A2ASessionArgs {
  sessionId: number | bigint;
  initiator: Address;
  responder: Address;
  sessionType: string;
  metadata: string;
  isActive: boolean;
  createdAt: number | bigint;
  expiresAt: number | bigint;
  bump: number;
}

export function getA2ASessionEncoder(): Encoder<A2ASessionArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['sessionId', getU64Encoder()],
      ['initiator', getAddressEncoder()],
      ['responder', getAddressEncoder()],
      ['sessionType', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['metadata', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['isActive', getBooleanEncoder()],
      ['createdAt', getI64Encoder()],
      ['expiresAt', getI64Encoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: A2_A_SESSION_DISCRIMINATOR })
  );
}

export function getA2ASessionDecoder(): Decoder<A2ASession> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['sessionId', getU64Decoder()],
    ['initiator', getAddressDecoder()],
    ['responder', getAddressDecoder()],
    ['sessionType', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['metadata', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['isActive', getBooleanDecoder()],
    ['createdAt', getI64Decoder()],
    ['expiresAt', getI64Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getA2ASessionCodec(): Codec<A2ASessionArgs, A2ASession> {
  return combineCodec(getA2ASessionEncoder(), getA2ASessionDecoder());
}

export function decodeA2ASession<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<A2ASession, TAddress>;
export function decodeA2ASession<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<A2ASession, TAddress>;
export function decodeA2ASession<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<A2ASession, TAddress> | MaybeAccount<A2ASession, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getA2ASessionDecoder()
  );
}

export async function fetchA2ASession<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<A2ASession, TAddress>> {
  const maybeAccount = await fetchMaybeA2ASession(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeA2ASession<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<A2ASession, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeA2ASession(maybeAccount);
}

export async function fetchAllA2ASession(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig
): Promise<Account<A2ASession>[]> {
  const maybeAccounts = await fetchAllMaybeA2ASession(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeA2ASession(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig
): Promise<MaybeAccount<A2ASession>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeA2ASession(maybeAccount));
}
