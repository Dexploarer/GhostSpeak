import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  transformEncoder,
  type Codec,
  type Decoder,
  type Encoder,
  type ReadonlyUint8Array
} from '@solana/codecs-core';
import {
  getUtf8Decoder,
  getUtf8Encoder
} from '@solana/codecs-strings';
import {
  getI64Decoder,
  getI64Encoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder
} from '@solana/codecs-numbers';
import {
  getArrayDecoder,
  getArrayEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder
} from '@solana/codecs-data-structures';
import {
  getOptionDecoder,
  getOptionEncoder,
  type Option,
  type OptionOrNullable
} from '@solana/options';
import {
  getAddressDecoder,
  getAddressEncoder,
  type Address
} from '@solana/addresses';
import {
  assertAccountExists,
  assertAccountsExist,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  type Account,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount
} from '@solana/accounts';
import {
  getPricingModelDecoder,
  getPricingModelEncoder,
  type PricingModel,
  type PricingModelArgs,
} from '../types';
/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

export const AGENT_DISCRIMINATOR = new Uint8Array([
  47, 166, 112, 147, 155, 197, 86, 7,
]);

export function getAgentDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(AGENT_DISCRIMINATOR);
}

export type Agent = {
  discriminator: ReadonlyUint8Array;
  owner: Address;
  name: string;
  description: string;
  capabilities: Array<string>;
  pricingModel: PricingModel;
  reputationScore: number;
  totalJobsCompleted: number;
  totalEarnings: bigint;
  isActive: boolean;
  createdAt: bigint;
  updatedAt: bigint;
  originalPrice: bigint;
  genomeHash: string;
  isReplicable: boolean;
  replicationFee: bigint;
  serviceEndpoint: string;
  isVerified: boolean;
  verificationTimestamp: bigint;
  metadataUri: string;
  frameworkOrigin: string;
  supportedTokens: Array<Address>;
  cnftMint: Option<Address>;
  merkleTree: Option<Address>;
  supportsA2a: boolean;
  transferHook: Option<Address>;
  bump: number;
};

export type AgentArgs = {
  owner: Address;
  name: string;
  description: string;
  capabilities: Array<string>;
  pricingModel: PricingModelArgs;
  reputationScore: number;
  totalJobsCompleted: number;
  totalEarnings: number | bigint;
  isActive: boolean;
  createdAt: number | bigint;
  updatedAt: number | bigint;
  originalPrice: number | bigint;
  genomeHash: string;
  isReplicable: boolean;
  replicationFee: number | bigint;
  serviceEndpoint: string;
  isVerified: boolean;
  verificationTimestamp: number | bigint;
  metadataUri: string;
  frameworkOrigin: string;
  supportedTokens: Array<Address>;
  cnftMint: OptionOrNullable<Address>;
  merkleTree: OptionOrNullable<Address>;
  supportsA2a: boolean;
  transferHook: OptionOrNullable<Address>;
  bump: number;
};

export function getAgentEncoder(): Encoder<AgentArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['owner', getAddressEncoder()],
      ['name', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['description', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      [
        'capabilities',
        getArrayEncoder(
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())
        ),
      ],
      ['pricingModel', getPricingModelEncoder()],
      ['reputationScore', getU32Encoder()],
      ['totalJobsCompleted', getU32Encoder()],
      ['totalEarnings', getU64Encoder()],
      ['isActive', getBooleanEncoder()],
      ['createdAt', getI64Encoder()],
      ['updatedAt', getI64Encoder()],
      ['originalPrice', getU64Encoder()],
      ['genomeHash', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['isReplicable', getBooleanEncoder()],
      ['replicationFee', getU64Encoder()],
      [
        'serviceEndpoint',
        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
      ],
      ['isVerified', getBooleanEncoder()],
      ['verificationTimestamp', getI64Encoder()],
      ['metadataUri', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      [
        'frameworkOrigin',
        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
      ],
      ['supportedTokens', getArrayEncoder(getAddressEncoder())],
      ['cnftMint', getOptionEncoder(getAddressEncoder())],
      ['merkleTree', getOptionEncoder(getAddressEncoder())],
      ['supportsA2a', getBooleanEncoder()],
      ['transferHook', getOptionEncoder(getAddressEncoder())],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: AGENT_DISCRIMINATOR })
  );
}

export function getAgentDecoder(): Decoder<Agent> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['owner', getAddressDecoder()],
    ['name', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['description', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    [
      'capabilities',
      getArrayDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
    ['pricingModel', getPricingModelDecoder()],
    ['reputationScore', getU32Decoder()],
    ['totalJobsCompleted', getU32Decoder()],
    ['totalEarnings', getU64Decoder()],
    ['isActive', getBooleanDecoder()],
    ['createdAt', getI64Decoder()],
    ['updatedAt', getI64Decoder()],
    ['originalPrice', getU64Decoder()],
    ['genomeHash', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['isReplicable', getBooleanDecoder()],
    ['replicationFee', getU64Decoder()],
    [
      'serviceEndpoint',
      addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder()),
    ],
    ['isVerified', getBooleanDecoder()],
    ['verificationTimestamp', getI64Decoder()],
    ['metadataUri', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    [
      'frameworkOrigin',
      addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder()),
    ],
    ['supportedTokens', getArrayDecoder(getAddressDecoder())],
    ['cnftMint', getOptionDecoder(getAddressDecoder())],
    ['merkleTree', getOptionDecoder(getAddressDecoder())],
    ['supportsA2a', getBooleanDecoder()],
    ['transferHook', getOptionDecoder(getAddressDecoder())],
    ['bump', getU8Decoder()],
  ]);
}

export function getAgentCodec(): Codec<AgentArgs, Agent> {
  return combineCodec(getAgentEncoder(), getAgentDecoder());
}

export function decodeAgent<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Agent, TAddress>;
export function decodeAgent<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Agent, TAddress>;
export function decodeAgent<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Agent, TAddress> | MaybeAccount<Agent, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getAgentDecoder()
  );
}

export async function fetchAgent<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Agent, TAddress>> {
  const maybeAccount = await fetchMaybeAgent(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeAgent<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Agent, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeAgent(maybeAccount);
}

export async function fetchAllAgent(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Agent>[]> {
  const maybeAccounts = await fetchAllMaybeAgent(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeAgent(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Agent>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeAgent(maybeAccount));
}
