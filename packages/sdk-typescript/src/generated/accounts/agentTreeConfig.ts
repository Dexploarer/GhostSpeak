/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const AGENT_TREE_CONFIG_DISCRIMINATOR = new Uint8Array([
  145, 145, 156, 0, 197, 232, 130, 245,
]);

export function getAgentTreeConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    AGENT_TREE_CONFIG_DISCRIMINATOR
  );
}

export interface AgentTreeConfig {
  discriminator: ReadonlyUint8Array;
  /** Tree creator/owner */
  treeCreator: Address;
  /** Tree delegate authority */
  treeDelegate: Address;
  /** Number of agents minted in this tree */
  numMinted: bigint;
  /** Bump seed */
  bump: number;
}

export interface AgentTreeConfigArgs {
  /** Tree creator/owner */
  treeCreator: Address;
  /** Tree delegate authority */
  treeDelegate: Address;
  /** Number of agents minted in this tree */
  numMinted: number | bigint;
  /** Bump seed */
  bump: number;
}

export function getAgentTreeConfigEncoder(): Encoder<AgentTreeConfigArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['treeCreator', getAddressEncoder()],
      ['treeDelegate', getAddressEncoder()],
      ['numMinted', getU64Encoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: AGENT_TREE_CONFIG_DISCRIMINATOR })
  );
}

export function getAgentTreeConfigDecoder(): Decoder<AgentTreeConfig> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['treeCreator', getAddressDecoder()],
    ['treeDelegate', getAddressDecoder()],
    ['numMinted', getU64Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getAgentTreeConfigCodec(): Codec<
  AgentTreeConfigArgs,
  AgentTreeConfig
> {
  return combineCodec(getAgentTreeConfigEncoder(), getAgentTreeConfigDecoder());
}

export function decodeAgentTreeConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<AgentTreeConfig, TAddress>;
export function decodeAgentTreeConfig<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<AgentTreeConfig, TAddress>;
export function decodeAgentTreeConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<AgentTreeConfig, TAddress>
  | MaybeAccount<AgentTreeConfig, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getAgentTreeConfigDecoder()
  );
}

export async function fetchAgentTreeConfig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<AgentTreeConfig, TAddress>> {
  const maybeAccount = await fetchMaybeAgentTreeConfig(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeAgentTreeConfig<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<AgentTreeConfig, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeAgentTreeConfig(maybeAccount);
}

export async function fetchAllAgentTreeConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig
): Promise<Account<AgentTreeConfig>[]> {
  const maybeAccounts = await fetchAllMaybeAgentTreeConfig(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeAgentTreeConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig
): Promise<MaybeAccount<AgentTreeConfig>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeAgentTreeConfig(maybeAccount)
  );
}

export function getAgentTreeConfigSize(): number {
  return 81;
}
