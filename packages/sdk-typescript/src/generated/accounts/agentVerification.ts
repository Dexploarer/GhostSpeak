/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getAgentVerificationDataDecoder,
  getAgentVerificationDataEncoder,
  type AgentVerificationData,
  type AgentVerificationDataArgs,
} from '../types';

export const AGENT_VERIFICATION_DISCRIMINATOR = new Uint8Array([
  128, 155, 95, 241, 66, 207, 166, 59,
]);

export function getAgentVerificationDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    AGENT_VERIFICATION_DISCRIMINATOR
  );
}

export interface AgentVerification {
  discriminator: ReadonlyUint8Array;
  agent: Address;
  verifier: Address;
  verificationData: AgentVerificationData;
  createdAt: bigint;
  expiresAt: bigint;
  isActive: boolean;
  bump: number;
}

export interface AgentVerificationArgs {
  agent: Address;
  verifier: Address;
  verificationData: AgentVerificationDataArgs;
  createdAt: number | bigint;
  expiresAt: number | bigint;
  isActive: boolean;
  bump: number;
}

export function getAgentVerificationEncoder(): Encoder<AgentVerificationArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['agent', getAddressEncoder()],
      ['verifier', getAddressEncoder()],
      ['verificationData', getAgentVerificationDataEncoder()],
      ['createdAt', getI64Encoder()],
      ['expiresAt', getI64Encoder()],
      ['isActive', getBooleanEncoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: AGENT_VERIFICATION_DISCRIMINATOR })
  );
}

export function getAgentVerificationDecoder(): Decoder<AgentVerification> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['agent', getAddressDecoder()],
    ['verifier', getAddressDecoder()],
    ['verificationData', getAgentVerificationDataDecoder()],
    ['createdAt', getI64Decoder()],
    ['expiresAt', getI64Decoder()],
    ['isActive', getBooleanDecoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getAgentVerificationCodec(): Codec<
  AgentVerificationArgs,
  AgentVerification
> {
  return combineCodec(
    getAgentVerificationEncoder(),
    getAgentVerificationDecoder()
  );
}

export function decodeAgentVerification<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<AgentVerification, TAddress>;
export function decodeAgentVerification<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<AgentVerification, TAddress>;
export function decodeAgentVerification<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<AgentVerification, TAddress>
  | MaybeAccount<AgentVerification, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getAgentVerificationDecoder()
  );
}

export async function fetchAgentVerification<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<AgentVerification, TAddress>> {
  const maybeAccount = await fetchMaybeAgentVerification(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeAgentVerification<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<AgentVerification, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeAgentVerification(maybeAccount);
}

export async function fetchAllAgentVerification(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig
): Promise<Account<AgentVerification>[]> {
  const maybeAccounts = await fetchAllMaybeAgentVerification(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeAgentVerification(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig
): Promise<MaybeAccount<AgentVerification>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeAgentVerification(maybeAccount)
  );
}
