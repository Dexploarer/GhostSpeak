/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const ANALYTICS_DASHBOARD_DISCRIMINATOR = new Uint8Array([
  50, 162, 197, 10, 93, 40, 12, 147,
]);

export function getAnalyticsDashboardDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    ANALYTICS_DASHBOARD_DISCRIMINATOR
  );
}

export interface AnalyticsDashboard {
  discriminator: ReadonlyUint8Array;
  dashboardId: bigint;
  owner: Address;
  metrics: string;
  createdAt: bigint;
  updatedAt: bigint;
  bump: number;
}

export interface AnalyticsDashboardArgs {
  dashboardId: number | bigint;
  owner: Address;
  metrics: string;
  createdAt: number | bigint;
  updatedAt: number | bigint;
  bump: number;
}

export function getAnalyticsDashboardEncoder(): Encoder<AnalyticsDashboardArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['dashboardId', getU64Encoder()],
      ['owner', getAddressEncoder()],
      ['metrics', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['createdAt', getI64Encoder()],
      ['updatedAt', getI64Encoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: ANALYTICS_DASHBOARD_DISCRIMINATOR })
  );
}

export function getAnalyticsDashboardDecoder(): Decoder<AnalyticsDashboard> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['dashboardId', getU64Decoder()],
    ['owner', getAddressDecoder()],
    ['metrics', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['createdAt', getI64Decoder()],
    ['updatedAt', getI64Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getAnalyticsDashboardCodec(): Codec<
  AnalyticsDashboardArgs,
  AnalyticsDashboard
> {
  return combineCodec(
    getAnalyticsDashboardEncoder(),
    getAnalyticsDashboardDecoder()
  );
}

export function decodeAnalyticsDashboard<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<AnalyticsDashboard, TAddress>;
export function decodeAnalyticsDashboard<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<AnalyticsDashboard, TAddress>;
export function decodeAnalyticsDashboard<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<AnalyticsDashboard, TAddress>
  | MaybeAccount<AnalyticsDashboard, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getAnalyticsDashboardDecoder()
  );
}

export async function fetchAnalyticsDashboard<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<AnalyticsDashboard, TAddress>> {
  const maybeAccount = await fetchMaybeAnalyticsDashboard(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeAnalyticsDashboard<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<AnalyticsDashboard, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeAnalyticsDashboard(maybeAccount);
}

export async function fetchAllAnalyticsDashboard(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig
): Promise<Account<AnalyticsDashboard>[]> {
  const maybeAccounts = await fetchAllMaybeAnalyticsDashboard(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeAnalyticsDashboard(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig
): Promise<MaybeAccount<AnalyticsDashboard>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeAnalyticsDashboard(maybeAccount)
  );
}
