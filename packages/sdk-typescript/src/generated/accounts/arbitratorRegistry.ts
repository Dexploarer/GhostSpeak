/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const ARBITRATOR_REGISTRY_DISCRIMINATOR = new Uint8Array([
  252, 241, 152, 150, 74, 0, 119, 175,
]);

export function getArbitratorRegistryDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    ARBITRATOR_REGISTRY_DISCRIMINATOR
  );
}

export type ArbitratorRegistry = {
  discriminator: ReadonlyUint8Array;
  authority: Address;
  authorizedArbitrators: Array<Address>;
  createdAt: bigint;
  updatedAt: bigint;
  bump: number;
};

export type ArbitratorRegistryArgs = {
  authority: Address;
  authorizedArbitrators: Array<Address>;
  createdAt: number | bigint;
  updatedAt: number | bigint;
  bump: number;
};

export function getArbitratorRegistryEncoder(): Encoder<ArbitratorRegistryArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['authority', getAddressEncoder()],
      ['authorizedArbitrators', getArrayEncoder(getAddressEncoder())],
      ['createdAt', getI64Encoder()],
      ['updatedAt', getI64Encoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: ARBITRATOR_REGISTRY_DISCRIMINATOR })
  );
}

export function getArbitratorRegistryDecoder(): Decoder<ArbitratorRegistry> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['authority', getAddressDecoder()],
    ['authorizedArbitrators', getArrayDecoder(getAddressDecoder())],
    ['createdAt', getI64Decoder()],
    ['updatedAt', getI64Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getArbitratorRegistryCodec(): Codec<
  ArbitratorRegistryArgs,
  ArbitratorRegistry
> {
  return combineCodec(
    getArbitratorRegistryEncoder(),
    getArbitratorRegistryDecoder()
  );
}

export function decodeArbitratorRegistry<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<ArbitratorRegistry, TAddress>;
export function decodeArbitratorRegistry<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<ArbitratorRegistry, TAddress>;
export function decodeArbitratorRegistry<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<ArbitratorRegistry, TAddress>
  | MaybeAccount<ArbitratorRegistry, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getArbitratorRegistryDecoder()
  );
}

export async function fetchArbitratorRegistry<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<ArbitratorRegistry, TAddress>> {
  const maybeAccount = await fetchMaybeArbitratorRegistry(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeArbitratorRegistry<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<ArbitratorRegistry, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeArbitratorRegistry(maybeAccount);
}

export async function fetchAllArbitratorRegistry(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<ArbitratorRegistry>[]> {
  const maybeAccounts = await fetchAllMaybeArbitratorRegistry(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeArbitratorRegistry(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<ArbitratorRegistry>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeArbitratorRegistry(maybeAccount)
  );
}
