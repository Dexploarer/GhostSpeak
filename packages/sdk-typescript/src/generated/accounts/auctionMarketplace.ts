/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type Option,
  type OptionOrNullable,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getAuctionBidDecoder,
  getAuctionBidEncoder,
  getAuctionStatusDecoder,
  getAuctionStatusEncoder,
  getAuctionTypeDecoder,
  getAuctionTypeEncoder,
  getDutchAuctionConfigDecoder,
  getDutchAuctionConfigEncoder,
  type AuctionBid,
  type AuctionBidArgs,
  type AuctionStatus,
  type AuctionStatusArgs,
  type AuctionType,
  type AuctionTypeArgs,
  type DutchAuctionConfig,
  type DutchAuctionConfigArgs,
} from '../types';

export const AUCTION_MARKETPLACE_DISCRIMINATOR = new Uint8Array([
  163, 174, 175, 5, 237, 55, 21, 230,
]);

export function getAuctionMarketplaceDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    AUCTION_MARKETPLACE_DISCRIMINATOR
  );
}

export type AuctionMarketplace = {
  discriminator: ReadonlyUint8Array;
  auction: Address;
  agent: Address;
  creator: Address;
  auctionType: AuctionType;
  startingPrice: bigint;
  reservePrice: bigint;
  isReserveHidden: boolean;
  reserveMet: boolean;
  currentPrice: bigint;
  currentWinner: Option<Address>;
  winner: Option<Address>;
  auctionEndTime: bigint;
  minimumBidIncrement: bigint;
  totalBids: number;
  status: AuctionStatus;
  bids: Array<AuctionBid>;
  createdAt: bigint;
  endedAt: Option<bigint>;
  metadataUri: string;
  dutchConfig: Option<DutchAuctionConfig>;
  extensionCount: number;
  originalEndTime: bigint;
  reservePriceLocked: boolean;
  reserveShortfallNotified: boolean;
  bump: number;
};

export type AuctionMarketplaceArgs = {
  auction: Address;
  agent: Address;
  creator: Address;
  auctionType: AuctionTypeArgs;
  startingPrice: number | bigint;
  reservePrice: number | bigint;
  isReserveHidden: boolean;
  reserveMet: boolean;
  currentPrice: number | bigint;
  currentWinner: OptionOrNullable<Address>;
  winner: OptionOrNullable<Address>;
  auctionEndTime: number | bigint;
  minimumBidIncrement: number | bigint;
  totalBids: number;
  status: AuctionStatusArgs;
  bids: Array<AuctionBidArgs>;
  createdAt: number | bigint;
  endedAt: OptionOrNullable<number | bigint>;
  metadataUri: string;
  dutchConfig: OptionOrNullable<DutchAuctionConfigArgs>;
  extensionCount: number;
  originalEndTime: number | bigint;
  reservePriceLocked: boolean;
  reserveShortfallNotified: boolean;
  bump: number;
};

export function getAuctionMarketplaceEncoder(): Encoder<AuctionMarketplaceArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['auction', getAddressEncoder()],
      ['agent', getAddressEncoder()],
      ['creator', getAddressEncoder()],
      ['auctionType', getAuctionTypeEncoder()],
      ['startingPrice', getU64Encoder()],
      ['reservePrice', getU64Encoder()],
      ['isReserveHidden', getBooleanEncoder()],
      ['reserveMet', getBooleanEncoder()],
      ['currentPrice', getU64Encoder()],
      ['currentWinner', getOptionEncoder(getAddressEncoder())],
      ['winner', getOptionEncoder(getAddressEncoder())],
      ['auctionEndTime', getI64Encoder()],
      ['minimumBidIncrement', getU64Encoder()],
      ['totalBids', getU32Encoder()],
      ['status', getAuctionStatusEncoder()],
      ['bids', getArrayEncoder(getAuctionBidEncoder())],
      ['createdAt', getI64Encoder()],
      ['endedAt', getOptionEncoder(getI64Encoder())],
      ['metadataUri', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['dutchConfig', getOptionEncoder(getDutchAuctionConfigEncoder())],
      ['extensionCount', getU8Encoder()],
      ['originalEndTime', getI64Encoder()],
      ['reservePriceLocked', getBooleanEncoder()],
      ['reserveShortfallNotified', getBooleanEncoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: AUCTION_MARKETPLACE_DISCRIMINATOR })
  );
}

export function getAuctionMarketplaceDecoder(): Decoder<AuctionMarketplace> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['auction', getAddressDecoder()],
    ['agent', getAddressDecoder()],
    ['creator', getAddressDecoder()],
    ['auctionType', getAuctionTypeDecoder()],
    ['startingPrice', getU64Decoder()],
    ['reservePrice', getU64Decoder()],
    ['isReserveHidden', getBooleanDecoder()],
    ['reserveMet', getBooleanDecoder()],
    ['currentPrice', getU64Decoder()],
    ['currentWinner', getOptionDecoder(getAddressDecoder())],
    ['winner', getOptionDecoder(getAddressDecoder())],
    ['auctionEndTime', getI64Decoder()],
    ['minimumBidIncrement', getU64Decoder()],
    ['totalBids', getU32Decoder()],
    ['status', getAuctionStatusDecoder()],
    ['bids', getArrayDecoder(getAuctionBidDecoder())],
    ['createdAt', getI64Decoder()],
    ['endedAt', getOptionDecoder(getI64Decoder())],
    ['metadataUri', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['dutchConfig', getOptionDecoder(getDutchAuctionConfigDecoder())],
    ['extensionCount', getU8Decoder()],
    ['originalEndTime', getI64Decoder()],
    ['reservePriceLocked', getBooleanDecoder()],
    ['reserveShortfallNotified', getBooleanDecoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getAuctionMarketplaceCodec(): Codec<
  AuctionMarketplaceArgs,
  AuctionMarketplace
> {
  return combineCodec(
    getAuctionMarketplaceEncoder(),
    getAuctionMarketplaceDecoder()
  );
}

export function decodeAuctionMarketplace<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<AuctionMarketplace, TAddress>;
export function decodeAuctionMarketplace<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<AuctionMarketplace, TAddress>;
export function decodeAuctionMarketplace<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<AuctionMarketplace, TAddress>
  | MaybeAccount<AuctionMarketplace, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getAuctionMarketplaceDecoder()
  );
}

export async function fetchAuctionMarketplace<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<AuctionMarketplace, TAddress>> {
  const maybeAccount = await fetchMaybeAuctionMarketplace(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeAuctionMarketplace<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<AuctionMarketplace, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeAuctionMarketplace(maybeAccount);
}

export async function fetchAllAuctionMarketplace(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<AuctionMarketplace>[]> {
  const maybeAccounts = await fetchAllMaybeAuctionMarketplace(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeAuctionMarketplace(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<AuctionMarketplace>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeAuctionMarketplace(maybeAccount)
  );
}
