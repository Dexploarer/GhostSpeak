import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  transformEncoder,
  type Codec,
  type Decoder,
  type Encoder,
  type ReadonlyUint8Array
} from '@solana/codecs-core';
import {
  getI64Decoder,
  getI64Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder
} from '@solana/codecs-numbers';
import {
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder
} from '@solana/codecs-data-structures';
import {
  getAddressDecoder,
  getAddressEncoder,
  type Address
} from '@solana/addresses';
import {
  assertAccountExists,
  assertAccountsExist,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  type Account,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount
} from '@solana/accounts';
import {
  getAuditConfigDecoder,
  getAuditConfigEncoder,
  getAuditEntryDecoder,
  getAuditEntryEncoder,
  getComplianceStatusDecoder,
  getComplianceStatusEncoder,
  type AuditConfig,
  type AuditConfigArgs,
  type AuditEntry,
  type AuditEntryArgs,
  type ComplianceStatus,
  type ComplianceStatusArgs,
} from '../types';
/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

export const AUDIT_TRAIL_DISCRIMINATOR = new Uint8Array([
  171, 223, 253, 181, 134, 88, 66, 26,
]);

export function getAuditTrailDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(AUDIT_TRAIL_DISCRIMINATOR);
}

export type AuditTrail = {
  discriminator: ReadonlyUint8Array;
  /** Authority that can manage this audit trail */
  authority: Address;
  /** Unique identifier for this audit trail */
  trailId: bigint;
  /** Creation timestamp */
  createdAt: bigint;
  /** Last update timestamp */
  updatedAt: bigint;
  /** Version for compatibility */
  version: number;
  /** Audit entries (immutable log) */
  entries: Array<AuditEntry>;
  /** Trail configuration */
  config: AuditConfig;
  /** Compliance status */
  complianceStatus: ComplianceStatus;
  /** Hash chain for integrity verification */
  hashChain: Array<ReadonlyUint8Array>;
  /** Reserved space for future extensions */
  reserved: ReadonlyUint8Array;
};

export type AuditTrailArgs = {
  /** Authority that can manage this audit trail */
  authority: Address;
  /** Unique identifier for this audit trail */
  trailId: number | bigint;
  /** Creation timestamp */
  createdAt: number | bigint;
  /** Last update timestamp */
  updatedAt: number | bigint;
  /** Version for compatibility */
  version: number;
  /** Audit entries (immutable log) */
  entries: Array<AuditEntryArgs>;
  /** Trail configuration */
  config: AuditConfigArgs;
  /** Compliance status */
  complianceStatus: ComplianceStatusArgs;
  /** Hash chain for integrity verification */
  hashChain: Array<ReadonlyUint8Array>;
  /** Reserved space for future extensions */
  reserved: ReadonlyUint8Array;
};

export function getAuditTrailEncoder(): Encoder<AuditTrailArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['authority', getAddressEncoder()],
      ['trailId', getU64Encoder()],
      ['createdAt', getI64Encoder()],
      ['updatedAt', getI64Encoder()],
      ['version', getU8Encoder()],
      ['entries', getArrayEncoder(getAuditEntryEncoder())],
      ['config', getAuditConfigEncoder()],
      ['complianceStatus', getComplianceStatusEncoder()],
      ['hashChain', getArrayEncoder(fixEncoderSize(getBytesEncoder(), 32))],
      ['reserved', fixEncoderSize(getBytesEncoder(), 128)],
    ]),
    (value) => ({ ...value, discriminator: AUDIT_TRAIL_DISCRIMINATOR })
  );
}

export function getAuditTrailDecoder(): Decoder<AuditTrail> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['authority', getAddressDecoder()],
    ['trailId', getU64Decoder()],
    ['createdAt', getI64Decoder()],
    ['updatedAt', getI64Decoder()],
    ['version', getU8Decoder()],
    ['entries', getArrayDecoder(getAuditEntryDecoder())],
    ['config', getAuditConfigDecoder()],
    ['complianceStatus', getComplianceStatusDecoder()],
    ['hashChain', getArrayDecoder(fixDecoderSize(getBytesDecoder(), 32))],
    ['reserved', fixDecoderSize(getBytesDecoder(), 128)],
  ]);
}

export function getAuditTrailCodec(): Codec<AuditTrailArgs, AuditTrail> {
  return combineCodec(getAuditTrailEncoder(), getAuditTrailDecoder());
}

export function decodeAuditTrail<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<AuditTrail, TAddress>;
export function decodeAuditTrail<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<AuditTrail, TAddress>;
export function decodeAuditTrail<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<AuditTrail, TAddress> | MaybeAccount<AuditTrail, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getAuditTrailDecoder()
  );
}

export async function fetchAuditTrail<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<AuditTrail, TAddress>> {
  const maybeAccount = await fetchMaybeAuditTrail(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeAuditTrail<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<AuditTrail, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeAuditTrail(maybeAccount);
}

export async function fetchAllAuditTrail(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<AuditTrail>[]> {
  const maybeAccounts = await fetchAllMaybeAuditTrail(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeAuditTrail(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<AuditTrail>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeAuditTrail(maybeAccount));
}
