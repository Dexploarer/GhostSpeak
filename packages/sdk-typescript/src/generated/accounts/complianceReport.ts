/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type Option,
  type OptionOrNullable,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getReportDataDecoder,
  getReportDataEncoder,
  getReportStatusDecoder,
  getReportStatusEncoder,
  getReportTypeDecoder,
  getReportTypeEncoder,
  getSubmissionDetailsDecoder,
  getSubmissionDetailsEncoder,
  type ReportData,
  type ReportDataArgs,
  type ReportStatus,
  type ReportStatusArgs,
  type ReportType,
  type ReportTypeArgs,
  type SubmissionDetails,
  type SubmissionDetailsArgs,
} from '../types';

export const COMPLIANCE_REPORT_DISCRIMINATOR = new Uint8Array([
  75, 146, 78, 26, 130, 240, 228, 35,
]);

export function getComplianceReportDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    COMPLIANCE_REPORT_DISCRIMINATOR
  );
}

export type ComplianceReport = {
  discriminator: ReadonlyUint8Array;
  /** Report ID */
  reportId: bigint;
  /** Report type */
  reportType: ReportType;
  /** Generation timestamp */
  generatedAt: bigint;
  /** Reporting period start */
  periodStart: bigint;
  /** Reporting period end */
  periodEnd: bigint;
  /** Report data */
  reportData: ReportData;
  /** Digital signature for authenticity */
  signature: ReadonlyUint8Array;
  /** Report status */
  status: ReportStatus;
  /** Submission details */
  submissionDetails: Option<SubmissionDetails>;
  /** Reserved space */
  reserved: ReadonlyUint8Array;
};

export type ComplianceReportArgs = {
  /** Report ID */
  reportId: number | bigint;
  /** Report type */
  reportType: ReportTypeArgs;
  /** Generation timestamp */
  generatedAt: number | bigint;
  /** Reporting period start */
  periodStart: number | bigint;
  /** Reporting period end */
  periodEnd: number | bigint;
  /** Report data */
  reportData: ReportDataArgs;
  /** Digital signature for authenticity */
  signature: ReadonlyUint8Array;
  /** Report status */
  status: ReportStatusArgs;
  /** Submission details */
  submissionDetails: OptionOrNullable<SubmissionDetailsArgs>;
  /** Reserved space */
  reserved: ReadonlyUint8Array;
};

export function getComplianceReportEncoder(): Encoder<ComplianceReportArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['reportId', getU64Encoder()],
      ['reportType', getReportTypeEncoder()],
      ['generatedAt', getI64Encoder()],
      ['periodStart', getI64Encoder()],
      ['periodEnd', getI64Encoder()],
      ['reportData', getReportDataEncoder()],
      ['signature', fixEncoderSize(getBytesEncoder(), 64)],
      ['status', getReportStatusEncoder()],
      ['submissionDetails', getOptionEncoder(getSubmissionDetailsEncoder())],
      ['reserved', fixEncoderSize(getBytesEncoder(), 64)],
    ]),
    (value) => ({ ...value, discriminator: COMPLIANCE_REPORT_DISCRIMINATOR })
  );
}

export function getComplianceReportDecoder(): Decoder<ComplianceReport> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['reportId', getU64Decoder()],
    ['reportType', getReportTypeDecoder()],
    ['generatedAt', getI64Decoder()],
    ['periodStart', getI64Decoder()],
    ['periodEnd', getI64Decoder()],
    ['reportData', getReportDataDecoder()],
    ['signature', fixDecoderSize(getBytesDecoder(), 64)],
    ['status', getReportStatusDecoder()],
    ['submissionDetails', getOptionDecoder(getSubmissionDetailsDecoder())],
    ['reserved', fixDecoderSize(getBytesDecoder(), 64)],
  ]);
}

export function getComplianceReportCodec(): Codec<
  ComplianceReportArgs,
  ComplianceReport
> {
  return combineCodec(
    getComplianceReportEncoder(),
    getComplianceReportDecoder()
  );
}

export function decodeComplianceReport<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<ComplianceReport, TAddress>;
export function decodeComplianceReport<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<ComplianceReport, TAddress>;
export function decodeComplianceReport<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<ComplianceReport, TAddress>
  | MaybeAccount<ComplianceReport, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getComplianceReportDecoder()
  );
}

export async function fetchComplianceReport<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<ComplianceReport, TAddress>> {
  const maybeAccount = await fetchMaybeComplianceReport(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeComplianceReport<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<ComplianceReport, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeComplianceReport(maybeAccount);
}

export async function fetchAllComplianceReport(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<ComplianceReport>[]> {
  const maybeAccounts = await fetchAllMaybeComplianceReport(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeComplianceReport(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<ComplianceReport>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeComplianceReport(maybeAccount)
  );
}
