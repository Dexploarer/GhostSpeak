import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  transformEncoder,
  type Codec,
  type Decoder,
  type Encoder,
  type ReadonlyUint8Array
} from '@solana/codecs-core';
import {
  getUtf8Decoder,
  getUtf8Encoder
} from '@solana/codecs-strings';
import {
  getF32Decoder,
  getF32Encoder,
  getI64Decoder,
  getI64Encoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder
} from '@solana/codecs-numbers';
import {
  getArrayDecoder,
  getArrayEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder
} from '@solana/codecs-data-structures';
import {
  getOptionDecoder,
  getOptionEncoder,
  type Option,
  type OptionOrNullable
} from '@solana/options';
import {
  getAddressDecoder,
  getAddressEncoder,
  type Address
} from '@solana/addresses';
import {
  assertAccountExists,
  assertAccountsExist,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  type Account,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount
} from '@solana/accounts';
import {
  getDisputeEvidenceDecoder,
  getDisputeEvidenceEncoder,
  getDisputeStatusDecoder,
  getDisputeStatusEncoder,
  type DisputeEvidence,
  type DisputeEvidenceArgs,
  type DisputeStatus,
  type DisputeStatusArgs,
} from '../types';
/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

export const DISPUTE_CASE_DISCRIMINATOR = new Uint8Array([
  164, 200, 54, 239, 94, 76, 51, 130,
]);

export function getDisputeCaseDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    DISPUTE_CASE_DISCRIMINATOR
  );
}

export type DisputeCase = {
  discriminator: ReadonlyUint8Array;
  transaction: Address;
  complainant: Address;
  respondent: Address;
  moderator: Option<Address>;
  reason: string;
  status: DisputeStatus;
  evidence: Array<DisputeEvidence>;
  resolution: Option<string>;
  aiScore: number;
  humanReview: boolean;
  createdAt: bigint;
  resolvedAt: Option<bigint>;
  bump: number;
};

export type DisputeCaseArgs = {
  transaction: Address;
  complainant: Address;
  respondent: Address;
  moderator: OptionOrNullable<Address>;
  reason: string;
  status: DisputeStatusArgs;
  evidence: Array<DisputeEvidenceArgs>;
  resolution: OptionOrNullable<string>;
  aiScore: number;
  humanReview: boolean;
  createdAt: number | bigint;
  resolvedAt: OptionOrNullable<number | bigint>;
  bump: number;
};

export function getDisputeCaseEncoder(): Encoder<DisputeCaseArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['transaction', getAddressEncoder()],
      ['complainant', getAddressEncoder()],
      ['respondent', getAddressEncoder()],
      ['moderator', getOptionEncoder(getAddressEncoder())],
      ['reason', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['status', getDisputeStatusEncoder()],
      ['evidence', getArrayEncoder(getDisputeEvidenceEncoder())],
      [
        'resolution',
        getOptionEncoder(
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())
        ),
      ],
      ['aiScore', getF32Encoder()],
      ['humanReview', getBooleanEncoder()],
      ['createdAt', getI64Encoder()],
      ['resolvedAt', getOptionEncoder(getI64Encoder())],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: DISPUTE_CASE_DISCRIMINATOR })
  );
}

export function getDisputeCaseDecoder(): Decoder<DisputeCase> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['transaction', getAddressDecoder()],
    ['complainant', getAddressDecoder()],
    ['respondent', getAddressDecoder()],
    ['moderator', getOptionDecoder(getAddressDecoder())],
    ['reason', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['status', getDisputeStatusDecoder()],
    ['evidence', getArrayDecoder(getDisputeEvidenceDecoder())],
    [
      'resolution',
      getOptionDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
    ['aiScore', getF32Decoder()],
    ['humanReview', getBooleanDecoder()],
    ['createdAt', getI64Decoder()],
    ['resolvedAt', getOptionDecoder(getI64Decoder())],
    ['bump', getU8Decoder()],
  ]);
}

export function getDisputeCaseCodec(): Codec<DisputeCaseArgs, DisputeCase> {
  return combineCodec(getDisputeCaseEncoder(), getDisputeCaseDecoder());
}

export function decodeDisputeCase<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<DisputeCase, TAddress>;
export function decodeDisputeCase<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<DisputeCase, TAddress>;
export function decodeDisputeCase<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<DisputeCase, TAddress> | MaybeAccount<DisputeCase, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getDisputeCaseDecoder()
  );
}

export async function fetchDisputeCase<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<DisputeCase, TAddress>> {
  const maybeAccount = await fetchMaybeDisputeCase(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeDisputeCase<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<DisputeCase, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeDisputeCase(maybeAccount);
}

export async function fetchAllDisputeCase(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<DisputeCase>[]> {
  const maybeAccounts = await fetchAllMaybeDisputeCase(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeDisputeCase(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<DisputeCase>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeDisputeCase(maybeAccount));
}
