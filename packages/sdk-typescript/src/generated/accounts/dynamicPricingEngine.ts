import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  transformEncoder,
  type Codec,
  type Decoder,
  type Encoder,
  type ReadonlyUint8Array
} from '@solana/codecs-core';
import {
  getI64Decoder,
  getI64Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder
} from '@solana/codecs-numbers';
import {
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder
} from '@solana/codecs-data-structures';
import {
  getAddressDecoder,
  getAddressEncoder,
  type Address
} from '@solana/addresses';
import {
  assertAccountExists,
  assertAccountsExist,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  type Account,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount
} from '@solana/accounts';
import {
  getDynamicPricingConfigDecoder,
  getDynamicPricingConfigEncoder,
  getPricingAlgorithmDecoder,
  getPricingAlgorithmEncoder,
  type DynamicPricingConfig,
  type DynamicPricingConfigArgs,
  type PricingAlgorithm,
  type PricingAlgorithmArgs,
} from '../types';
/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

export const DYNAMIC_PRICING_ENGINE_DISCRIMINATOR = new Uint8Array([
  213, 106, 173, 92, 14, 72, 162, 175,
]);

export function getDynamicPricingEngineDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    DYNAMIC_PRICING_ENGINE_DISCRIMINATOR
  );
}

export type DynamicPricingEngine = {
  discriminator: ReadonlyUint8Array;
  engineId: bigint;
  agent: Address;
  algorithm: PricingAlgorithm;
  config: DynamicPricingConfig;
  currentPrice: bigint;
  lastUpdated: bigint;
  isActive: boolean;
  bump: number;
};

export type DynamicPricingEngineArgs = {
  engineId: number | bigint;
  agent: Address;
  algorithm: PricingAlgorithmArgs;
  config: DynamicPricingConfigArgs;
  currentPrice: number | bigint;
  lastUpdated: number | bigint;
  isActive: boolean;
  bump: number;
};

export function getDynamicPricingEngineEncoder(): Encoder<DynamicPricingEngineArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['engineId', getU64Encoder()],
      ['agent', getAddressEncoder()],
      ['algorithm', getPricingAlgorithmEncoder()],
      ['config', getDynamicPricingConfigEncoder()],
      ['currentPrice', getU64Encoder()],
      ['lastUpdated', getI64Encoder()],
      ['isActive', getBooleanEncoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: DYNAMIC_PRICING_ENGINE_DISCRIMINATOR,
    })
  );
}

export function getDynamicPricingEngineDecoder(): Decoder<DynamicPricingEngine> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['engineId', getU64Decoder()],
    ['agent', getAddressDecoder()],
    ['algorithm', getPricingAlgorithmDecoder()],
    ['config', getDynamicPricingConfigDecoder()],
    ['currentPrice', getU64Decoder()],
    ['lastUpdated', getI64Decoder()],
    ['isActive', getBooleanDecoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getDynamicPricingEngineCodec(): Codec<
  DynamicPricingEngineArgs,
  DynamicPricingEngine
> {
  return combineCodec(
    getDynamicPricingEngineEncoder(),
    getDynamicPricingEngineDecoder()
  );
}

export function decodeDynamicPricingEngine<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<DynamicPricingEngine, TAddress>;
export function decodeDynamicPricingEngine<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<DynamicPricingEngine, TAddress>;
export function decodeDynamicPricingEngine<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<DynamicPricingEngine, TAddress>
  | MaybeAccount<DynamicPricingEngine, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getDynamicPricingEngineDecoder()
  );
}

export async function fetchDynamicPricingEngine<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<DynamicPricingEngine, TAddress>> {
  const maybeAccount = await fetchMaybeDynamicPricingEngine(
    rpc,
    address,
    config
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeDynamicPricingEngine<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<DynamicPricingEngine, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeDynamicPricingEngine(maybeAccount);
}

export async function fetchAllDynamicPricingEngine(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<DynamicPricingEngine>[]> {
  const maybeAccounts = await fetchAllMaybeDynamicPricingEngine(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeDynamicPricingEngine(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<DynamicPricingEngine>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeDynamicPricingEngine(maybeAccount)
  );
}
