/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type Option,
  type OptionOrNullable,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getEscrowStatusDecoder,
  getEscrowStatusEncoder,
  type EscrowStatus,
  type EscrowStatusArgs,
} from '../types';

export const ESCROW_DISCRIMINATOR = new Uint8Array([
  31, 213, 123, 187, 186, 22, 218, 155,
]);

export function getEscrowDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(ESCROW_DISCRIMINATOR);
}

export type Escrow = {
  discriminator: ReadonlyUint8Array;
  client: Address;
  agent: Address;
  taskId: string;
  amount: bigint;
  status: EscrowStatus;
  createdAt: bigint;
  expiresAt: bigint;
  disputeReason: Option<string>;
  resolutionNotes: Option<string>;
  paymentToken: Address;
  transferHook: Option<Address>;
  isConfidential: boolean;
  bump: number;
};

export type EscrowArgs = {
  client: Address;
  agent: Address;
  taskId: string;
  amount: number | bigint;
  status: EscrowStatusArgs;
  createdAt: number | bigint;
  expiresAt: number | bigint;
  disputeReason: OptionOrNullable<string>;
  resolutionNotes: OptionOrNullable<string>;
  paymentToken: Address;
  transferHook: OptionOrNullable<Address>;
  isConfidential: boolean;
  bump: number;
};

export function getEscrowEncoder(): Encoder<EscrowArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['client', getAddressEncoder()],
      ['agent', getAddressEncoder()],
      ['taskId', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['amount', getU64Encoder()],
      ['status', getEscrowStatusEncoder()],
      ['createdAt', getI64Encoder()],
      ['expiresAt', getI64Encoder()],
      [
        'disputeReason',
        getOptionEncoder(
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())
        ),
      ],
      [
        'resolutionNotes',
        getOptionEncoder(
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())
        ),
      ],
      ['paymentToken', getAddressEncoder()],
      ['transferHook', getOptionEncoder(getAddressEncoder())],
      ['isConfidential', getBooleanEncoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: ESCROW_DISCRIMINATOR })
  );
}

export function getEscrowDecoder(): Decoder<Escrow> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['client', getAddressDecoder()],
    ['agent', getAddressDecoder()],
    ['taskId', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['amount', getU64Decoder()],
    ['status', getEscrowStatusDecoder()],
    ['createdAt', getI64Decoder()],
    ['expiresAt', getI64Decoder()],
    [
      'disputeReason',
      getOptionDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
    [
      'resolutionNotes',
      getOptionDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
    ['paymentToken', getAddressDecoder()],
    ['transferHook', getOptionDecoder(getAddressDecoder())],
    ['isConfidential', getBooleanDecoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getEscrowCodec(): Codec<EscrowArgs, Escrow> {
  return combineCodec(getEscrowEncoder(), getEscrowDecoder());
}

export function decodeEscrow<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Escrow, TAddress>;
export function decodeEscrow<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Escrow, TAddress>;
export function decodeEscrow<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Escrow, TAddress> | MaybeAccount<Escrow, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getEscrowDecoder()
  );
}

export async function fetchEscrow<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Escrow, TAddress>> {
  const maybeAccount = await fetchMaybeEscrow(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeEscrow<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Escrow, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeEscrow(maybeAccount);
}

export async function fetchAllEscrow(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Escrow>[]> {
  const maybeAccounts = await fetchAllMaybeEscrow(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeEscrow(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Escrow>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeEscrow(maybeAccount));
}
