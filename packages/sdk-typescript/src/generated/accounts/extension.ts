import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  transformEncoder,
  type Codec,
  type Decoder,
  type Encoder,
  type ReadonlyUint8Array
} from '@solana/codecs-core';
import {
  getUtf8Decoder,
  getUtf8Encoder
} from '@solana/codecs-strings';
import {
  getF64Decoder,
  getF64Encoder,
  getI64Decoder,
  getI64Encoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder
} from '@solana/codecs-numbers';
import {
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder
} from '@solana/codecs-data-structures';
import {
  getAddressDecoder,
  getAddressEncoder,
  type Address
} from '@solana/addresses';
import {
  assertAccountExists,
  assertAccountsExist,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  type Account,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount
} from '@solana/accounts';
import {
  getExtensionMetadataDecoder,
  getExtensionMetadataEncoder,
  getExtensionStatusDecoder,
  getExtensionStatusEncoder,
  getExtensionTypeDecoder,
  getExtensionTypeEncoder,
  type ExtensionMetadata,
  type ExtensionMetadataArgs,
  type ExtensionStatus,
  type ExtensionStatusArgs,
  type ExtensionType,
  type ExtensionTypeArgs,
} from '../types';
/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

export const EXTENSION_DISCRIMINATOR = new Uint8Array([
  141, 183, 126, 42, 23, 237, 11, 5,
]);

export function getExtensionDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(EXTENSION_DISCRIMINATOR);
}

export type Extension = {
  discriminator: ReadonlyUint8Array;
  extension: Address;
  developer: Address;
  extensionType: ExtensionType;
  status: ExtensionStatus;
  metadata: ExtensionMetadata;
  codeHash: string;
  installCount: number;
  rating: number;
  revenueShare: number;
  totalEarnings: bigint;
  createdAt: bigint;
  bump: number;
};

export type ExtensionArgs = {
  extension: Address;
  developer: Address;
  extensionType: ExtensionTypeArgs;
  status: ExtensionStatusArgs;
  metadata: ExtensionMetadataArgs;
  codeHash: string;
  installCount: number;
  rating: number;
  revenueShare: number;
  totalEarnings: number | bigint;
  createdAt: number | bigint;
  bump: number;
};

export function getExtensionEncoder(): Encoder<ExtensionArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['extension', getAddressEncoder()],
      ['developer', getAddressEncoder()],
      ['extensionType', getExtensionTypeEncoder()],
      ['status', getExtensionStatusEncoder()],
      ['metadata', getExtensionMetadataEncoder()],
      ['codeHash', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['installCount', getU32Encoder()],
      ['rating', getF64Encoder()],
      ['revenueShare', getF64Encoder()],
      ['totalEarnings', getU64Encoder()],
      ['createdAt', getI64Encoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: EXTENSION_DISCRIMINATOR })
  );
}

export function getExtensionDecoder(): Decoder<Extension> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['extension', getAddressDecoder()],
    ['developer', getAddressDecoder()],
    ['extensionType', getExtensionTypeDecoder()],
    ['status', getExtensionStatusDecoder()],
    ['metadata', getExtensionMetadataDecoder()],
    ['codeHash', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['installCount', getU32Decoder()],
    ['rating', getF64Decoder()],
    ['revenueShare', getF64Decoder()],
    ['totalEarnings', getU64Decoder()],
    ['createdAt', getI64Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getExtensionCodec(): Codec<ExtensionArgs, Extension> {
  return combineCodec(getExtensionEncoder(), getExtensionDecoder());
}

export function decodeExtension<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Extension, TAddress>;
export function decodeExtension<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Extension, TAddress>;
export function decodeExtension<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Extension, TAddress> | MaybeAccount<Extension, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getExtensionDecoder()
  );
}

export async function fetchExtension<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Extension, TAddress>> {
  const maybeAccount = await fetchMaybeExtension(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeExtension<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Extension, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeExtension(maybeAccount);
}

export async function fetchAllExtension(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Extension>[]> {
  const maybeAccounts = await fetchAllMaybeExtension(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeExtension(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Extension>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeExtension(maybeAccount));
}
