/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getIncentiveConfigDecoder,
  getIncentiveConfigEncoder,
  type IncentiveConfig,
  type IncentiveConfigArgs,
} from '../types';

export const INCENTIVE_PROGRAM_DISCRIMINATOR = new Uint8Array([
  148, 35, 75, 198, 179, 216, 77, 84,
]);

export function getIncentiveProgramDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INCENTIVE_PROGRAM_DISCRIMINATOR
  );
}

export type IncentiveProgram = {
  discriminator: ReadonlyUint8Array;
  owner: Address;
  config: IncentiveConfig;
  totalRewardsDistributed: bigint;
  isActive: boolean;
  createdAt: bigint;
  updatedAt: bigint;
  bump: number;
};

export type IncentiveProgramArgs = {
  owner: Address;
  config: IncentiveConfigArgs;
  totalRewardsDistributed: number | bigint;
  isActive: boolean;
  createdAt: number | bigint;
  updatedAt: number | bigint;
  bump: number;
};

export function getIncentiveProgramEncoder(): FixedSizeEncoder<IncentiveProgramArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['owner', getAddressEncoder()],
      ['config', getIncentiveConfigEncoder()],
      ['totalRewardsDistributed', getU64Encoder()],
      ['isActive', getBooleanEncoder()],
      ['createdAt', getI64Encoder()],
      ['updatedAt', getI64Encoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: INCENTIVE_PROGRAM_DISCRIMINATOR })
  );
}

export function getIncentiveProgramDecoder(): FixedSizeDecoder<IncentiveProgram> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['owner', getAddressDecoder()],
    ['config', getIncentiveConfigDecoder()],
    ['totalRewardsDistributed', getU64Decoder()],
    ['isActive', getBooleanDecoder()],
    ['createdAt', getI64Decoder()],
    ['updatedAt', getI64Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getIncentiveProgramCodec(): FixedSizeCodec<
  IncentiveProgramArgs,
  IncentiveProgram
> {
  return combineCodec(
    getIncentiveProgramEncoder(),
    getIncentiveProgramDecoder()
  );
}

export function decodeIncentiveProgram<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<IncentiveProgram, TAddress>;
export function decodeIncentiveProgram<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<IncentiveProgram, TAddress>;
export function decodeIncentiveProgram<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<IncentiveProgram, TAddress>
  | MaybeAccount<IncentiveProgram, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getIncentiveProgramDecoder()
  );
}

export async function fetchIncentiveProgram<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<IncentiveProgram, TAddress>> {
  const maybeAccount = await fetchMaybeIncentiveProgram(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeIncentiveProgram<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<IncentiveProgram, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeIncentiveProgram(maybeAccount);
}

export async function fetchAllIncentiveProgram(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<IncentiveProgram>[]> {
  const maybeAccounts = await fetchAllMaybeIncentiveProgram(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeIncentiveProgram(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<IncentiveProgram>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeIncentiveProgram(maybeAccount)
  );
}

export function getIncentiveProgramSize(): number {
  return 98;
}
