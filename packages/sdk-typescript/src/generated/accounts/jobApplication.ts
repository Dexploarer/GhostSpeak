import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  transformEncoder,
  type Codec,
  type Decoder,
  type Encoder,
  type ReadonlyUint8Array
} from '@solana/codecs-core';
import {
  getUtf8Decoder,
  getUtf8Encoder
} from '@solana/codecs-strings';
import {
  getI64Decoder,
  getI64Encoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder
} from '@solana/codecs-numbers';
import {
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder
} from '@solana/codecs-data-structures';
import {
  getAddressDecoder,
  getAddressEncoder,
  type Address
} from '@solana/addresses';
import {
  assertAccountExists,
  assertAccountsExist,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  type Account,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount
} from '@solana/accounts';
import {
  getApplicationStatusDecoder,
  getApplicationStatusEncoder,
  type ApplicationStatus,
  type ApplicationStatusArgs,
} from '../types';
/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

export const JOB_APPLICATION_DISCRIMINATOR = new Uint8Array([
  114, 250, 212, 242, 162, 108, 58, 20,
]);

export function getJobApplicationDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    JOB_APPLICATION_DISCRIMINATOR
  );
}

export type JobApplication = {
  discriminator: ReadonlyUint8Array;
  jobPosting: Address;
  agent: Address;
  agentOwner: Address;
  coverLetter: string;
  proposedRate: bigint;
  estimatedDelivery: bigint;
  portfolioItems: Array<string>;
  status: ApplicationStatus;
  appliedAt: bigint;
  bump: number;
};

export type JobApplicationArgs = {
  jobPosting: Address;
  agent: Address;
  agentOwner: Address;
  coverLetter: string;
  proposedRate: number | bigint;
  estimatedDelivery: number | bigint;
  portfolioItems: Array<string>;
  status: ApplicationStatusArgs;
  appliedAt: number | bigint;
  bump: number;
};

export function getJobApplicationEncoder(): Encoder<JobApplicationArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['jobPosting', getAddressEncoder()],
      ['agent', getAddressEncoder()],
      ['agentOwner', getAddressEncoder()],
      ['coverLetter', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['proposedRate', getU64Encoder()],
      ['estimatedDelivery', getI64Encoder()],
      [
        'portfolioItems',
        getArrayEncoder(
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())
        ),
      ],
      ['status', getApplicationStatusEncoder()],
      ['appliedAt', getI64Encoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: JOB_APPLICATION_DISCRIMINATOR })
  );
}

export function getJobApplicationDecoder(): Decoder<JobApplication> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['jobPosting', getAddressDecoder()],
    ['agent', getAddressDecoder()],
    ['agentOwner', getAddressDecoder()],
    ['coverLetter', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['proposedRate', getU64Decoder()],
    ['estimatedDelivery', getI64Decoder()],
    [
      'portfolioItems',
      getArrayDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
    ['status', getApplicationStatusDecoder()],
    ['appliedAt', getI64Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getJobApplicationCodec(): Codec<
  JobApplicationArgs,
  JobApplication
> {
  return combineCodec(getJobApplicationEncoder(), getJobApplicationDecoder());
}

export function decodeJobApplication<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<JobApplication, TAddress>;
export function decodeJobApplication<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<JobApplication, TAddress>;
export function decodeJobApplication<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<JobApplication, TAddress> | MaybeAccount<JobApplication, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getJobApplicationDecoder()
  );
}

export async function fetchJobApplication<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<JobApplication, TAddress>> {
  const maybeAccount = await fetchMaybeJobApplication(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeJobApplication<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<JobApplication, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeJobApplication(maybeAccount);
}

export async function fetchAllJobApplication(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<JobApplication>[]> {
  const maybeAccounts = await fetchAllMaybeJobApplication(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeJobApplication(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<JobApplication>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeJobApplication(maybeAccount)
  );
}
