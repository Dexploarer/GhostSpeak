/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getContractStatusDecoder,
  getContractStatusEncoder,
  type ContractStatus,
  type ContractStatusArgs,
} from '../types';

export const JOB_CONTRACT_DISCRIMINATOR = new Uint8Array([
  147, 204, 137, 108, 97, 90, 113, 28,
]);

export function getJobContractDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    JOB_CONTRACT_DISCRIMINATOR
  );
}

export type JobContract = {
  discriminator: ReadonlyUint8Array;
  jobPosting: Address;
  application: Address;
  employer: Address;
  agent: Address;
  agreedRate: bigint;
  deadline: bigint;
  paymentToken: Address;
  status: ContractStatus;
  createdAt: bigint;
  updatedAt: bigint;
  bump: number;
};

export type JobContractArgs = {
  jobPosting: Address;
  application: Address;
  employer: Address;
  agent: Address;
  agreedRate: number | bigint;
  deadline: number | bigint;
  paymentToken: Address;
  status: ContractStatusArgs;
  createdAt: number | bigint;
  updatedAt: number | bigint;
  bump: number;
};

export function getJobContractEncoder(): FixedSizeEncoder<JobContractArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['jobPosting', getAddressEncoder()],
      ['application', getAddressEncoder()],
      ['employer', getAddressEncoder()],
      ['agent', getAddressEncoder()],
      ['agreedRate', getU64Encoder()],
      ['deadline', getI64Encoder()],
      ['paymentToken', getAddressEncoder()],
      ['status', getContractStatusEncoder()],
      ['createdAt', getI64Encoder()],
      ['updatedAt', getI64Encoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: JOB_CONTRACT_DISCRIMINATOR })
  );
}

export function getJobContractDecoder(): FixedSizeDecoder<JobContract> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['jobPosting', getAddressDecoder()],
    ['application', getAddressDecoder()],
    ['employer', getAddressDecoder()],
    ['agent', getAddressDecoder()],
    ['agreedRate', getU64Decoder()],
    ['deadline', getI64Decoder()],
    ['paymentToken', getAddressDecoder()],
    ['status', getContractStatusDecoder()],
    ['createdAt', getI64Decoder()],
    ['updatedAt', getI64Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getJobContractCodec(): FixedSizeCodec<
  JobContractArgs,
  JobContract
> {
  return combineCodec(getJobContractEncoder(), getJobContractDecoder());
}

export function decodeJobContract<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<JobContract, TAddress>;
export function decodeJobContract<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<JobContract, TAddress>;
export function decodeJobContract<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<JobContract, TAddress> | MaybeAccount<JobContract, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getJobContractDecoder()
  );
}

export async function fetchJobContract<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<JobContract, TAddress>> {
  const maybeAccount = await fetchMaybeJobContract(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeJobContract<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<JobContract, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeJobContract(maybeAccount);
}

export async function fetchAllJobContract(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<JobContract>[]> {
  const maybeAccounts = await fetchAllMaybeJobContract(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeJobContract(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<JobContract>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeJobContract(maybeAccount));
}

export function getJobContractSize(): number {
  return 202;
}
