/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const JOB_POSTING_DISCRIMINATOR = new Uint8Array([
  204, 119, 64, 204, 100, 12, 26, 127,
]);

export function getJobPostingDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(JOB_POSTING_DISCRIMINATOR);
}

export interface JobPosting {
  discriminator: ReadonlyUint8Array;
  employer: Address;
  title: string;
  description: string;
  requirements: string[];
  budget: bigint;
  deadline: bigint;
  skillsNeeded: string[];
  budgetMin: bigint;
  budgetMax: bigint;
  paymentToken: Address;
  jobType: string;
  experienceLevel: string;
  isActive: boolean;
  applicationsCount: number;
  createdAt: bigint;
  updatedAt: bigint;
  bump: number;
}

export interface JobPostingArgs {
  employer: Address;
  title: string;
  description: string;
  requirements: string[];
  budget: number | bigint;
  deadline: number | bigint;
  skillsNeeded: string[];
  budgetMin: number | bigint;
  budgetMax: number | bigint;
  paymentToken: Address;
  jobType: string;
  experienceLevel: string;
  isActive: boolean;
  applicationsCount: number;
  createdAt: number | bigint;
  updatedAt: number | bigint;
  bump: number;
}

export function getJobPostingEncoder(): Encoder<JobPostingArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['employer', getAddressEncoder()],
      ['title', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['description', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      [
        'requirements',
        getArrayEncoder(
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())
        ),
      ],
      ['budget', getU64Encoder()],
      ['deadline', getI64Encoder()],
      [
        'skillsNeeded',
        getArrayEncoder(
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())
        ),
      ],
      ['budgetMin', getU64Encoder()],
      ['budgetMax', getU64Encoder()],
      ['paymentToken', getAddressEncoder()],
      ['jobType', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      [
        'experienceLevel',
        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
      ],
      ['isActive', getBooleanEncoder()],
      ['applicationsCount', getU32Encoder()],
      ['createdAt', getI64Encoder()],
      ['updatedAt', getI64Encoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: JOB_POSTING_DISCRIMINATOR })
  );
}

export function getJobPostingDecoder(): Decoder<JobPosting> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['employer', getAddressDecoder()],
    ['title', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['description', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    [
      'requirements',
      getArrayDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
    ['budget', getU64Decoder()],
    ['deadline', getI64Decoder()],
    [
      'skillsNeeded',
      getArrayDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
    ['budgetMin', getU64Decoder()],
    ['budgetMax', getU64Decoder()],
    ['paymentToken', getAddressDecoder()],
    ['jobType', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    [
      'experienceLevel',
      addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder()),
    ],
    ['isActive', getBooleanDecoder()],
    ['applicationsCount', getU32Decoder()],
    ['createdAt', getI64Decoder()],
    ['updatedAt', getI64Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getJobPostingCodec(): Codec<JobPostingArgs, JobPosting> {
  return combineCodec(getJobPostingEncoder(), getJobPostingDecoder());
}

export function decodeJobPosting<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<JobPosting, TAddress>;
export function decodeJobPosting<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<JobPosting, TAddress>;
export function decodeJobPosting<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<JobPosting, TAddress> | MaybeAccount<JobPosting, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getJobPostingDecoder()
  );
}

export async function fetchJobPosting<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<JobPosting, TAddress>> {
  const maybeAccount = await fetchMaybeJobPosting(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeJobPosting<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<JobPosting, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeJobPosting(maybeAccount);
}

export async function fetchAllJobPosting(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig
): Promise<Account<JobPosting>[]> {
  const maybeAccounts = await fetchAllMaybeJobPosting(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeJobPosting(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig
): Promise<MaybeAccount<JobPosting>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeJobPosting(maybeAccount));
}
