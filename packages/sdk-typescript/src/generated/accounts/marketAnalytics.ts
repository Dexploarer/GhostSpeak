/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI32Decoder,
  getI32Encoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const MARKET_ANALYTICS_DISCRIMINATOR = new Uint8Array([
  198, 187, 239, 13, 141, 42, 92, 67,
]);

export function getMarketAnalyticsDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    MARKET_ANALYTICS_DISCRIMINATOR
  );
}

export interface MarketAnalytics {
  discriminator: ReadonlyUint8Array;
  periodStart: bigint;
  periodEnd: bigint;
  totalVolume: bigint;
  totalTransactions: bigint;
  averagePrice: bigint;
  activeAgents: number;
  priceVolatility: number;
  demandTrend: number;
  supplyTrend: number;
  marketCap: bigint;
  topAgents: Address[];
  bump: number;
}

export interface MarketAnalyticsArgs {
  periodStart: number | bigint;
  periodEnd: number | bigint;
  totalVolume: number | bigint;
  totalTransactions: number | bigint;
  averagePrice: number | bigint;
  activeAgents: number;
  priceVolatility: number;
  demandTrend: number;
  supplyTrend: number;
  marketCap: number | bigint;
  topAgents: Address[];
  bump: number;
}

export function getMarketAnalyticsEncoder(): Encoder<MarketAnalyticsArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['periodStart', getI64Encoder()],
      ['periodEnd', getI64Encoder()],
      ['totalVolume', getU64Encoder()],
      ['totalTransactions', getU64Encoder()],
      ['averagePrice', getU64Encoder()],
      ['activeAgents', getU32Encoder()],
      ['priceVolatility', getU32Encoder()],
      ['demandTrend', getI32Encoder()],
      ['supplyTrend', getI32Encoder()],
      ['marketCap', getU64Encoder()],
      ['topAgents', getArrayEncoder(getAddressEncoder())],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: MARKET_ANALYTICS_DISCRIMINATOR })
  );
}

export function getMarketAnalyticsDecoder(): Decoder<MarketAnalytics> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['periodStart', getI64Decoder()],
    ['periodEnd', getI64Decoder()],
    ['totalVolume', getU64Decoder()],
    ['totalTransactions', getU64Decoder()],
    ['averagePrice', getU64Decoder()],
    ['activeAgents', getU32Decoder()],
    ['priceVolatility', getU32Decoder()],
    ['demandTrend', getI32Decoder()],
    ['supplyTrend', getI32Decoder()],
    ['marketCap', getU64Decoder()],
    ['topAgents', getArrayDecoder(getAddressDecoder())],
    ['bump', getU8Decoder()],
  ]);
}

export function getMarketAnalyticsCodec(): Codec<
  MarketAnalyticsArgs,
  MarketAnalytics
> {
  return combineCodec(getMarketAnalyticsEncoder(), getMarketAnalyticsDecoder());
}

export function decodeMarketAnalytics<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<MarketAnalytics, TAddress>;
export function decodeMarketAnalytics<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<MarketAnalytics, TAddress>;
export function decodeMarketAnalytics<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<MarketAnalytics, TAddress>
  | MaybeAccount<MarketAnalytics, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getMarketAnalyticsDecoder()
  );
}

export async function fetchMarketAnalytics<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<MarketAnalytics, TAddress>> {
  const maybeAccount = await fetchMaybeMarketAnalytics(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeMarketAnalytics<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<MarketAnalytics, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeMarketAnalytics(maybeAccount);
}

export async function fetchAllMarketAnalytics(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig
): Promise<Account<MarketAnalytics>[]> {
  const maybeAccounts = await fetchAllMaybeMarketAnalytics(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeMarketAnalytics(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig
): Promise<MaybeAccount<MarketAnalytics>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeMarketAnalytics(maybeAccount)
  );
}
