/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getEmergencyConfigDecoder,
  getEmergencyConfigEncoder,
  getMultisigConfigDecoder,
  getMultisigConfigEncoder,
  getPendingTransactionDecoder,
  getPendingTransactionEncoder,
  type EmergencyConfig,
  type EmergencyConfigArgs,
  type MultisigConfig,
  type MultisigConfigArgs,
  type PendingTransaction,
  type PendingTransactionArgs,
} from '../types';

export const MULTISIG_DISCRIMINATOR = new Uint8Array([
  224, 116, 121, 186, 68, 161, 79, 236,
]);

export function getMultisigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(MULTISIG_DISCRIMINATOR);
}

export type Multisig = {
  discriminator: ReadonlyUint8Array;
  /** Unique identifier */
  multisigId: bigint;
  /** Required number of signatures */
  threshold: number;
  /** List of authorized signers */
  signers: Array<Address>;
  /** Multisig owner (can modify signers) */
  owner: Address;
  /** Creation timestamp */
  createdAt: bigint;
  /** Last update timestamp */
  updatedAt: bigint;
  /** Current nonce (prevents replay attacks) */
  nonce: bigint;
  /** Pending transactions */
  pendingTransactions: Array<PendingTransaction>;
  /** Configuration settings */
  config: MultisigConfig;
  /** Emergency settings */
  emergencyConfig: EmergencyConfig;
  /** Reserved space for future extensions */
  reserved: ReadonlyUint8Array;
};

export type MultisigArgs = {
  /** Unique identifier */
  multisigId: number | bigint;
  /** Required number of signatures */
  threshold: number;
  /** List of authorized signers */
  signers: Array<Address>;
  /** Multisig owner (can modify signers) */
  owner: Address;
  /** Creation timestamp */
  createdAt: number | bigint;
  /** Last update timestamp */
  updatedAt: number | bigint;
  /** Current nonce (prevents replay attacks) */
  nonce: number | bigint;
  /** Pending transactions */
  pendingTransactions: Array<PendingTransactionArgs>;
  /** Configuration settings */
  config: MultisigConfigArgs;
  /** Emergency settings */
  emergencyConfig: EmergencyConfigArgs;
  /** Reserved space for future extensions */
  reserved: ReadonlyUint8Array;
};

export function getMultisigEncoder(): Encoder<MultisigArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['multisigId', getU64Encoder()],
      ['threshold', getU8Encoder()],
      ['signers', getArrayEncoder(getAddressEncoder())],
      ['owner', getAddressEncoder()],
      ['createdAt', getI64Encoder()],
      ['updatedAt', getI64Encoder()],
      ['nonce', getU64Encoder()],
      ['pendingTransactions', getArrayEncoder(getPendingTransactionEncoder())],
      ['config', getMultisigConfigEncoder()],
      ['emergencyConfig', getEmergencyConfigEncoder()],
      ['reserved', fixEncoderSize(getBytesEncoder(), 128)],
    ]),
    (value) => ({ ...value, discriminator: MULTISIG_DISCRIMINATOR })
  );
}

export function getMultisigDecoder(): Decoder<Multisig> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['multisigId', getU64Decoder()],
    ['threshold', getU8Decoder()],
    ['signers', getArrayDecoder(getAddressDecoder())],
    ['owner', getAddressDecoder()],
    ['createdAt', getI64Decoder()],
    ['updatedAt', getI64Decoder()],
    ['nonce', getU64Decoder()],
    ['pendingTransactions', getArrayDecoder(getPendingTransactionDecoder())],
    ['config', getMultisigConfigDecoder()],
    ['emergencyConfig', getEmergencyConfigDecoder()],
    ['reserved', fixDecoderSize(getBytesDecoder(), 128)],
  ]);
}

export function getMultisigCodec(): Codec<MultisigArgs, Multisig> {
  return combineCodec(getMultisigEncoder(), getMultisigDecoder());
}

export function decodeMultisig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Multisig, TAddress>;
export function decodeMultisig<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Multisig, TAddress>;
export function decodeMultisig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Multisig, TAddress> | MaybeAccount<Multisig, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getMultisigDecoder()
  );
}

export async function fetchMultisig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Multisig, TAddress>> {
  const maybeAccount = await fetchMaybeMultisig(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeMultisig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Multisig, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeMultisig(maybeAccount);
}

export async function fetchAllMultisig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Multisig>[]> {
  const maybeAccounts = await fetchAllMaybeMultisig(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeMultisig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Multisig>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeMultisig(maybeAccount));
}
