/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getNegotiationStatusDecoder,
  getNegotiationStatusEncoder,
  type NegotiationStatus,
  type NegotiationStatusArgs,
} from '../types';

export const NEGOTIATION_CHATBOT_DISCRIMINATOR = new Uint8Array([
  236, 199, 221, 210, 158, 112, 204, 255,
]);

export function getNegotiationChatbotDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    NEGOTIATION_CHATBOT_DISCRIMINATOR
  );
}

export interface NegotiationChatbot {
  discriminator: ReadonlyUint8Array;
  initiator: Address;
  counterparty: Address;
  initialOffer: bigint;
  currentOffer: bigint;
  status: NegotiationStatus;
  negotiationDeadline: bigint;
  terms: string[];
  counterOffers: bigint[];
  autoAcceptThreshold: bigint;
  createdAt: bigint;
  lastActivity: bigint;
  bump: number;
}

export interface NegotiationChatbotArgs {
  initiator: Address;
  counterparty: Address;
  initialOffer: number | bigint;
  currentOffer: number | bigint;
  status: NegotiationStatusArgs;
  negotiationDeadline: number | bigint;
  terms: string[];
  counterOffers: (number | bigint)[];
  autoAcceptThreshold: number | bigint;
  createdAt: number | bigint;
  lastActivity: number | bigint;
  bump: number;
}

export function getNegotiationChatbotEncoder(): Encoder<NegotiationChatbotArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['initiator', getAddressEncoder()],
      ['counterparty', getAddressEncoder()],
      ['initialOffer', getU64Encoder()],
      ['currentOffer', getU64Encoder()],
      ['status', getNegotiationStatusEncoder()],
      ['negotiationDeadline', getI64Encoder()],
      [
        'terms',
        getArrayEncoder(
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())
        ),
      ],
      ['counterOffers', getArrayEncoder(getU64Encoder())],
      ['autoAcceptThreshold', getU64Encoder()],
      ['createdAt', getI64Encoder()],
      ['lastActivity', getI64Encoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: NEGOTIATION_CHATBOT_DISCRIMINATOR })
  );
}

export function getNegotiationChatbotDecoder(): Decoder<NegotiationChatbot> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['initiator', getAddressDecoder()],
    ['counterparty', getAddressDecoder()],
    ['initialOffer', getU64Decoder()],
    ['currentOffer', getU64Decoder()],
    ['status', getNegotiationStatusDecoder()],
    ['negotiationDeadline', getI64Decoder()],
    [
      'terms',
      getArrayDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
    ['counterOffers', getArrayDecoder(getU64Decoder())],
    ['autoAcceptThreshold', getU64Decoder()],
    ['createdAt', getI64Decoder()],
    ['lastActivity', getI64Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getNegotiationChatbotCodec(): Codec<
  NegotiationChatbotArgs,
  NegotiationChatbot
> {
  return combineCodec(
    getNegotiationChatbotEncoder(),
    getNegotiationChatbotDecoder()
  );
}

export function decodeNegotiationChatbot<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<NegotiationChatbot, TAddress>;
export function decodeNegotiationChatbot<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<NegotiationChatbot, TAddress>;
export function decodeNegotiationChatbot<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<NegotiationChatbot, TAddress>
  | MaybeAccount<NegotiationChatbot, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getNegotiationChatbotDecoder()
  );
}

export async function fetchNegotiationChatbot<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<NegotiationChatbot, TAddress>> {
  const maybeAccount = await fetchMaybeNegotiationChatbot(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeNegotiationChatbot<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<NegotiationChatbot, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeNegotiationChatbot(maybeAccount);
}

export async function fetchAllNegotiationChatbot(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig
): Promise<Account<NegotiationChatbot>[]> {
  const maybeAccounts = await fetchAllMaybeNegotiationChatbot(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeNegotiationChatbot(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig
): Promise<MaybeAccount<NegotiationChatbot>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeNegotiationChatbot(maybeAccount)
  );
}
