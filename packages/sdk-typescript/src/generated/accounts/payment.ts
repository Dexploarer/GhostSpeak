import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  transformEncoder,
  type Codec,
  type Decoder,
  type Encoder,
  type ReadonlyUint8Array
} from '@solana/codecs-core';
import {
  getI64Decoder,
  getI64Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder
} from '@solana/codecs-numbers';
import {
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder
} from '@solana/codecs-data-structures';
import {
  getOptionDecoder,
  getOptionEncoder,
  type Option,
  type OptionOrNullable
} from '@solana/options';
import {
  getAddressDecoder,
  getAddressEncoder,
  type Address
} from '@solana/addresses';
import {
  assertAccountExists,
  assertAccountsExist,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  type Account,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount
} from '@solana/accounts';
/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

export const PAYMENT_DISCRIMINATOR = new Uint8Array([
  227, 231, 51, 26, 244, 88, 4, 148,
]);

export function getPaymentDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(PAYMENT_DISCRIMINATOR);
}

export type Payment = {
  discriminator: ReadonlyUint8Array;
  workOrder: Address;
  payer: Address;
  recipient: Address;
  amount: bigint;
  tokenMint: Address;
  isConfidential: boolean;
  paidAt: bigint;
  transferHook: Option<Address>;
  transferFeeApplied: boolean;
  bump: number;
};

export type PaymentArgs = {
  workOrder: Address;
  payer: Address;
  recipient: Address;
  amount: number | bigint;
  tokenMint: Address;
  isConfidential: boolean;
  paidAt: number | bigint;
  transferHook: OptionOrNullable<Address>;
  transferFeeApplied: boolean;
  bump: number;
};

export function getPaymentEncoder(): Encoder<PaymentArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['workOrder', getAddressEncoder()],
      ['payer', getAddressEncoder()],
      ['recipient', getAddressEncoder()],
      ['amount', getU64Encoder()],
      ['tokenMint', getAddressEncoder()],
      ['isConfidential', getBooleanEncoder()],
      ['paidAt', getI64Encoder()],
      ['transferHook', getOptionEncoder(getAddressEncoder())],
      ['transferFeeApplied', getBooleanEncoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: PAYMENT_DISCRIMINATOR })
  );
}

export function getPaymentDecoder(): Decoder<Payment> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['workOrder', getAddressDecoder()],
    ['payer', getAddressDecoder()],
    ['recipient', getAddressDecoder()],
    ['amount', getU64Decoder()],
    ['tokenMint', getAddressDecoder()],
    ['isConfidential', getBooleanDecoder()],
    ['paidAt', getI64Decoder()],
    ['transferHook', getOptionDecoder(getAddressDecoder())],
    ['transferFeeApplied', getBooleanDecoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getPaymentCodec(): Codec<PaymentArgs, Payment> {
  return combineCodec(getPaymentEncoder(), getPaymentDecoder());
}

export function decodePayment<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Payment, TAddress>;
export function decodePayment<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Payment, TAddress>;
export function decodePayment<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Payment, TAddress> | MaybeAccount<Payment, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getPaymentDecoder()
  );
}

export async function fetchPayment<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Payment, TAddress>> {
  const maybeAccount = await fetchMaybePayment(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybePayment<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Payment, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodePayment(maybeAccount);
}

export async function fetchAllPayment(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Payment>[]> {
  const maybeAccounts = await fetchAllMaybePayment(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybePayment(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Payment>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodePayment(maybeAccount));
}
