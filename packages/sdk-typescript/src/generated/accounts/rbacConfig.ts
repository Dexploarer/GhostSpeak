import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  transformEncoder,
  type Codec,
  type Decoder,
  type Encoder,
  type ReadonlyUint8Array
} from '@solana/codecs-core';
import {
  getI64Decoder,
  getI64Encoder,
  getU8Decoder,
  getU8Encoder
} from '@solana/codecs-numbers';
import {
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder
} from '@solana/codecs-data-structures';
import {
  getAddressDecoder,
  getAddressEncoder,
  type Address
} from '@solana/addresses';
import {
  assertAccountExists,
  assertAccountsExist,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  type Account,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount
} from '@solana/accounts';
import {
  getAccessAuditConfigDecoder,
  getAccessAuditConfigEncoder,
  getAccessPolicyDecoder,
  getAccessPolicyEncoder,
  getEmergencyAccessConfigDecoder,
  getEmergencyAccessConfigEncoder,
  getPermissionDecoder,
  getPermissionEncoder,
  getRoleDecoder,
  getRoleEncoder,
  getSecurityPoliciesDecoder,
  getSecurityPoliciesEncoder,
  type AccessAuditConfig,
  type AccessAuditConfigArgs,
  type AccessPolicy,
  type AccessPolicyArgs,
  type EmergencyAccessConfig,
  type EmergencyAccessConfigArgs,
  type Permission,
  type PermissionArgs,
  type Role,
  type RoleArgs,
  type SecurityPolicies,
  type SecurityPoliciesArgs,
} from '../types';
/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

export const RBAC_CONFIG_DISCRIMINATOR = new Uint8Array([
  177, 94, 184, 202, 221, 112, 110, 38,
]);

export function getRbacConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(RBAC_CONFIG_DISCRIMINATOR);
}

export type RbacConfig = {
  discriminator: ReadonlyUint8Array;
  /** Authority for RBAC management */
  authority: Address;
  /** Creation timestamp */
  createdAt: bigint;
  /** Last update timestamp */
  updatedAt: bigint;
  /** Version for compatibility */
  version: number;
  /** Role definitions */
  roles: Array<Role>;
  /** Permission definitions */
  permissions: Array<Permission>;
  /** Access policies */
  accessPolicies: Array<AccessPolicy>;
  /** Security policies */
  securityPolicies: SecurityPolicies;
  /** Audit configuration */
  auditConfig: AccessAuditConfig;
  /** Emergency access procedures */
  emergencyAccess: EmergencyAccessConfig;
  /** Reserved space */
  reserved: ReadonlyUint8Array;
};

export type RbacConfigArgs = {
  /** Authority for RBAC management */
  authority: Address;
  /** Creation timestamp */
  createdAt: number | bigint;
  /** Last update timestamp */
  updatedAt: number | bigint;
  /** Version for compatibility */
  version: number;
  /** Role definitions */
  roles: Array<RoleArgs>;
  /** Permission definitions */
  permissions: Array<PermissionArgs>;
  /** Access policies */
  accessPolicies: Array<AccessPolicyArgs>;
  /** Security policies */
  securityPolicies: SecurityPoliciesArgs;
  /** Audit configuration */
  auditConfig: AccessAuditConfigArgs;
  /** Emergency access procedures */
  emergencyAccess: EmergencyAccessConfigArgs;
  /** Reserved space */
  reserved: ReadonlyUint8Array;
};

export function getRbacConfigEncoder(): Encoder<RbacConfigArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['authority', getAddressEncoder()],
      ['createdAt', getI64Encoder()],
      ['updatedAt', getI64Encoder()],
      ['version', getU8Encoder()],
      ['roles', getArrayEncoder(getRoleEncoder())],
      ['permissions', getArrayEncoder(getPermissionEncoder())],
      ['accessPolicies', getArrayEncoder(getAccessPolicyEncoder())],
      ['securityPolicies', getSecurityPoliciesEncoder()],
      ['auditConfig', getAccessAuditConfigEncoder()],
      ['emergencyAccess', getEmergencyAccessConfigEncoder()],
      ['reserved', fixEncoderSize(getBytesEncoder(), 128)],
    ]),
    (value) => ({ ...value, discriminator: RBAC_CONFIG_DISCRIMINATOR })
  );
}

export function getRbacConfigDecoder(): Decoder<RbacConfig> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['authority', getAddressDecoder()],
    ['createdAt', getI64Decoder()],
    ['updatedAt', getI64Decoder()],
    ['version', getU8Decoder()],
    ['roles', getArrayDecoder(getRoleDecoder())],
    ['permissions', getArrayDecoder(getPermissionDecoder())],
    ['accessPolicies', getArrayDecoder(getAccessPolicyDecoder())],
    ['securityPolicies', getSecurityPoliciesDecoder()],
    ['auditConfig', getAccessAuditConfigDecoder()],
    ['emergencyAccess', getEmergencyAccessConfigDecoder()],
    ['reserved', fixDecoderSize(getBytesDecoder(), 128)],
  ]);
}

export function getRbacConfigCodec(): Codec<RbacConfigArgs, RbacConfig> {
  return combineCodec(getRbacConfigEncoder(), getRbacConfigDecoder());
}

export function decodeRbacConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<RbacConfig, TAddress>;
export function decodeRbacConfig<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<RbacConfig, TAddress>;
export function decodeRbacConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<RbacConfig, TAddress> | MaybeAccount<RbacConfig, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getRbacConfigDecoder()
  );
}

export async function fetchRbacConfig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<RbacConfig, TAddress>> {
  const maybeAccount = await fetchMaybeRbacConfig(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeRbacConfig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<RbacConfig, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeRbacConfig(maybeAccount);
}

export async function fetchAllRbacConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<RbacConfig>[]> {
  const maybeAccounts = await fetchAllMaybeRbacConfig(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeRbacConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<RbacConfig>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeRbacConfig(maybeAccount));
}
