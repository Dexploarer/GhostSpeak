/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getReentrancyStateDecoder,
  getReentrancyStateEncoder,
  type ReentrancyState,
  type ReentrancyStateArgs,
} from '../types';

export const REENTRANCY_GUARD_DISCRIMINATOR = new Uint8Array([
  207, 227, 141, 11, 194, 21, 193, 32,
]);

export function getReentrancyGuardDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REENTRANCY_GUARD_DISCRIMINATOR
  );
}

export type ReentrancyGuard = {
  discriminator: ReadonlyUint8Array;
  /** Current state of the guard */
  state: ReentrancyState;
  /** Nonce to prevent replay attacks */
  nonce: bigint;
  /** Last interaction timestamp */
  lastInteraction: bigint;
  /** Authority that can reset the guard (for emergency situations) */
  authority: Address;
  /** Bump seed for PDA */
  bump: number;
};

export type ReentrancyGuardArgs = {
  /** Current state of the guard */
  state: ReentrancyStateArgs;
  /** Nonce to prevent replay attacks */
  nonce: number | bigint;
  /** Last interaction timestamp */
  lastInteraction: number | bigint;
  /** Authority that can reset the guard (for emergency situations) */
  authority: Address;
  /** Bump seed for PDA */
  bump: number;
};

export function getReentrancyGuardEncoder(): FixedSizeEncoder<ReentrancyGuardArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['state', getReentrancyStateEncoder()],
      ['nonce', getU64Encoder()],
      ['lastInteraction', getI64Encoder()],
      ['authority', getAddressEncoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: REENTRANCY_GUARD_DISCRIMINATOR })
  );
}

export function getReentrancyGuardDecoder(): FixedSizeDecoder<ReentrancyGuard> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['state', getReentrancyStateDecoder()],
    ['nonce', getU64Decoder()],
    ['lastInteraction', getI64Decoder()],
    ['authority', getAddressDecoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getReentrancyGuardCodec(): FixedSizeCodec<
  ReentrancyGuardArgs,
  ReentrancyGuard
> {
  return combineCodec(getReentrancyGuardEncoder(), getReentrancyGuardDecoder());
}

export function decodeReentrancyGuard<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<ReentrancyGuard, TAddress>;
export function decodeReentrancyGuard<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<ReentrancyGuard, TAddress>;
export function decodeReentrancyGuard<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<ReentrancyGuard, TAddress>
  | MaybeAccount<ReentrancyGuard, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getReentrancyGuardDecoder()
  );
}

export async function fetchReentrancyGuard<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<ReentrancyGuard, TAddress>> {
  const maybeAccount = await fetchMaybeReentrancyGuard(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeReentrancyGuard<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<ReentrancyGuard, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeReentrancyGuard(maybeAccount);
}

export async function fetchAllReentrancyGuard(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<ReentrancyGuard>[]> {
  const maybeAccounts = await fetchAllMaybeReentrancyGuard(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeReentrancyGuard(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<ReentrancyGuard>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeReentrancyGuard(maybeAccount)
  );
}

export function getReentrancyGuardSize(): number {
  return 58;
}
