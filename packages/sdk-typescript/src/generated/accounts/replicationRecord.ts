/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type Option,
  type OptionOrNullable,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const REPLICATION_RECORD_DISCRIMINATOR = new Uint8Array([
  243, 98, 232, 67, 71, 49, 173, 6,
]);

export function getReplicationRecordDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REPLICATION_RECORD_DISCRIMINATOR
  );
}

export type ReplicationRecord = {
  discriminator: ReadonlyUint8Array;
  recordId: bigint;
  originalAgent: Address;
  replicatedAgent: Address;
  replicator: Address;
  feePaid: bigint;
  replicatedAt: bigint;
  cnftMint: Option<Address>;
  bump: number;
};

export type ReplicationRecordArgs = {
  recordId: number | bigint;
  originalAgent: Address;
  replicatedAgent: Address;
  replicator: Address;
  feePaid: number | bigint;
  replicatedAt: number | bigint;
  cnftMint: OptionOrNullable<Address>;
  bump: number;
};

export function getReplicationRecordEncoder(): Encoder<ReplicationRecordArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['recordId', getU64Encoder()],
      ['originalAgent', getAddressEncoder()],
      ['replicatedAgent', getAddressEncoder()],
      ['replicator', getAddressEncoder()],
      ['feePaid', getU64Encoder()],
      ['replicatedAt', getI64Encoder()],
      ['cnftMint', getOptionEncoder(getAddressEncoder())],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: REPLICATION_RECORD_DISCRIMINATOR })
  );
}

export function getReplicationRecordDecoder(): Decoder<ReplicationRecord> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['recordId', getU64Decoder()],
    ['originalAgent', getAddressDecoder()],
    ['replicatedAgent', getAddressDecoder()],
    ['replicator', getAddressDecoder()],
    ['feePaid', getU64Decoder()],
    ['replicatedAt', getI64Decoder()],
    ['cnftMint', getOptionDecoder(getAddressDecoder())],
    ['bump', getU8Decoder()],
  ]);
}

export function getReplicationRecordCodec(): Codec<
  ReplicationRecordArgs,
  ReplicationRecord
> {
  return combineCodec(
    getReplicationRecordEncoder(),
    getReplicationRecordDecoder()
  );
}

export function decodeReplicationRecord<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<ReplicationRecord, TAddress>;
export function decodeReplicationRecord<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<ReplicationRecord, TAddress>;
export function decodeReplicationRecord<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<ReplicationRecord, TAddress>
  | MaybeAccount<ReplicationRecord, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getReplicationRecordDecoder()
  );
}

export async function fetchReplicationRecord<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<ReplicationRecord, TAddress>> {
  const maybeAccount = await fetchMaybeReplicationRecord(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeReplicationRecord<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<ReplicationRecord, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeReplicationRecord(maybeAccount);
}

export async function fetchAllReplicationRecord(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<ReplicationRecord>[]> {
  const maybeAccounts = await fetchAllMaybeReplicationRecord(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeReplicationRecord(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<ReplicationRecord>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeReplicationRecord(maybeAccount)
  );
}
