import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  transformEncoder,
  type Codec,
  type Decoder,
  type Encoder,
  type ReadonlyUint8Array
} from '@solana/codecs-core';
import {
  getI64Decoder,
  getI64Encoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder
} from '@solana/codecs-numbers';
import {
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder
} from '@solana/codecs-data-structures';
import {
  getOptionDecoder,
  getOptionEncoder,
  type Option,
  type OptionOrNullable
} from '@solana/options';
import {
  getAddressDecoder,
  getAddressEncoder,
  type Address
} from '@solana/addresses';
import {
  assertAccountExists,
  assertAccountsExist,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  type Account,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount
} from '@solana/accounts';
/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

export const RESALE_MARKET_DISCRIMINATOR = new Uint8Array([
  33, 30, 12, 55, 106, 90, 225, 166,
]);

export function getResaleMarketDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    RESALE_MARKET_DISCRIMINATOR
  );
}

export type ResaleMarket = {
  discriminator: ReadonlyUint8Array;
  agent: Address;
  seller: Address;
  price: bigint;
  royaltyPercentage: number;
  isListed: boolean;
  createdAt: bigint;
  soldAt: Option<bigint>;
  buyer: Option<Address>;
  bump: number;
};

export type ResaleMarketArgs = {
  agent: Address;
  seller: Address;
  price: number | bigint;
  royaltyPercentage: number;
  isListed: boolean;
  createdAt: number | bigint;
  soldAt: OptionOrNullable<number | bigint>;
  buyer: OptionOrNullable<Address>;
  bump: number;
};

export function getResaleMarketEncoder(): Encoder<ResaleMarketArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['agent', getAddressEncoder()],
      ['seller', getAddressEncoder()],
      ['price', getU64Encoder()],
      ['royaltyPercentage', getU32Encoder()],
      ['isListed', getBooleanEncoder()],
      ['createdAt', getI64Encoder()],
      ['soldAt', getOptionEncoder(getI64Encoder())],
      ['buyer', getOptionEncoder(getAddressEncoder())],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: RESALE_MARKET_DISCRIMINATOR })
  );
}

export function getResaleMarketDecoder(): Decoder<ResaleMarket> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['agent', getAddressDecoder()],
    ['seller', getAddressDecoder()],
    ['price', getU64Decoder()],
    ['royaltyPercentage', getU32Decoder()],
    ['isListed', getBooleanDecoder()],
    ['createdAt', getI64Decoder()],
    ['soldAt', getOptionDecoder(getI64Decoder())],
    ['buyer', getOptionDecoder(getAddressDecoder())],
    ['bump', getU8Decoder()],
  ]);
}

export function getResaleMarketCodec(): Codec<ResaleMarketArgs, ResaleMarket> {
  return combineCodec(getResaleMarketEncoder(), getResaleMarketDecoder());
}

export function decodeResaleMarket<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<ResaleMarket, TAddress>;
export function decodeResaleMarket<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<ResaleMarket, TAddress>;
export function decodeResaleMarket<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<ResaleMarket, TAddress> | MaybeAccount<ResaleMarket, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getResaleMarketDecoder()
  );
}

export async function fetchResaleMarket<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<ResaleMarket, TAddress>> {
  const maybeAccount = await fetchMaybeResaleMarket(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeResaleMarket<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<ResaleMarket, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeResaleMarket(maybeAccount);
}

export async function fetchAllResaleMarket(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<ResaleMarket>[]> {
  const maybeAccounts = await fetchAllMaybeResaleMarket(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeResaleMarket(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<ResaleMarket>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeResaleMarket(maybeAccount));
}
