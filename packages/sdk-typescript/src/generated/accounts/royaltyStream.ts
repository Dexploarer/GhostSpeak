/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getRoyaltyConfigDecoder,
  getRoyaltyConfigEncoder,
  type RoyaltyConfig,
  type RoyaltyConfigArgs,
} from '../types';

export const ROYALTY_STREAM_DISCRIMINATOR = new Uint8Array([
  73, 53, 156, 242, 157, 5, 183, 44,
]);

export function getRoyaltyStreamDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    ROYALTY_STREAM_DISCRIMINATOR
  );
}

export type RoyaltyStream = {
  discriminator: ReadonlyUint8Array;
  agent: Address;
  originalCreator: Address;
  config: RoyaltyConfig;
  totalPaid: bigint;
  lastPayment: bigint;
  isActive: boolean;
  createdAt: bigint;
  bump: number;
};

export type RoyaltyStreamArgs = {
  agent: Address;
  originalCreator: Address;
  config: RoyaltyConfigArgs;
  totalPaid: number | bigint;
  lastPayment: number | bigint;
  isActive: boolean;
  createdAt: number | bigint;
  bump: number;
};

export function getRoyaltyStreamEncoder(): FixedSizeEncoder<RoyaltyStreamArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['agent', getAddressEncoder()],
      ['originalCreator', getAddressEncoder()],
      ['config', getRoyaltyConfigEncoder()],
      ['totalPaid', getU64Encoder()],
      ['lastPayment', getI64Encoder()],
      ['isActive', getBooleanEncoder()],
      ['createdAt', getI64Encoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: ROYALTY_STREAM_DISCRIMINATOR })
  );
}

export function getRoyaltyStreamDecoder(): FixedSizeDecoder<RoyaltyStream> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['agent', getAddressDecoder()],
    ['originalCreator', getAddressDecoder()],
    ['config', getRoyaltyConfigDecoder()],
    ['totalPaid', getU64Decoder()],
    ['lastPayment', getI64Decoder()],
    ['isActive', getBooleanDecoder()],
    ['createdAt', getI64Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getRoyaltyStreamCodec(): FixedSizeCodec<
  RoyaltyStreamArgs,
  RoyaltyStream
> {
  return combineCodec(getRoyaltyStreamEncoder(), getRoyaltyStreamDecoder());
}

export function decodeRoyaltyStream<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<RoyaltyStream, TAddress>;
export function decodeRoyaltyStream<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<RoyaltyStream, TAddress>;
export function decodeRoyaltyStream<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<RoyaltyStream, TAddress> | MaybeAccount<RoyaltyStream, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getRoyaltyStreamDecoder()
  );
}

export async function fetchRoyaltyStream<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<RoyaltyStream, TAddress>> {
  const maybeAccount = await fetchMaybeRoyaltyStream(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeRoyaltyStream<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<RoyaltyStream, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeRoyaltyStream(maybeAccount);
}

export async function fetchAllRoyaltyStream(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<RoyaltyStream>[]> {
  const maybeAccounts = await fetchAllMaybeRoyaltyStream(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeRoyaltyStream(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<RoyaltyStream>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeRoyaltyStream(maybeAccount));
}

export function getRoyaltyStreamSize(): number {
  return 118;
}
