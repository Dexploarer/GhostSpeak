/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getF64Decoder,
  getF64Encoder,
  getI64Decoder,
  getI64Encoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type Option,
  type OptionOrNullable,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const SERVICE_LISTING_DISCRIMINATOR = new Uint8Array([
  117, 173, 54, 52, 146, 147, 124, 211,
]);

export function getServiceListingDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SERVICE_LISTING_DISCRIMINATOR
  );
}

export interface ServiceListing {
  discriminator: ReadonlyUint8Array;
  agent: Address;
  owner: Address;
  title: string;
  description: string;
  price: bigint;
  tokenMint: Address;
  serviceType: string;
  paymentToken: Address;
  estimatedDelivery: bigint;
  tags: string[];
  isActive: boolean;
  totalOrders: number;
  rating: number;
  createdAt: bigint;
  updatedAt: bigint;
  transferHook: Option<Address>;
  bump: number;
}

export interface ServiceListingArgs {
  agent: Address;
  owner: Address;
  title: string;
  description: string;
  price: number | bigint;
  tokenMint: Address;
  serviceType: string;
  paymentToken: Address;
  estimatedDelivery: number | bigint;
  tags: string[];
  isActive: boolean;
  totalOrders: number;
  rating: number;
  createdAt: number | bigint;
  updatedAt: number | bigint;
  transferHook: OptionOrNullable<Address>;
  bump: number;
}

export function getServiceListingEncoder(): Encoder<ServiceListingArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['agent', getAddressEncoder()],
      ['owner', getAddressEncoder()],
      ['title', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['description', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['price', getU64Encoder()],
      ['tokenMint', getAddressEncoder()],
      ['serviceType', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['paymentToken', getAddressEncoder()],
      ['estimatedDelivery', getI64Encoder()],
      [
        'tags',
        getArrayEncoder(
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())
        ),
      ],
      ['isActive', getBooleanEncoder()],
      ['totalOrders', getU32Encoder()],
      ['rating', getF64Encoder()],
      ['createdAt', getI64Encoder()],
      ['updatedAt', getI64Encoder()],
      ['transferHook', getOptionEncoder(getAddressEncoder())],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: SERVICE_LISTING_DISCRIMINATOR })
  );
}

export function getServiceListingDecoder(): Decoder<ServiceListing> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['agent', getAddressDecoder()],
    ['owner', getAddressDecoder()],
    ['title', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['description', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['price', getU64Decoder()],
    ['tokenMint', getAddressDecoder()],
    ['serviceType', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['paymentToken', getAddressDecoder()],
    ['estimatedDelivery', getI64Decoder()],
    [
      'tags',
      getArrayDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
    ['isActive', getBooleanDecoder()],
    ['totalOrders', getU32Decoder()],
    ['rating', getF64Decoder()],
    ['createdAt', getI64Decoder()],
    ['updatedAt', getI64Decoder()],
    ['transferHook', getOptionDecoder(getAddressDecoder())],
    ['bump', getU8Decoder()],
  ]);
}

export function getServiceListingCodec(): Codec<
  ServiceListingArgs,
  ServiceListing
> {
  return combineCodec(getServiceListingEncoder(), getServiceListingDecoder());
}

export function decodeServiceListing<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<ServiceListing, TAddress>;
export function decodeServiceListing<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<ServiceListing, TAddress>;
export function decodeServiceListing<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<ServiceListing, TAddress> | MaybeAccount<ServiceListing, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getServiceListingDecoder()
  );
}

export async function fetchServiceListing<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<ServiceListing, TAddress>> {
  const maybeAccount = await fetchMaybeServiceListing(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeServiceListing<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<ServiceListing, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeServiceListing(maybeAccount);
}

export async function fetchAllServiceListing(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig
): Promise<Account<ServiceListing>[]> {
  const maybeAccounts = await fetchAllMaybeServiceListing(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeServiceListing(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig
): Promise<MaybeAccount<ServiceListing>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeServiceListing(maybeAccount)
  );
}
