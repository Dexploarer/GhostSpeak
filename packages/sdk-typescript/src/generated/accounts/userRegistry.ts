/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const USER_REGISTRY_DISCRIMINATOR = new Uint8Array([
  37, 84, 98, 14, 130, 63, 210, 138,
]);

export function getUserRegistryDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    USER_REGISTRY_DISCRIMINATOR
  );
}

export interface UserRegistry {
  discriminator: ReadonlyUint8Array;
  user: Address;
  agentCount: number;
  listingCount: number;
  workOrderCount: number;
  channelCount: number;
  totalVolumeTraded: bigint;
  lastActivity: bigint;
  createdAt: bigint;
  isRateLimited: boolean;
  rateLimitExpiry: bigint;
  lastExtensionRegistration: bigint;
  lastDisputeFiling: bigint;
  lastEvidenceSubmission: bigint;
  lastBatchExecution: bigint;
  lastDashboardUpdate: bigint;
  lastBulkDealCreation: bigint;
  lastDashboardCreation: bigint;
  bump: number;
}

export interface UserRegistryArgs {
  user: Address;
  agentCount: number;
  listingCount: number;
  workOrderCount: number;
  channelCount: number;
  totalVolumeTraded: number | bigint;
  lastActivity: number | bigint;
  createdAt: number | bigint;
  isRateLimited: boolean;
  rateLimitExpiry: number | bigint;
  lastExtensionRegistration: number | bigint;
  lastDisputeFiling: number | bigint;
  lastEvidenceSubmission: number | bigint;
  lastBatchExecution: number | bigint;
  lastDashboardUpdate: number | bigint;
  lastBulkDealCreation: number | bigint;
  lastDashboardCreation: number | bigint;
  bump: number;
}

export function getUserRegistryEncoder(): Encoder<UserRegistryArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['user', getAddressEncoder()],
      ['agentCount', getU16Encoder()],
      ['listingCount', getU16Encoder()],
      ['workOrderCount', getU16Encoder()],
      ['channelCount', getU16Encoder()],
      ['totalVolumeTraded', getU64Encoder()],
      ['lastActivity', getI64Encoder()],
      ['createdAt', getI64Encoder()],
      ['isRateLimited', getBooleanEncoder()],
      ['rateLimitExpiry', getI64Encoder()],
      ['lastExtensionRegistration', getI64Encoder()],
      ['lastDisputeFiling', getI64Encoder()],
      ['lastEvidenceSubmission', getI64Encoder()],
      ['lastBatchExecution', getI64Encoder()],
      ['lastDashboardUpdate', getI64Encoder()],
      ['lastBulkDealCreation', getI64Encoder()],
      ['lastDashboardCreation', getI64Encoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: USER_REGISTRY_DISCRIMINATOR })
  );
}

export function getUserRegistryDecoder(): Decoder<UserRegistry> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['user', getAddressDecoder()],
    ['agentCount', getU16Decoder()],
    ['listingCount', getU16Decoder()],
    ['workOrderCount', getU16Decoder()],
    ['channelCount', getU16Decoder()],
    ['totalVolumeTraded', getU64Decoder()],
    ['lastActivity', getI64Decoder()],
    ['createdAt', getI64Decoder()],
    ['isRateLimited', getBooleanDecoder()],
    ['rateLimitExpiry', getI64Decoder()],
    ['lastExtensionRegistration', getI64Decoder()],
    ['lastDisputeFiling', getI64Decoder()],
    ['lastEvidenceSubmission', getI64Decoder()],
    ['lastBatchExecution', getI64Decoder()],
    ['lastDashboardUpdate', getI64Decoder()],
    ['lastBulkDealCreation', getI64Decoder()],
    ['lastDashboardCreation', getI64Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getUserRegistryCodec(): Codec<UserRegistryArgs, UserRegistry> {
  return combineCodec(getUserRegistryEncoder(), getUserRegistryDecoder());
}

export function decodeUserRegistry<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<UserRegistry, TAddress>;
export function decodeUserRegistry<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<UserRegistry, TAddress>;
export function decodeUserRegistry<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<UserRegistry, TAddress> | MaybeAccount<UserRegistry, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getUserRegistryDecoder()
  );
}

export async function fetchUserRegistry<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<UserRegistry, TAddress>> {
  const maybeAccount = await fetchMaybeUserRegistry(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeUserRegistry<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<UserRegistry, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeUserRegistry(maybeAccount);
}

export async function fetchAllUserRegistry(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig
): Promise<Account<UserRegistry>[]> {
  const maybeAccounts = await fetchAllMaybeUserRegistry(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeUserRegistry(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Address[],
  config?: FetchAccountsConfig
): Promise<MaybeAccount<UserRegistry>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeUserRegistry(maybeAccount));
}

export function getUserRegistrySize(): number {
  return 138;
}
