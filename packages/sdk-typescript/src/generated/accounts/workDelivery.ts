import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  transformEncoder,
  type Codec,
  type Decoder,
  type Encoder,
  type ReadonlyUint8Array
} from '@solana/codecs-core';
import {
  getUtf8Decoder,
  getUtf8Encoder
} from '@solana/codecs-strings';
import {
  getI64Decoder,
  getI64Encoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder
} from '@solana/codecs-numbers';
import {
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder
} from '@solana/codecs-data-structures';
import {
  getAddressDecoder,
  getAddressEncoder,
  type Address
} from '@solana/addresses';
import {
  assertAccountExists,
  assertAccountsExist,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  type Account,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount
} from '@solana/accounts';
import {
  getDeliverableDecoder,
  getDeliverableEncoder,
  type Deliverable,
  type DeliverableArgs,
} from '../types';
/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

export const WORK_DELIVERY_DISCRIMINATOR = new Uint8Array([
  135, 198, 137, 54, 172, 172, 212, 84,
]);

export function getWorkDeliveryDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    WORK_DELIVERY_DISCRIMINATOR
  );
}

export type WorkDelivery = {
  discriminator: ReadonlyUint8Array;
  workOrder: Address;
  provider: Address;
  deliverables: Array<Deliverable>;
  ipfsHash: string;
  metadataUri: string;
  submittedAt: bigint;
  bump: number;
};

export type WorkDeliveryArgs = {
  workOrder: Address;
  provider: Address;
  deliverables: Array<DeliverableArgs>;
  ipfsHash: string;
  metadataUri: string;
  submittedAt: number | bigint;
  bump: number;
};

export function getWorkDeliveryEncoder(): Encoder<WorkDeliveryArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['workOrder', getAddressEncoder()],
      ['provider', getAddressEncoder()],
      ['deliverables', getArrayEncoder(getDeliverableEncoder())],
      ['ipfsHash', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['metadataUri', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['submittedAt', getI64Encoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: WORK_DELIVERY_DISCRIMINATOR })
  );
}

export function getWorkDeliveryDecoder(): Decoder<WorkDelivery> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['workOrder', getAddressDecoder()],
    ['provider', getAddressDecoder()],
    ['deliverables', getArrayDecoder(getDeliverableDecoder())],
    ['ipfsHash', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['metadataUri', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['submittedAt', getI64Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getWorkDeliveryCodec(): Codec<WorkDeliveryArgs, WorkDelivery> {
  return combineCodec(getWorkDeliveryEncoder(), getWorkDeliveryDecoder());
}

export function decodeWorkDelivery<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<WorkDelivery, TAddress>;
export function decodeWorkDelivery<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<WorkDelivery, TAddress>;
export function decodeWorkDelivery<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<WorkDelivery, TAddress> | MaybeAccount<WorkDelivery, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getWorkDeliveryDecoder()
  );
}

export async function fetchWorkDelivery<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<WorkDelivery, TAddress>> {
  const maybeAccount = await fetchMaybeWorkDelivery(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeWorkDelivery<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<WorkDelivery, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeWorkDelivery(maybeAccount);
}

export async function fetchAllWorkDelivery(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<WorkDelivery>[]> {
  const maybeAccounts = await fetchAllMaybeWorkDelivery(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeWorkDelivery(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<WorkDelivery>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeWorkDelivery(maybeAccount));
}
