import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  transformEncoder,
  type Codec,
  type Decoder,
  type Encoder,
  type ReadonlyUint8Array
} from '@solana/codecs-core';
import {
  getUtf8Decoder,
  getUtf8Encoder
} from '@solana/codecs-strings';
import {
  getI64Decoder,
  getI64Encoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder
} from '@solana/codecs-numbers';
import {
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder
} from '@solana/codecs-data-structures';
import {
  getOptionDecoder,
  getOptionEncoder,
  type Option,
  type OptionOrNullable
} from '@solana/options';
import {
  getAddressDecoder,
  getAddressEncoder,
  type Address
} from '@solana/addresses';
import {
  assertAccountExists,
  assertAccountsExist,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  type Account,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount
} from '@solana/accounts';
import {
  getWorkOrderStatusDecoder,
  getWorkOrderStatusEncoder,
  type WorkOrderStatus,
  type WorkOrderStatusArgs,
} from '../types';
/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

export const WORK_ORDER_DISCRIMINATOR = new Uint8Array([
  67, 109, 86, 157, 94, 117, 205, 9,
]);

export function getWorkOrderDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(WORK_ORDER_DISCRIMINATOR);
}

export type WorkOrder = {
  discriminator: ReadonlyUint8Array;
  client: Address;
  provider: Address;
  title: string;
  description: string;
  requirements: Array<string>;
  paymentAmount: bigint;
  paymentToken: Address;
  status: WorkOrderStatus;
  createdAt: bigint;
  updatedAt: bigint;
  deadline: bigint;
  deliveredAt: Option<bigint>;
  bump: number;
};

export type WorkOrderArgs = {
  client: Address;
  provider: Address;
  title: string;
  description: string;
  requirements: Array<string>;
  paymentAmount: number | bigint;
  paymentToken: Address;
  status: WorkOrderStatusArgs;
  createdAt: number | bigint;
  updatedAt: number | bigint;
  deadline: number | bigint;
  deliveredAt: OptionOrNullable<number | bigint>;
  bump: number;
};

export function getWorkOrderEncoder(): Encoder<WorkOrderArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['client', getAddressEncoder()],
      ['provider', getAddressEncoder()],
      ['title', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['description', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      [
        'requirements',
        getArrayEncoder(
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())
        ),
      ],
      ['paymentAmount', getU64Encoder()],
      ['paymentToken', getAddressEncoder()],
      ['status', getWorkOrderStatusEncoder()],
      ['createdAt', getI64Encoder()],
      ['updatedAt', getI64Encoder()],
      ['deadline', getI64Encoder()],
      ['deliveredAt', getOptionEncoder(getI64Encoder())],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: WORK_ORDER_DISCRIMINATOR })
  );
}

export function getWorkOrderDecoder(): Decoder<WorkOrder> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['client', getAddressDecoder()],
    ['provider', getAddressDecoder()],
    ['title', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['description', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    [
      'requirements',
      getArrayDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
    ['paymentAmount', getU64Decoder()],
    ['paymentToken', getAddressDecoder()],
    ['status', getWorkOrderStatusDecoder()],
    ['createdAt', getI64Decoder()],
    ['updatedAt', getI64Decoder()],
    ['deadline', getI64Decoder()],
    ['deliveredAt', getOptionDecoder(getI64Decoder())],
    ['bump', getU8Decoder()],
  ]);
}

export function getWorkOrderCodec(): Codec<WorkOrderArgs, WorkOrder> {
  return combineCodec(getWorkOrderEncoder(), getWorkOrderDecoder());
}

export function decodeWorkOrder<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<WorkOrder, TAddress>;
export function decodeWorkOrder<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<WorkOrder, TAddress>;
export function decodeWorkOrder<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<WorkOrder, TAddress> | MaybeAccount<WorkOrder, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getWorkOrderDecoder()
  );
}

export async function fetchWorkOrder<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<WorkOrder, TAddress>> {
  const maybeAccount = await fetchMaybeWorkOrder(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeWorkOrder<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<WorkOrder, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeWorkOrder(maybeAccount);
}

export async function fetchAllWorkOrder(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<WorkOrder>[]> {
  const maybeAccounts = await fetchAllMaybeWorkOrder(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeWorkOrder(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<WorkOrder>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeWorkOrder(maybeAccount));
}
