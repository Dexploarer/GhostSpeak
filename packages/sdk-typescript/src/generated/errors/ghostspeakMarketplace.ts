/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';

/** SystemProgramAsAdmin: System program cannot be used as admin */
export const GHOSTSPEAK_MARKETPLACE_ERROR__SYSTEM_PROGRAM_AS_ADMIN = 0x1770; // 6000
/** DefaultKeyAsAdmin: Default (null) public key cannot be used as admin */
export const GHOSTSPEAK_MARKETPLACE_ERROR__DEFAULT_KEY_AS_ADMIN = 0x1771; // 6001
/** UnauthorizedAdmin: Unauthorized admin - key does not match protocol admin */
export const GHOSTSPEAK_MARKETPLACE_ERROR__UNAUTHORIZED_ADMIN = 0x1772; // 6002
/** TestAddressOnMainnet: Test address cannot be used on mainnet */
export const GHOSTSPEAK_MARKETPLACE_ERROR__TEST_ADDRESS_ON_MAINNET = 0x1773; // 6003
/** ValidationFailed: Admin validation failed */
export const GHOSTSPEAK_MARKETPLACE_ERROR__VALIDATION_FAILED = 0x1774; // 6004

/** Insufficient Accounts */
export const GHOSTSPEAK_MARKETPLACE_ERROR__INSUFFICIENT_ACCOUNTS = 0x1775; // 6005
/** Invalid Instruction Data */
export const GHOSTSPEAK_MARKETPLACE_ERROR__INVALID_INSTRUCTION_DATA = 0x1776; // 6006
/** Missing Required Account */
export const GHOSTSPEAK_MARKETPLACE_ERROR__MISSING_REQUIRED_ACCOUNT = 0x1777; // 6007
/** Invalid Account */
export const GHOSTSPEAK_MARKETPLACE_ERROR__INVALID_ACCOUNT = 0x1778; // 6008
/** Instruction Parsing Failed */
export const GHOSTSPEAK_MARKETPLACE_ERROR__INSTRUCTION_PARSING_FAILED = 0x1779; // 6009
export type GhostspeakMarketplaceError =
| typeof GHOSTSPEAK_MARKETPLACE_ERROR__DEFAULT_KEY_AS_ADMIN
  | typeof GHOSTSPEAK_MARKETPLACE_ERROR__SYSTEM_PROGRAM_AS_ADMIN
  | typeof GHOSTSPEAK_MARKETPLACE_ERROR__TEST_ADDRESS_ON_MAINNET
  | typeof GHOSTSPEAK_MARKETPLACE_ERROR__UNAUTHORIZED_ADMIN
  | typeof GHOSTSPEAK_MARKETPLACE_ERROR__VALIDATION_FAILED
  | typeof GHOSTSPEAK_MARKETPLACE_ERROR__INSUFFICIENT_ACCOUNTS
  | typeof GHOSTSPEAK_MARKETPLACE_ERROR__INVALID_INSTRUCTION_DATA
  | typeof GHOSTSPEAK_MARKETPLACE_ERROR__MISSING_REQUIRED_ACCOUNT
  | typeof GHOSTSPEAK_MARKETPLACE_ERROR__INVALID_ACCOUNT
  | typeof GHOSTSPEAK_MARKETPLACE_ERROR__INSTRUCTION_PARSING_FAILED;

let ghostspeakMarketplaceErrorMessages:
  | Record<GhostspeakMarketplaceError, string>
  | undefined;
if (process.env.NODE_ENV !== 'production') {
  ghostspeakMarketplaceErrorMessages = {

    [GHOSTSPEAK_MARKETPLACE_ERROR__DEFAULT_KEY_AS_ADMIN]: `Default (null) public key cannot be used as admin`,
    [GHOSTSPEAK_MARKETPLACE_ERROR__SYSTEM_PROGRAM_AS_ADMIN]: `System program cannot be used as admin`,
    [GHOSTSPEAK_MARKETPLACE_ERROR__TEST_ADDRESS_ON_MAINNET]: `Test address cannot be used on mainnet`,
    [GHOSTSPEAK_MARKETPLACE_ERROR__UNAUTHORIZED_ADMIN]: `Unauthorized admin - key does not match protocol admin`,
    [GHOSTSPEAK_MARKETPLACE_ERROR__VALIDATION_FAILED]: `Admin validation failed`,
    [GHOSTSPEAK_MARKETPLACE_ERROR__INSUFFICIENT_ACCOUNTS]: `Insufficient Accounts`,
    [GHOSTSPEAK_MARKETPLACE_ERROR__INVALID_INSTRUCTION_DATA]: `Invalid Instruction Data`,
    [GHOSTSPEAK_MARKETPLACE_ERROR__MISSING_REQUIRED_ACCOUNT]: `Missing Required Account`,
    [GHOSTSPEAK_MARKETPLACE_ERROR__INVALID_ACCOUNT]: `Invalid Account`,
    [GHOSTSPEAK_MARKETPLACE_ERROR__INSTRUCTION_PARSING_FAILED]: `Instruction Parsing Failed`,
  };
}

export function getGhostspeakMarketplaceErrorMessage(
  code: GhostspeakMarketplaceError
): string {
  if (process.env.NODE_ENV !== 'production') {
    return (
      ghostspeakMarketplaceErrorMessages as Record<
        GhostspeakMarketplaceError,
        string
      >
    )[code];
  }

  return 'Error message not available in production bundles.';
}

export function isGhostspeakMarketplaceError<
  TProgramErrorCode extends GhostspeakMarketplaceError,
>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
    code
  );
}
