/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead regenerate from IDL.
 *
 * Instruction account mappings for enhanced error messages
 */

export interface InstructionMapping {
  expectedAccounts: Array<{ name: string; pda: boolean }>;
  docs?: string;
}

export const instructionAccountMappings: Record<string, InstructionMapping> = {
  // Core agent instructions
  registerAgent: {
    expectedAccounts: [
      { name: 'agent', pda: true },
      { name: 'authority', pda: false },
      { name: 'systemProgram', pda: false }
    ],
    docs: 'Register a new AI agent in the marketplace'
  },
  
  registerAgentCompressed: {
    expectedAccounts: [
      { name: 'agent', pda: true },
      { name: 'authority', pda: false },
      { name: 'merkleTree', pda: false },
      { name: 'systemProgram', pda: false }
    ],
    docs: 'Register a compressed AI agent using ZK compression'
  },
  
  updateAgent: {
    expectedAccounts: [
      { name: 'agent', pda: true },
      { name: 'authority', pda: false }
    ],
    docs: 'Update agent configuration and metadata'
  },
  
  activateAgent: {
    expectedAccounts: [
      { name: 'agent', pda: true },
      { name: 'authority', pda: false }
    ],
    docs: 'Activate an agent for marketplace participation'
  },
  
  deactivateAgent: {
    expectedAccounts: [
      { name: 'agent', pda: true },
      { name: 'authority', pda: false }
    ],
    docs: 'Deactivate an agent from marketplace participation'
  },
  
  // Marketplace instructions
  createServiceListing: {
    expectedAccounts: [
      { name: 'serviceListing', pda: true },
      { name: 'agent', pda: true },
      { name: 'authority', pda: false },
      { name: 'systemProgram', pda: false }
    ],
    docs: 'Create a new service listing in the marketplace'
  },
  
  purchaseService: {
    expectedAccounts: [
      { name: 'serviceListing', pda: true },
      { name: 'servicePurchase', pda: true },
      { name: 'buyer', pda: false },
      { name: 'systemProgram', pda: false }
    ],
    docs: 'Purchase a service from the marketplace'
  },
  
  // Escrow instructions
  createEscrow: {
    expectedAccounts: [
      { name: 'escrow', pda: true },
      { name: 'buyer', pda: false },
      { name: 'seller', pda: false },
      { name: 'systemProgram', pda: false }
    ],
    docs: 'Create an escrow account for secure transactions'
  },
  
  completeEscrow: {
    expectedAccounts: [
      { name: 'escrow', pda: true },
      { name: 'buyer', pda: false },
      { name: 'seller', pda: false }
    ],
    docs: 'Complete an escrow transaction'
  },
  
  cancelEscrow: {
    expectedAccounts: [
      { name: 'escrow', pda: true },
      { name: 'authority', pda: false }
    ],
    docs: 'Cancel an escrow transaction'
  },
  
  // Analytics instructions
  createAnalyticsDashboard: {
    expectedAccounts: [
      { name: 'analyticsDashboard', pda: true },
      { name: 'authority', pda: false },
      { name: 'systemProgram', pda: false }
    ],
    docs: 'Create an analytics dashboard for tracking metrics'
  },
  
  updateAnalyticsDashboard: {
    expectedAccounts: [
      { name: 'analyticsDashboard', pda: true },
      { name: 'authority', pda: false }
    ],
    docs: 'Update analytics dashboard configuration'
  },
  
  // Auction instructions
  createServiceAuction: {
    expectedAccounts: [
      { name: 'auctionMarketplace', pda: true },
      { name: 'serviceListing', pda: true },
      { name: 'authority', pda: false },
      { name: 'systemProgram', pda: false }
    ],
    docs: 'Create a new service auction'
  },
  
  placeAuctionBid: {
    expectedAccounts: [
      { name: 'auctionMarketplace', pda: true },
      { name: 'bidder', pda: false }
    ],
    docs: 'Place a bid on a service auction'
  },
  
  finalizeAuction: {
    expectedAccounts: [
      { name: 'auctionMarketplace', pda: true },
      { name: 'winner', pda: false },
      { name: 'authority', pda: false }
    ],
    docs: 'Finalize an auction and declare the winner'
  },
  
  // Channel instructions
  createChannel: {
    expectedAccounts: [
      { name: 'channel', pda: true },
      { name: 'authority', pda: false },
      { name: 'systemProgram', pda: false }
    ],
    docs: 'Create a communication channel'
  },
  
  joinChannel: {
    expectedAccounts: [
      { name: 'channel', pda: true },
      { name: 'user', pda: false }
    ],
    docs: 'Join an existing communication channel'
  },
  
  sendMessage: {
    expectedAccounts: [
      { name: 'channel', pda: true },
      { name: 'message', pda: true },
      { name: 'sender', pda: false },
      { name: 'systemProgram', pda: false }
    ],
    docs: 'Send a message to a channel'
  },
  
  // Governance instructions
  createGovernanceProposal: {
    expectedAccounts: [
      { name: 'governanceProposal', pda: true },
      { name: 'proposer', pda: false },
      { name: 'systemProgram', pda: false }
    ],
    docs: 'Create a new governance proposal'
  },
  
  castVote: {
    expectedAccounts: [
      { name: 'governanceProposal', pda: true },
      { name: 'voter', pda: false }
    ],
    docs: 'Cast a vote on a governance proposal'
  },
  
  executeProposal: {
    expectedAccounts: [
      { name: 'governanceProposal', pda: true },
      { name: 'executor', pda: false }
    ],
    docs: 'Execute a passed governance proposal'
  },
  
  // Work order instructions
  createWorkOrder: {
    expectedAccounts: [
      { name: 'workOrder', pda: true },
      { name: 'client', pda: false },
      { name: 'agent', pda: true },
      { name: 'systemProgram', pda: false }
    ],
    docs: 'Create a new work order'
  },
  
  submitWorkDelivery: {
    expectedAccounts: [
      { name: 'workOrder', pda: true },
      { name: 'workDelivery', pda: true },
      { name: 'agent', pda: true },
      { name: 'systemProgram', pda: false }
    ],
    docs: 'Submit work delivery for a work order'
  },
  
  verifyWorkDelivery: {
    expectedAccounts: [
      { name: 'workOrder', pda: true },
      { name: 'workDelivery', pda: true },
      { name: 'verifier', pda: false }
    ],
    docs: 'Verify submitted work delivery'
  },
  
  // Replication instructions
  replicateAgent: {
    expectedAccounts: [
      { name: 'sourceAgent', pda: true },
      { name: 'newAgent', pda: true },
      { name: 'replicationRecord', pda: true },
      { name: 'authority', pda: false },
      { name: 'systemProgram', pda: false }
    ],
    docs: 'Replicate an existing agent'
  },
  
  createReplicationTemplate: {
    expectedAccounts: [
      { name: 'replicationTemplate', pda: true },
      { name: 'sourceAgent', pda: true },
      { name: 'authority', pda: false },
      { name: 'systemProgram', pda: false }
    ],
    docs: 'Create a replication template from an agent'
  },
  
  // Token 2022 instructions
  createToken2022Mint: {
    expectedAccounts: [
      { name: 'mint', pda: false },
      { name: 'authority', pda: false },
      { name: 'tokenProgram', pda: false },
      { name: 'systemProgram', pda: false }
    ],
    docs: 'Create a new SPL Token 2022 mint'
  },
  
  initializeTransferFeeConfig: {
    expectedAccounts: [
      { name: 'mint', pda: false },
      { name: 'authority', pda: false },
      { name: 'tokenProgram', pda: false }
    ],
    docs: 'Initialize transfer fee configuration for Token 2022'
  },
  
  initializeConfidentialTransferMint: {
    expectedAccounts: [
      { name: 'mint', pda: false },
      { name: 'authority', pda: false },
      { name: 'tokenProgram', pda: false }
    ],
    docs: 'Initialize confidential transfer configuration for Token 2022'
  }
};