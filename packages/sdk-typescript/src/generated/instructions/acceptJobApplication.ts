/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import {
  GHOSTSPEAK_MARKETPLACE_ERROR__INSUFFICIENT_ACCOUNTS,
  GHOSTSPEAK_MARKETPLACE_ERROR__INVALID_INSTRUCTION_DATA,
  GHOSTSPEAK_MARKETPLACE_ERROR__MISSING_REQUIRED_ACCOUNT,
  GHOSTSPEAK_MARKETPLACE_ERROR__INVALID_ACCOUNT,
  GHOSTSPEAK_MARKETPLACE_ERROR__INSTRUCTION_PARSING_FAILED,
  isGhostspeakMarketplaceError,
} from '../errors';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const ACCEPT_JOB_APPLICATION_DISCRIMINATOR = new Uint8Array([
  191, 161, 93, 207, 225, 58, 71, 16,
]);

export function getAcceptJobApplicationDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    ACCEPT_JOB_APPLICATION_DISCRIMINATOR
  );
}

export type AcceptJobApplicationInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountJobContract extends string | AccountMeta<string> = string,
  TAccountJobPosting extends string | AccountMeta<string> = string,
  TAccountJobApplication extends string | AccountMeta<string> = string,
  TAccountEmployer extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountJobContract extends string
        ? WritableAccount<TAccountJobContract>
        : TAccountJobContract,
      TAccountJobPosting extends string
        ? WritableAccount<TAccountJobPosting>
        : TAccountJobPosting,
      TAccountJobApplication extends string
        ? WritableAccount<TAccountJobApplication>
        : TAccountJobApplication,
      TAccountEmployer extends string
        ? WritableSignerAccount<TAccountEmployer> &
            AccountSignerMeta<TAccountEmployer>
        : TAccountEmployer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type AcceptJobApplicationInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type AcceptJobApplicationInstructionDataArgs = {};

export function getAcceptJobApplicationInstructionDataEncoder(): FixedSizeEncoder<AcceptJobApplicationInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: ACCEPT_JOB_APPLICATION_DISCRIMINATOR,
    })
  );
}

export function getAcceptJobApplicationInstructionDataDecoder(): FixedSizeDecoder<AcceptJobApplicationInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getAcceptJobApplicationInstructionDataCodec(): FixedSizeCodec<
  AcceptJobApplicationInstructionDataArgs,
  AcceptJobApplicationInstructionData
> {
  return combineCodec(
    getAcceptJobApplicationInstructionDataEncoder(),
    getAcceptJobApplicationInstructionDataDecoder()
  );
}

export type AcceptJobApplicationAsyncInput<
  TAccountJobContract extends string = string,
  TAccountJobPosting extends string = string,
  TAccountJobApplication extends string = string,
  TAccountEmployer extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  jobContract?: Address<TAccountJobContract>;
  jobPosting: Address<TAccountJobPosting>;
  jobApplication: Address<TAccountJobApplication>;
  employer: TransactionSigner<TAccountEmployer>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getAcceptJobApplicationInstructionAsync<
  TAccountJobContract extends string,
  TAccountJobPosting extends string,
  TAccountJobApplication extends string,
  TAccountEmployer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: AcceptJobApplicationAsyncInput<
    TAccountJobContract,
    TAccountJobPosting,
    TAccountJobApplication,
    TAccountEmployer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  AcceptJobApplicationInstruction<
    TProgramAddress,
    TAccountJobContract,
    TAccountJobPosting,
    TAccountJobApplication,
    TAccountEmployer,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    jobContract: { value: input.jobContract ?? null, isWritable: true },
    jobPosting: { value: input.jobPosting ?? null, isWritable: true },
    jobApplication: { value: input.jobApplication ?? null, isWritable: true },
    employer: { value: input.employer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.jobContract.value) {
    accounts.jobContract.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            106, 111, 98, 95, 99, 111, 110, 116, 114, 97, 99, 116,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.jobPosting.value)),
        getAddressEncoder().encode(
          expectAddress(accounts.jobApplication.value)
        ),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.jobContract),
      getAccountMeta(accounts.jobPosting),
      getAccountMeta(accounts.jobApplication),
      getAccountMeta(accounts.employer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getAcceptJobApplicationInstructionDataEncoder().encode({}),
  } as AcceptJobApplicationInstruction<
    TProgramAddress,
    TAccountJobContract,
    TAccountJobPosting,
    TAccountJobApplication,
    TAccountEmployer,
    TAccountSystemProgram
  >;

  return instruction;
}

export type AcceptJobApplicationInput<
  TAccountJobContract extends string = string,
  TAccountJobPosting extends string = string,
  TAccountJobApplication extends string = string,
  TAccountEmployer extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  jobContract: Address<TAccountJobContract>;
  jobPosting: Address<TAccountJobPosting>;
  jobApplication: Address<TAccountJobApplication>;
  employer: TransactionSigner<TAccountEmployer>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getAcceptJobApplicationInstruction<
  TAccountJobContract extends string,
  TAccountJobPosting extends string,
  TAccountJobApplication extends string,
  TAccountEmployer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: AcceptJobApplicationInput<
    TAccountJobContract,
    TAccountJobPosting,
    TAccountJobApplication,
    TAccountEmployer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): AcceptJobApplicationInstruction<
  TProgramAddress,
  TAccountJobContract,
  TAccountJobPosting,
  TAccountJobApplication,
  TAccountEmployer,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    jobContract: { value: input.jobContract ?? null, isWritable: true },
    jobPosting: { value: input.jobPosting ?? null, isWritable: true },
    jobApplication: { value: input.jobApplication ?? null, isWritable: true },
    employer: { value: input.employer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.jobContract),
      getAccountMeta(accounts.jobPosting),
      getAccountMeta(accounts.jobApplication),
      getAccountMeta(accounts.employer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getAcceptJobApplicationInstructionDataEncoder().encode({}),
  } as AcceptJobApplicationInstruction<
    TProgramAddress,
    TAccountJobContract,
    TAccountJobPosting,
    TAccountJobApplication,
    TAccountEmployer,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedAcceptJobApplicationInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    jobContract: TAccountMetas[0];
    jobPosting: TAccountMetas[1];
    jobApplication: TAccountMetas[2];
    employer: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
  };
  data: AcceptJobApplicationInstructionData;
};

export function parseAcceptJobApplicationInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedAcceptJobApplicationInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    throw new Error('[GHOSTSPEAK_MARKETPLACE_ERROR__INSUFFICIENT_ACCOUNTS] Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      jobContract: getNextAccount(),
      jobPosting: getNextAccount(),
      jobApplication: getNextAccount(),
      employer: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getAcceptJobApplicationInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
