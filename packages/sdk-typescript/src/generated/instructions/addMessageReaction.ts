/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const ADD_MESSAGE_REACTION_DISCRIMINATOR = new Uint8Array([
  82, 29, 134, 149, 255, 74, 248, 210,
]);

export function getAddMessageReactionDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    ADD_MESSAGE_REACTION_DISCRIMINATOR
  );
}

export type AddMessageReactionInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountChannel extends string | AccountMeta<string> = string,
  TAccountMessage extends string | AccountMeta<string> = string,
  TAccountReentrancyGuard extends string | AccountMeta<string> = string,
  TAccountUser extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountChannel extends string
        ? WritableAccount<TAccountChannel>
        : TAccountChannel,
      TAccountMessage extends string
        ? WritableAccount<TAccountMessage>
        : TAccountMessage,
      TAccountReentrancyGuard extends string
        ? WritableAccount<TAccountReentrancyGuard>
        : TAccountReentrancyGuard,
      TAccountUser extends string
        ? ReadonlySignerAccount<TAccountUser> & AccountSignerMeta<TAccountUser>
        : TAccountUser,
      ...TRemainingAccounts,
    ]
  >;

export type AddMessageReactionInstructionData = {
  discriminator: ReadonlyUint8Array;
  reaction: string;
};

export type AddMessageReactionInstructionDataArgs = { reaction: string };

export function getAddMessageReactionInstructionDataEncoder(): Encoder<AddMessageReactionInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['reaction', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ]),
    (value) => ({ ...value, discriminator: ADD_MESSAGE_REACTION_DISCRIMINATOR })
  );
}

export function getAddMessageReactionInstructionDataDecoder(): Decoder<AddMessageReactionInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['reaction', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getAddMessageReactionInstructionDataCodec(): Codec<
  AddMessageReactionInstructionDataArgs,
  AddMessageReactionInstructionData
> {
  return combineCodec(
    getAddMessageReactionInstructionDataEncoder(),
    getAddMessageReactionInstructionDataDecoder()
  );
}

export type AddMessageReactionAsyncInput<
  TAccountChannel extends string = string,
  TAccountMessage extends string = string,
  TAccountReentrancyGuard extends string = string,
  TAccountUser extends string = string,
> = {
  channel: Address<TAccountChannel>;
  message: Address<TAccountMessage>;
  reentrancyGuard?: Address<TAccountReentrancyGuard>;
  user: TransactionSigner<TAccountUser>;
  reaction: AddMessageReactionInstructionDataArgs['reaction'];
};

export async function getAddMessageReactionInstructionAsync<
  TAccountChannel extends string,
  TAccountMessage extends string,
  TAccountReentrancyGuard extends string,
  TAccountUser extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: AddMessageReactionAsyncInput<
    TAccountChannel,
    TAccountMessage,
    TAccountReentrancyGuard,
    TAccountUser
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  AddMessageReactionInstruction<
    TProgramAddress,
    TAccountChannel,
    TAccountMessage,
    TAccountReentrancyGuard,
    TAccountUser
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    channel: { value: input.channel ?? null, isWritable: true },
    message: { value: input.message ?? null, isWritable: true },
    reentrancyGuard: { value: input.reentrancyGuard ?? null, isWritable: true },
    user: { value: input.user ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.reentrancyGuard.value) {
    accounts.reentrancyGuard.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            114, 101, 101, 110, 116, 114, 97, 110, 99, 121, 95, 103, 117, 97,
            114, 100,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.channel),
      getAccountMeta(accounts.message),
      getAccountMeta(accounts.reentrancyGuard),
      getAccountMeta(accounts.user),
    ],
    programAddress,
    data: getAddMessageReactionInstructionDataEncoder().encode(
      args as AddMessageReactionInstructionDataArgs
    ),
  } as AddMessageReactionInstruction<
    TProgramAddress,
    TAccountChannel,
    TAccountMessage,
    TAccountReentrancyGuard,
    TAccountUser
  >;

  return instruction;
}

export type AddMessageReactionInput<
  TAccountChannel extends string = string,
  TAccountMessage extends string = string,
  TAccountReentrancyGuard extends string = string,
  TAccountUser extends string = string,
> = {
  channel: Address<TAccountChannel>;
  message: Address<TAccountMessage>;
  reentrancyGuard: Address<TAccountReentrancyGuard>;
  user: TransactionSigner<TAccountUser>;
  reaction: AddMessageReactionInstructionDataArgs['reaction'];
};

export function getAddMessageReactionInstruction<
  TAccountChannel extends string,
  TAccountMessage extends string,
  TAccountReentrancyGuard extends string,
  TAccountUser extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: AddMessageReactionInput<
    TAccountChannel,
    TAccountMessage,
    TAccountReentrancyGuard,
    TAccountUser
  >,
  config?: { programAddress?: TProgramAddress }
): AddMessageReactionInstruction<
  TProgramAddress,
  TAccountChannel,
  TAccountMessage,
  TAccountReentrancyGuard,
  TAccountUser
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    channel: { value: input.channel ?? null, isWritable: true },
    message: { value: input.message ?? null, isWritable: true },
    reentrancyGuard: { value: input.reentrancyGuard ?? null, isWritable: true },
    user: { value: input.user ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.channel),
      getAccountMeta(accounts.message),
      getAccountMeta(accounts.reentrancyGuard),
      getAccountMeta(accounts.user),
    ],
    programAddress,
    data: getAddMessageReactionInstructionDataEncoder().encode(
      args as AddMessageReactionInstructionDataArgs
    ),
  } as AddMessageReactionInstruction<
    TProgramAddress,
    TAccountChannel,
    TAccountMessage,
    TAccountReentrancyGuard,
    TAccountUser
  >;

  return instruction;
}

export type ParsedAddMessageReactionInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    channel: TAccountMetas[0];
    message: TAccountMetas[1];
    reentrancyGuard: TAccountMetas[2];
    user: TAccountMetas[3];
  };
  data: AddMessageReactionInstructionData;
};

export function parseAddMessageReactionInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedAddMessageReactionInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      channel: getNextAccount(),
      message: getNextAccount(),
      reentrancyGuard: getNextAccount(),
      user: getNextAccount(),
    },
    data: getAddMessageReactionInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
