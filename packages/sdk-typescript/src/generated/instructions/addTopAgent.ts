/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const ADD_TOP_AGENT_DISCRIMINATOR = new Uint8Array([
  9, 96, 62, 59, 180, 205, 102, 11,
]);

export function getAddTopAgentDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    ADD_TOP_AGENT_DISCRIMINATOR
  );
}

export type AddTopAgentInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMarketAnalytics extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountClock extends
    | string
    | AccountMeta<string> = 'SysvarC1ock11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountMarketAnalytics extends string
        ? WritableAccount<TAccountMarketAnalytics>
        : TAccountMarketAnalytics,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountClock extends string
        ? ReadonlyAccount<TAccountClock>
        : TAccountClock,
      ...TRemainingAccounts,
    ]
  >;

export type AddTopAgentInstructionData = {
  discriminator: ReadonlyUint8Array;
  agent: Address;
};

export type AddTopAgentInstructionDataArgs = { agent: Address };

export function getAddTopAgentInstructionDataEncoder(): FixedSizeEncoder<AddTopAgentInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['agent', getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: ADD_TOP_AGENT_DISCRIMINATOR })
  );
}

export function getAddTopAgentInstructionDataDecoder(): FixedSizeDecoder<AddTopAgentInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['agent', getAddressDecoder()],
  ]);
}

export function getAddTopAgentInstructionDataCodec(): FixedSizeCodec<
  AddTopAgentInstructionDataArgs,
  AddTopAgentInstructionData
> {
  return combineCodec(
    getAddTopAgentInstructionDataEncoder(),
    getAddTopAgentInstructionDataDecoder()
  );
}

export type AddTopAgentInput<
  TAccountMarketAnalytics extends string = string,
  TAccountAuthority extends string = string,
  TAccountClock extends string = string,
> = {
  /** Market analytics account with canonical bump validation */
  marketAnalytics: Address<TAccountMarketAnalytics>;
  /** Enhanced authority verification */
  authority: TransactionSigner<TAccountAuthority>;
  /** Clock sysvar for timestamp validation */
  clock?: Address<TAccountClock>;
  agent: AddTopAgentInstructionDataArgs['agent'];
};

export function getAddTopAgentInstruction<
  TAccountMarketAnalytics extends string,
  TAccountAuthority extends string,
  TAccountClock extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: AddTopAgentInput<
    TAccountMarketAnalytics,
    TAccountAuthority,
    TAccountClock
  >,
  config?: { programAddress?: TProgramAddress }
): AddTopAgentInstruction<
  TProgramAddress,
  TAccountMarketAnalytics,
  TAccountAuthority,
  TAccountClock
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    marketAnalytics: { value: input.marketAnalytics ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    clock: { value: input.clock ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.marketAnalytics),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.clock),
    ],
    programAddress,
    data: getAddTopAgentInstructionDataEncoder().encode(
      args as AddTopAgentInstructionDataArgs
    ),
  } as AddTopAgentInstruction<
    TProgramAddress,
    TAccountMarketAnalytics,
    TAccountAuthority,
    TAccountClock
  >;

  return instruction;
}

export type ParsedAddTopAgentInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Market analytics account with canonical bump validation */
    marketAnalytics: TAccountMetas[0];
    /** Enhanced authority verification */
    authority: TAccountMetas[1];
    /** Clock sysvar for timestamp validation */
    clock: TAccountMetas[2];
  };
  data: AddTopAgentInstructionData;
};

export function parseAddTopAgentInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedAddTopAgentInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      marketAnalytics: getNextAccount(),
      authority: getNextAccount(),
      clock: getNextAccount(),
    },
    data: getAddTopAgentInstructionDataDecoder().decode(instruction.data),
  };
}
