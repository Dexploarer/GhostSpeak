/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const APPLY_TO_JOB_DISCRIMINATOR = new Uint8Array([
  0, 252, 167, 244, 145, 90, 227, 29,
]);

export function getApplyToJobDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    APPLY_TO_JOB_DISCRIMINATOR
  );
}

export type ApplyToJobInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountJobApplication extends string | AccountMeta<string> = string,
  TAccountJobPosting extends string | AccountMeta<string> = string,
  TAccountAgent extends string | AccountMeta<string> = string,
  TAccountAgentOwner extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountJobApplication extends string
        ? WritableAccount<TAccountJobApplication>
        : TAccountJobApplication,
      TAccountJobPosting extends string
        ? WritableAccount<TAccountJobPosting>
        : TAccountJobPosting,
      TAccountAgent extends string
        ? ReadonlyAccount<TAccountAgent>
        : TAccountAgent,
      TAccountAgentOwner extends string
        ? WritableSignerAccount<TAccountAgentOwner> &
            AccountSignerMeta<TAccountAgentOwner>
        : TAccountAgentOwner,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ApplyToJobInstructionData = {
  discriminator: ReadonlyUint8Array;
  coverLetter: string;
  proposedPrice: bigint;
  estimatedDuration: number;
  proposedRate: bigint;
  estimatedDelivery: bigint;
  portfolioItems: Array<string>;
};

export type ApplyToJobInstructionDataArgs = {
  coverLetter: string;
  proposedPrice: number | bigint;
  estimatedDuration: number;
  proposedRate: number | bigint;
  estimatedDelivery: number | bigint;
  portfolioItems: Array<string>;
};

export function getApplyToJobInstructionDataEncoder(): Encoder<ApplyToJobInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['coverLetter', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['proposedPrice', getU64Encoder()],
      ['estimatedDuration', getU32Encoder()],
      ['proposedRate', getU64Encoder()],
      ['estimatedDelivery', getI64Encoder()],
      [
        'portfolioItems',
        getArrayEncoder(
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())
        ),
      ],
    ]),
    (value) => ({ ...value, discriminator: APPLY_TO_JOB_DISCRIMINATOR })
  );
}

export function getApplyToJobInstructionDataDecoder(): Decoder<ApplyToJobInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['coverLetter', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['proposedPrice', getU64Decoder()],
    ['estimatedDuration', getU32Decoder()],
    ['proposedRate', getU64Decoder()],
    ['estimatedDelivery', getI64Decoder()],
    [
      'portfolioItems',
      getArrayDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
  ]);
}

export function getApplyToJobInstructionDataCodec(): Codec<
  ApplyToJobInstructionDataArgs,
  ApplyToJobInstructionData
> {
  return combineCodec(
    getApplyToJobInstructionDataEncoder(),
    getApplyToJobInstructionDataDecoder()
  );
}

export type ApplyToJobAsyncInput<
  TAccountJobApplication extends string = string,
  TAccountJobPosting extends string = string,
  TAccountAgent extends string = string,
  TAccountAgentOwner extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  jobApplication?: Address<TAccountJobApplication>;
  jobPosting: Address<TAccountJobPosting>;
  agent: Address<TAccountAgent>;
  agentOwner: TransactionSigner<TAccountAgentOwner>;
  systemProgram?: Address<TAccountSystemProgram>;
  coverLetter: ApplyToJobInstructionDataArgs['coverLetter'];
  proposedPrice: ApplyToJobInstructionDataArgs['proposedPrice'];
  estimatedDuration: ApplyToJobInstructionDataArgs['estimatedDuration'];
  proposedRate: ApplyToJobInstructionDataArgs['proposedRate'];
  estimatedDelivery: ApplyToJobInstructionDataArgs['estimatedDelivery'];
  portfolioItems: ApplyToJobInstructionDataArgs['portfolioItems'];
};

export async function getApplyToJobInstructionAsync<
  TAccountJobApplication extends string,
  TAccountJobPosting extends string,
  TAccountAgent extends string,
  TAccountAgentOwner extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: ApplyToJobAsyncInput<
    TAccountJobApplication,
    TAccountJobPosting,
    TAccountAgent,
    TAccountAgentOwner,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  ApplyToJobInstruction<
    TProgramAddress,
    TAccountJobApplication,
    TAccountJobPosting,
    TAccountAgent,
    TAccountAgentOwner,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    jobApplication: { value: input.jobApplication ?? null, isWritable: true },
    jobPosting: { value: input.jobPosting ?? null, isWritable: true },
    agent: { value: input.agent ?? null, isWritable: false },
    agentOwner: { value: input.agentOwner ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.jobApplication.value) {
    accounts.jobApplication.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            106, 111, 98, 95, 97, 112, 112, 108, 105, 99, 97, 116, 105, 111,
            110,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.jobPosting.value)),
        getAddressEncoder().encode(expectAddress(accounts.agent.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.jobApplication),
      getAccountMeta(accounts.jobPosting),
      getAccountMeta(accounts.agent),
      getAccountMeta(accounts.agentOwner),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getApplyToJobInstructionDataEncoder().encode(
      args as ApplyToJobInstructionDataArgs
    ),
  } as ApplyToJobInstruction<
    TProgramAddress,
    TAccountJobApplication,
    TAccountJobPosting,
    TAccountAgent,
    TAccountAgentOwner,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ApplyToJobInput<
  TAccountJobApplication extends string = string,
  TAccountJobPosting extends string = string,
  TAccountAgent extends string = string,
  TAccountAgentOwner extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  jobApplication: Address<TAccountJobApplication>;
  jobPosting: Address<TAccountJobPosting>;
  agent: Address<TAccountAgent>;
  agentOwner: TransactionSigner<TAccountAgentOwner>;
  systemProgram?: Address<TAccountSystemProgram>;
  coverLetter: ApplyToJobInstructionDataArgs['coverLetter'];
  proposedPrice: ApplyToJobInstructionDataArgs['proposedPrice'];
  estimatedDuration: ApplyToJobInstructionDataArgs['estimatedDuration'];
  proposedRate: ApplyToJobInstructionDataArgs['proposedRate'];
  estimatedDelivery: ApplyToJobInstructionDataArgs['estimatedDelivery'];
  portfolioItems: ApplyToJobInstructionDataArgs['portfolioItems'];
};

export function getApplyToJobInstruction<
  TAccountJobApplication extends string,
  TAccountJobPosting extends string,
  TAccountAgent extends string,
  TAccountAgentOwner extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: ApplyToJobInput<
    TAccountJobApplication,
    TAccountJobPosting,
    TAccountAgent,
    TAccountAgentOwner,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ApplyToJobInstruction<
  TProgramAddress,
  TAccountJobApplication,
  TAccountJobPosting,
  TAccountAgent,
  TAccountAgentOwner,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    jobApplication: { value: input.jobApplication ?? null, isWritable: true },
    jobPosting: { value: input.jobPosting ?? null, isWritable: true },
    agent: { value: input.agent ?? null, isWritable: false },
    agentOwner: { value: input.agentOwner ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.jobApplication),
      getAccountMeta(accounts.jobPosting),
      getAccountMeta(accounts.agent),
      getAccountMeta(accounts.agentOwner),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getApplyToJobInstructionDataEncoder().encode(
      args as ApplyToJobInstructionDataArgs
    ),
  } as ApplyToJobInstruction<
    TProgramAddress,
    TAccountJobApplication,
    TAccountJobPosting,
    TAccountAgent,
    TAccountAgentOwner,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedApplyToJobInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    jobApplication: TAccountMetas[0];
    jobPosting: TAccountMetas[1];
    agent: TAccountMetas[2];
    agentOwner: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
  };
  data: ApplyToJobInstructionData;
};

export function parseApplyToJobInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedApplyToJobInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      jobApplication: getNextAccount(),
      jobPosting: getNextAccount(),
      agent: getNextAccount(),
      agentOwner: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getApplyToJobInstructionDataDecoder().decode(instruction.data),
  };
}
