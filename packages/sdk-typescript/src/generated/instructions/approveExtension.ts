import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  transformEncoder,
  type Codec,
  type Decoder,
  type Encoder,
  type ReadonlyUint8Array
} from '@solana/codecs-core';
import {
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder
} from '@solana/codecs-data-structures';
import {
  type Address
} from '@solana/addresses';
import {
  type IInstruction,
  type IInstructionWithData
} from '@solana/instructions';
import { AccountRole } from '@solana/instructions';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

export const APPROVE_EXTENSION_DISCRIMINATOR = new Uint8Array([
  202, 138, 100, 241, 89, 154, 3, 53,
]);

export function getApproveExtensionDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    APPROVE_EXTENSION_DISCRIMINATOR
  );
}

export type ApproveExtensionInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly any[] = readonly any[],
> = {
  programAddress: Address<TProgram>;
  data: Uint8Array;
  accounts: TAccountMetas;
};

export type ApproveExtensionInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type ApproveExtensionInstructionDataArgs = {};

export function getApproveExtensionInstructionDataEncoder(): Encoder<ApproveExtensionInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: APPROVE_EXTENSION_DISCRIMINATOR })
  );
}

export function getApproveExtensionInstructionDataDecoder(): Decoder<ApproveExtensionInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getApproveExtensionInstructionDataCodec(): Codec<
  ApproveExtensionInstructionDataArgs,
  ApproveExtensionInstructionData
> {
  return combineCodec(
    getApproveExtensionInstructionDataEncoder(),
    getApproveExtensionInstructionDataDecoder()
  );
}

export type ApproveExtensionInput<
  TAccountExtension extends string = string,
  TAccountAuthority extends string = string,
  TAccountClock extends string = string,
> = {
  /** Extension account with canonical validation */
  extension: Address<TAccountExtension>;
  /** Enhanced authority verification - only protocol admin */
  authority: any;
  /** Clock sysvar for timestamp validation */
  clock?: Address<TAccountClock>;
};

export function getApproveExtensionInstruction<
  TAccountExtension extends string,
  TAccountAuthority extends string,
  TAccountClock extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: ApproveExtensionInput<
    TAccountExtension,
    TAccountAuthority,
    TAccountClock
  >,
  config?: { programAddress?: TProgramAddress }
): ApproveExtensionInstruction<TProgramAddress, any[]> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    extension: { value: input.extension ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    clock: { value: input.clock ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.extension),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.clock),
    ],
    programAddress,
    data: getApproveExtensionInstructionDataEncoder().encode({}),
  } as ApproveExtensionInstruction<TProgramAddress, any[]>;

  return instruction;
}

export type ParsedApproveExtensionInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly { address: Address; role: AccountRole }[] = readonly { address: Address; role: AccountRole }[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Extension account with canonical validation */
    extension: TAccountMetas[0];
    /** Enhanced authority verification - only protocol admin */
    authority: TAccountMetas[1];
    /** Clock sysvar for timestamp validation */
    clock: TAccountMetas[2];
  };
  data: ApproveExtensionInstructionData;
};

export function parseApproveExtensionInstruction<
  TProgram extends string,
  TAccountMetas extends readonly { address: Address; role: AccountRole }[],
>(
  instruction: { programAddress: TProgram } &
    { accounts: TAccountMetas } &
    { data: Uint8Array }
): ParsedApproveExtensionInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress as Address<TProgram>,
    accounts: {
      extension: getNextAccount(),
      authority: getNextAccount(),
      clock: getNextAccount(),
    },
    data: getApproveExtensionInstructionDataDecoder().decode(instruction.data),
  };
}
