/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import {
  GHOSTSPEAK_MARKETPLACE_ERROR__INSUFFICIENT_ACCOUNTS,
  GHOSTSPEAK_MARKETPLACE_ERROR__INVALID_INSTRUCTION_DATA,
  GHOSTSPEAK_MARKETPLACE_ERROR__MISSING_REQUIRED_ACCOUNT,
  GHOSTSPEAK_MARKETPLACE_ERROR__INVALID_ACCOUNT,
  GHOSTSPEAK_MARKETPLACE_ERROR__INSTRUCTION_PARSING_FAILED,
  isGhostspeakMarketplaceError,
} from '../errors';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const ASSIGN_ARBITRATOR_DISCRIMINATOR = new Uint8Array([
  227, 183, 153, 251, 4, 55, 13, 56,
]);

export function getAssignArbitratorDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    ASSIGN_ARBITRATOR_DISCRIMINATOR
  );
}

export type AssignArbitratorInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountDispute extends string | AccountMeta<string> = string,
  TAccountArbitratorRegistry extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountClock extends
    | string
    | AccountMeta<string> = 'SysvarC1ock11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountDispute extends string
        ? WritableAccount<TAccountDispute>
        : TAccountDispute,
      TAccountArbitratorRegistry extends string
        ? ReadonlyAccount<TAccountArbitratorRegistry>
        : TAccountArbitratorRegistry,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountClock extends string
        ? ReadonlyAccount<TAccountClock>
        : TAccountClock,
      ...TRemainingAccounts,
    ]
  >;

export type AssignArbitratorInstructionData = {
  discriminator: ReadonlyUint8Array;
  arbitrator: Address;
};

export type AssignArbitratorInstructionDataArgs = { arbitrator: Address };

export function getAssignArbitratorInstructionDataEncoder(): FixedSizeEncoder<AssignArbitratorInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['arbitrator', getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: ASSIGN_ARBITRATOR_DISCRIMINATOR })
  );
}

export function getAssignArbitratorInstructionDataDecoder(): FixedSizeDecoder<AssignArbitratorInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['arbitrator', getAddressDecoder()],
  ]);
}

export function getAssignArbitratorInstructionDataCodec(): FixedSizeCodec<
  AssignArbitratorInstructionDataArgs,
  AssignArbitratorInstructionData
> {
  return combineCodec(
    getAssignArbitratorInstructionDataEncoder(),
    getAssignArbitratorInstructionDataDecoder()
  );
}

export type AssignArbitratorAsyncInput<
  TAccountDispute extends string = string,
  TAccountArbitratorRegistry extends string = string,
  TAccountAuthority extends string = string,
  TAccountClock extends string = string,
> = {
  /** Dispute account with canonical validation */
  dispute: Address<TAccountDispute>;
  /** Arbitrator registry for validation */
  arbitratorRegistry?: Address<TAccountArbitratorRegistry>;
  /** Authority (protocol admin or governance) */
  authority: TransactionSigner<TAccountAuthority>;
  /** Clock sysvar for timestamp */
  clock?: Address<TAccountClock>;
  arbitrator: AssignArbitratorInstructionDataArgs['arbitrator'];
};

export async function getAssignArbitratorInstructionAsync<
  TAccountDispute extends string,
  TAccountArbitratorRegistry extends string,
  TAccountAuthority extends string,
  TAccountClock extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: AssignArbitratorAsyncInput<
    TAccountDispute,
    TAccountArbitratorRegistry,
    TAccountAuthority,
    TAccountClock
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  AssignArbitratorInstruction<
    TProgramAddress,
    TAccountDispute,
    TAccountArbitratorRegistry,
    TAccountAuthority,
    TAccountClock
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    dispute: { value: input.dispute ?? null, isWritable: true },
    arbitratorRegistry: {
      value: input.arbitratorRegistry ?? null,
      isWritable: false,
    },
    authority: { value: input.authority ?? null, isWritable: false },
    clock: { value: input.clock ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.arbitratorRegistry.value) {
    accounts.arbitratorRegistry.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            97, 114, 98, 105, 116, 114, 97, 116, 111, 114, 95, 114, 101, 103,
            105, 115, 116, 114, 121,
          ])
        ),
      ],
    });
  }
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.dispute),
      getAccountMeta(accounts.arbitratorRegistry),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.clock),
    ],
    programAddress,
    data: getAssignArbitratorInstructionDataEncoder().encode(
      args as AssignArbitratorInstructionDataArgs
    ),
  } as AssignArbitratorInstruction<
    TProgramAddress,
    TAccountDispute,
    TAccountArbitratorRegistry,
    TAccountAuthority,
    TAccountClock
  >;

  return instruction;
}

export type AssignArbitratorInput<
  TAccountDispute extends string = string,
  TAccountArbitratorRegistry extends string = string,
  TAccountAuthority extends string = string,
  TAccountClock extends string = string,
> = {
  /** Dispute account with canonical validation */
  dispute: Address<TAccountDispute>;
  /** Arbitrator registry for validation */
  arbitratorRegistry: Address<TAccountArbitratorRegistry>;
  /** Authority (protocol admin or governance) */
  authority: TransactionSigner<TAccountAuthority>;
  /** Clock sysvar for timestamp */
  clock?: Address<TAccountClock>;
  arbitrator: AssignArbitratorInstructionDataArgs['arbitrator'];
};

export function getAssignArbitratorInstruction<
  TAccountDispute extends string,
  TAccountArbitratorRegistry extends string,
  TAccountAuthority extends string,
  TAccountClock extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: AssignArbitratorInput<
    TAccountDispute,
    TAccountArbitratorRegistry,
    TAccountAuthority,
    TAccountClock
  >,
  config?: { programAddress?: TProgramAddress }
): AssignArbitratorInstruction<
  TProgramAddress,
  TAccountDispute,
  TAccountArbitratorRegistry,
  TAccountAuthority,
  TAccountClock
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    dispute: { value: input.dispute ?? null, isWritable: true },
    arbitratorRegistry: {
      value: input.arbitratorRegistry ?? null,
      isWritable: false,
    },
    authority: { value: input.authority ?? null, isWritable: false },
    clock: { value: input.clock ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.dispute),
      getAccountMeta(accounts.arbitratorRegistry),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.clock),
    ],
    programAddress,
    data: getAssignArbitratorInstructionDataEncoder().encode(
      args as AssignArbitratorInstructionDataArgs
    ),
  } as AssignArbitratorInstruction<
    TProgramAddress,
    TAccountDispute,
    TAccountArbitratorRegistry,
    TAccountAuthority,
    TAccountClock
  >;

  return instruction;
}

export type ParsedAssignArbitratorInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Dispute account with canonical validation */
    dispute: TAccountMetas[0];
    /** Arbitrator registry for validation */
    arbitratorRegistry: TAccountMetas[1];
    /** Authority (protocol admin or governance) */
    authority: TAccountMetas[2];
    /** Clock sysvar for timestamp */
    clock: TAccountMetas[3];
  };
  data: AssignArbitratorInstructionData;
};

export function parseAssignArbitratorInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedAssignArbitratorInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    throw new Error('[GHOSTSPEAK_MARKETPLACE_ERROR__INSUFFICIENT_ACCOUNTS] Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      dispute: getNextAccount(),
      arbitratorRegistry: getNextAccount(),
      authority: getNextAccount(),
      clock: getNextAccount(),
    },
    data: getAssignArbitratorInstructionDataDecoder().decode(instruction.data),
  };
}
