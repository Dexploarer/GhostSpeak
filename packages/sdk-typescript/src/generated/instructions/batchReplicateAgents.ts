/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import {
  GHOSTSPEAK_MARKETPLACE_ERROR__INSUFFICIENT_ACCOUNTS,
  GHOSTSPEAK_MARKETPLACE_ERROR__INVALID_INSTRUCTION_DATA,
  GHOSTSPEAK_MARKETPLACE_ERROR__MISSING_REQUIRED_ACCOUNT,
  GHOSTSPEAK_MARKETPLACE_ERROR__INVALID_ACCOUNT,
  GHOSTSPEAK_MARKETPLACE_ERROR__INSTRUCTION_PARSING_FAILED,
  isGhostspeakMarketplaceError,
} from '../errors';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getAgentCustomizationDecoder,
  getAgentCustomizationEncoder,
  type AgentCustomization,
  type AgentCustomizationArgs,
} from '../types';

export const BATCH_REPLICATE_AGENTS_DISCRIMINATOR = new Uint8Array([
  224, 241, 221, 158, 57, 55, 110, 180,
]);

export function getBatchReplicateAgentsDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    BATCH_REPLICATE_AGENTS_DISCRIMINATOR
  );
}

export type BatchReplicateAgentsInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountReplicationTemplate extends string | AccountMeta<string> = string,
  TAccountBuyer extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountReplicationTemplate extends string
        ? WritableAccount<TAccountReplicationTemplate>
        : TAccountReplicationTemplate,
      TAccountBuyer extends string
        ? WritableSignerAccount<TAccountBuyer> &
            AccountSignerMeta<TAccountBuyer>
        : TAccountBuyer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type BatchReplicateAgentsInstructionData = {
  discriminator: ReadonlyUint8Array;
  customizations: Array<AgentCustomization>;
  royaltyPercentage: number;
};

export type BatchReplicateAgentsInstructionDataArgs = {
  customizations: Array<AgentCustomizationArgs>;
  royaltyPercentage: number;
};

export function getBatchReplicateAgentsInstructionDataEncoder(): Encoder<BatchReplicateAgentsInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['customizations', getArrayEncoder(getAgentCustomizationEncoder())],
      ['royaltyPercentage', getU32Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: BATCH_REPLICATE_AGENTS_DISCRIMINATOR,
    })
  );
}

export function getBatchReplicateAgentsInstructionDataDecoder(): Decoder<BatchReplicateAgentsInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['customizations', getArrayDecoder(getAgentCustomizationDecoder())],
    ['royaltyPercentage', getU32Decoder()],
  ]);
}

export function getBatchReplicateAgentsInstructionDataCodec(): Codec<
  BatchReplicateAgentsInstructionDataArgs,
  BatchReplicateAgentsInstructionData
> {
  return combineCodec(
    getBatchReplicateAgentsInstructionDataEncoder(),
    getBatchReplicateAgentsInstructionDataDecoder()
  );
}

export type BatchReplicateAgentsInput<
  TAccountReplicationTemplate extends string = string,
  TAccountBuyer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  replicationTemplate: Address<TAccountReplicationTemplate>;
  buyer: TransactionSigner<TAccountBuyer>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  customizations: BatchReplicateAgentsInstructionDataArgs['customizations'];
  royaltyPercentage: BatchReplicateAgentsInstructionDataArgs['royaltyPercentage'];
};

export function getBatchReplicateAgentsInstruction<
  TAccountReplicationTemplate extends string,
  TAccountBuyer extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: BatchReplicateAgentsInput<
    TAccountReplicationTemplate,
    TAccountBuyer,
    TAccountSystemProgram,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): BatchReplicateAgentsInstruction<
  TProgramAddress,
  TAccountReplicationTemplate,
  TAccountBuyer,
  TAccountSystemProgram,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    replicationTemplate: {
      value: input.replicationTemplate ?? null,
      isWritable: true,
    },
    buyer: { value: input.buyer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.replicationTemplate),
      getAccountMeta(accounts.buyer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getBatchReplicateAgentsInstructionDataEncoder().encode(
      args as BatchReplicateAgentsInstructionDataArgs
    ),
  } as BatchReplicateAgentsInstruction<
    TProgramAddress,
    TAccountReplicationTemplate,
    TAccountBuyer,
    TAccountSystemProgram,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedBatchReplicateAgentsInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    replicationTemplate: TAccountMetas[0];
    buyer: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
    tokenProgram: TAccountMetas[3];
  };
  data: BatchReplicateAgentsInstructionData;
};

export function parseBatchReplicateAgentsInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedBatchReplicateAgentsInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    throw new Error('[GHOSTSPEAK_MARKETPLACE_ERROR__INSUFFICIENT_ACCOUNTS] Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      replicationTemplate: getNextAccount(),
      buyer: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getBatchReplicateAgentsInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
