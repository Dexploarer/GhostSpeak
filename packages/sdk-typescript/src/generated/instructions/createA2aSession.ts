/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import {
  GHOSTSPEAK_MARKETPLACE_ERROR__INSUFFICIENT_ACCOUNTS,
  GHOSTSPEAK_MARKETPLACE_ERROR__INVALID_INSTRUCTION_DATA,
  GHOSTSPEAK_MARKETPLACE_ERROR__MISSING_REQUIRED_ACCOUNT,
  GHOSTSPEAK_MARKETPLACE_ERROR__INVALID_ACCOUNT,
  GHOSTSPEAK_MARKETPLACE_ERROR__INSTRUCTION_PARSING_FAILED,
  isGhostspeakMarketplaceError,
} from '../errors';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CREATE_A2A_SESSION_DISCRIMINATOR = new Uint8Array([
  22, 57, 77, 239, 115, 215, 61, 131,
]);

export function getCreateA2aSessionDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_A2A_SESSION_DISCRIMINATOR
  );
}

export type CreateA2aSessionInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountSession extends string | AccountMeta<string> = string,
  TAccountCreator extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSession extends string
        ? WritableAccount<TAccountSession>
        : TAccountSession,
      TAccountCreator extends string
        ? WritableSignerAccount<TAccountCreator> &
            AccountSignerMeta<TAccountCreator>
        : TAccountCreator,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreateA2aSessionInstructionData = {
  discriminator: ReadonlyUint8Array;
  sessionId: bigint;
  initiator: Address;
  responder: Address;
  sessionType: string;
  metadata: string;
  expiresAt: bigint;
};

export type CreateA2aSessionInstructionDataArgs = {
  sessionId: number | bigint;
  initiator: Address;
  responder: Address;
  sessionType: string;
  metadata: string;
  expiresAt: number | bigint;
};

export function getCreateA2aSessionInstructionDataEncoder(): Encoder<CreateA2aSessionInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['sessionId', getU64Encoder()],
      ['initiator', getAddressEncoder()],
      ['responder', getAddressEncoder()],
      ['sessionType', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['metadata', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['expiresAt', getI64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CREATE_A2A_SESSION_DISCRIMINATOR })
  );
}

export function getCreateA2aSessionInstructionDataDecoder(): Decoder<CreateA2aSessionInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['sessionId', getU64Decoder()],
    ['initiator', getAddressDecoder()],
    ['responder', getAddressDecoder()],
    ['sessionType', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['metadata', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['expiresAt', getI64Decoder()],
  ]);
}

export function getCreateA2aSessionInstructionDataCodec(): Codec<
  CreateA2aSessionInstructionDataArgs,
  CreateA2aSessionInstructionData
> {
  return combineCodec(
    getCreateA2aSessionInstructionDataEncoder(),
    getCreateA2aSessionInstructionDataDecoder()
  );
}

export type CreateA2aSessionAsyncInput<
  TAccountSession extends string = string,
  TAccountCreator extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  session?: Address<TAccountSession>;
  creator: TransactionSigner<TAccountCreator>;
  systemProgram?: Address<TAccountSystemProgram>;
  sessionId: CreateA2aSessionInstructionDataArgs['sessionId'];
  initiator: CreateA2aSessionInstructionDataArgs['initiator'];
  responder: CreateA2aSessionInstructionDataArgs['responder'];
  sessionType: CreateA2aSessionInstructionDataArgs['sessionType'];
  metadata: CreateA2aSessionInstructionDataArgs['metadata'];
  expiresAt: CreateA2aSessionInstructionDataArgs['expiresAt'];
};

export async function getCreateA2aSessionInstructionAsync<
  TAccountSession extends string,
  TAccountCreator extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: CreateA2aSessionAsyncInput<
    TAccountSession,
    TAccountCreator,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateA2aSessionInstruction<
    TProgramAddress,
    TAccountSession,
    TAccountCreator,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    session: { value: input.session ?? null, isWritable: true },
    creator: { value: input.creator ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.session.value) {
    accounts.session.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([97, 50, 97, 95, 115, 101, 115, 115, 105, 111, 110])
        ),
        getAddressEncoder().encode(expectAddress(accounts.creator.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.session),
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateA2aSessionInstructionDataEncoder().encode(
      args as CreateA2aSessionInstructionDataArgs
    ),
  } as CreateA2aSessionInstruction<
    TProgramAddress,
    TAccountSession,
    TAccountCreator,
    TAccountSystemProgram
  >;

  return instruction;
}

export type CreateA2aSessionInput<
  TAccountSession extends string = string,
  TAccountCreator extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  session: Address<TAccountSession>;
  creator: TransactionSigner<TAccountCreator>;
  systemProgram?: Address<TAccountSystemProgram>;
  sessionId: CreateA2aSessionInstructionDataArgs['sessionId'];
  initiator: CreateA2aSessionInstructionDataArgs['initiator'];
  responder: CreateA2aSessionInstructionDataArgs['responder'];
  sessionType: CreateA2aSessionInstructionDataArgs['sessionType'];
  metadata: CreateA2aSessionInstructionDataArgs['metadata'];
  expiresAt: CreateA2aSessionInstructionDataArgs['expiresAt'];
};

export function getCreateA2aSessionInstruction<
  TAccountSession extends string,
  TAccountCreator extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: CreateA2aSessionInput<
    TAccountSession,
    TAccountCreator,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreateA2aSessionInstruction<
  TProgramAddress,
  TAccountSession,
  TAccountCreator,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    session: { value: input.session ?? null, isWritable: true },
    creator: { value: input.creator ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.session),
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateA2aSessionInstructionDataEncoder().encode(
      args as CreateA2aSessionInstructionDataArgs
    ),
  } as CreateA2aSessionInstruction<
    TProgramAddress,
    TAccountSession,
    TAccountCreator,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedCreateA2aSessionInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    session: TAccountMetas[0];
    creator: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
  };
  data: CreateA2aSessionInstructionData;
};

export function parseCreateA2aSessionInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCreateA2aSessionInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    throw new Error('[GHOSTSPEAK_MARKETPLACE_ERROR__INSUFFICIENT_ACCOUNTS] Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      session: getNextAccount(),
      creator: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCreateA2aSessionInstructionDataDecoder().decode(instruction.data),
  };
}
