/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CREATE_ANALYTICS_DASHBOARD_DISCRIMINATOR = new Uint8Array([
  160, 237, 52, 23, 118, 243, 100, 75,
]);

export function getCreateAnalyticsDashboardDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_ANALYTICS_DASHBOARD_DISCRIMINATOR
  );
}

export type CreateAnalyticsDashboardInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountDashboard extends string | IAccountMeta<string> = string,
  TAccountUserRegistry extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountClock extends
    | string
    | IAccountMeta<string> = 'SysvarC1ock11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountDashboard extends string
        ? WritableAccount<TAccountDashboard>
        : TAccountDashboard,
      TAccountUserRegistry extends string
        ? WritableAccount<TAccountUserRegistry>
        : TAccountUserRegistry,
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> &
            IAccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountClock extends string
        ? ReadonlyAccount<TAccountClock>
        : TAccountClock,
      ...TRemainingAccounts,
    ]
  >;

export interface CreateAnalyticsDashboardInstructionData {
  discriminator: ReadonlyUint8Array;
  dashboardId: bigint;
  metrics: string;
}

export interface CreateAnalyticsDashboardInstructionDataArgs {
  dashboardId: number | bigint;
  metrics: string;
}

export function getCreateAnalyticsDashboardInstructionDataEncoder(): Encoder<CreateAnalyticsDashboardInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['dashboardId', getU64Encoder()],
      ['metrics', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: CREATE_ANALYTICS_DASHBOARD_DISCRIMINATOR,
    })
  );
}

export function getCreateAnalyticsDashboardInstructionDataDecoder(): Decoder<CreateAnalyticsDashboardInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['dashboardId', getU64Decoder()],
    ['metrics', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getCreateAnalyticsDashboardInstructionDataCodec(): Codec<
  CreateAnalyticsDashboardInstructionDataArgs,
  CreateAnalyticsDashboardInstructionData
> {
  return combineCodec(
    getCreateAnalyticsDashboardInstructionDataEncoder(),
    getCreateAnalyticsDashboardInstructionDataDecoder()
  );
}

export interface CreateAnalyticsDashboardAsyncInput<
  TAccountDashboard extends string = string,
  TAccountUserRegistry extends string = string,
  TAccountOwner extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountClock extends string = string,
> {
  /** Dashboard account with collision prevention */
  dashboard?: Address<TAccountDashboard>;
  /** User registry for rate limiting and spam prevention */
  userRegistry?: Address<TAccountUserRegistry>;
  /** Enhanced authority verification */
  owner: TransactionSigner<TAccountOwner>;
  /** System program for account creation */
  systemProgram?: Address<TAccountSystemProgram>;
  /** Clock sysvar for timestamp validation */
  clock?: Address<TAccountClock>;
  dashboardId: CreateAnalyticsDashboardInstructionDataArgs['dashboardId'];
  metrics: CreateAnalyticsDashboardInstructionDataArgs['metrics'];
}

export async function getCreateAnalyticsDashboardInstructionAsync<
  TAccountDashboard extends string,
  TAccountUserRegistry extends string,
  TAccountOwner extends string,
  TAccountSystemProgram extends string,
  TAccountClock extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: CreateAnalyticsDashboardAsyncInput<
    TAccountDashboard,
    TAccountUserRegistry,
    TAccountOwner,
    TAccountSystemProgram,
    TAccountClock
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateAnalyticsDashboardInstruction<
    TProgramAddress,
    TAccountDashboard,
    TAccountUserRegistry,
    TAccountOwner,
    TAccountSystemProgram,
    TAccountClock
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    dashboard: { value: input.dashboard ?? null, isWritable: true },
    userRegistry: { value: input.userRegistry ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    clock: { value: input.clock ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.dashboard.value) {
    accounts.dashboard.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([97, 110, 97, 108, 121, 116, 105, 99, 115])
        ),
        getAddressEncoder().encode(expectAddress(accounts.owner.value)),
        getU64Encoder().encode(expectSome(args.dashboardId)),
      ],
    });
  }
  if (!accounts.userRegistry.value) {
    accounts.userRegistry.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            117, 115, 101, 114, 95, 114, 101, 103, 105, 115, 116, 114, 121,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.owner.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.dashboard),
      getAccountMeta(accounts.userRegistry),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.clock),
    ],
    programAddress,
    data: getCreateAnalyticsDashboardInstructionDataEncoder().encode(
      args as CreateAnalyticsDashboardInstructionDataArgs
    ),
  } as CreateAnalyticsDashboardInstruction<
    TProgramAddress,
    TAccountDashboard,
    TAccountUserRegistry,
    TAccountOwner,
    TAccountSystemProgram,
    TAccountClock
  >;

  return instruction;
}

export interface CreateAnalyticsDashboardInput<
  TAccountDashboard extends string = string,
  TAccountUserRegistry extends string = string,
  TAccountOwner extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountClock extends string = string,
> {
  /** Dashboard account with collision prevention */
  dashboard: Address<TAccountDashboard>;
  /** User registry for rate limiting and spam prevention */
  userRegistry: Address<TAccountUserRegistry>;
  /** Enhanced authority verification */
  owner: TransactionSigner<TAccountOwner>;
  /** System program for account creation */
  systemProgram?: Address<TAccountSystemProgram>;
  /** Clock sysvar for timestamp validation */
  clock?: Address<TAccountClock>;
  dashboardId: CreateAnalyticsDashboardInstructionDataArgs['dashboardId'];
  metrics: CreateAnalyticsDashboardInstructionDataArgs['metrics'];
}

export function getCreateAnalyticsDashboardInstruction<
  TAccountDashboard extends string,
  TAccountUserRegistry extends string,
  TAccountOwner extends string,
  TAccountSystemProgram extends string,
  TAccountClock extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: CreateAnalyticsDashboardInput<
    TAccountDashboard,
    TAccountUserRegistry,
    TAccountOwner,
    TAccountSystemProgram,
    TAccountClock
  >,
  config?: { programAddress?: TProgramAddress }
): CreateAnalyticsDashboardInstruction<
  TProgramAddress,
  TAccountDashboard,
  TAccountUserRegistry,
  TAccountOwner,
  TAccountSystemProgram,
  TAccountClock
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    dashboard: { value: input.dashboard ?? null, isWritable: true },
    userRegistry: { value: input.userRegistry ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    clock: { value: input.clock ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.dashboard),
      getAccountMeta(accounts.userRegistry),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.clock),
    ],
    programAddress,
    data: getCreateAnalyticsDashboardInstructionDataEncoder().encode(
      args as CreateAnalyticsDashboardInstructionDataArgs
    ),
  } as CreateAnalyticsDashboardInstruction<
    TProgramAddress,
    TAccountDashboard,
    TAccountUserRegistry,
    TAccountOwner,
    TAccountSystemProgram,
    TAccountClock
  >;

  return instruction;
}

export interface ParsedCreateAnalyticsDashboardInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    /** Dashboard account with collision prevention */
    dashboard: TAccountMetas[0];
    /** User registry for rate limiting and spam prevention */
    userRegistry: TAccountMetas[1];
    /** Enhanced authority verification */
    owner: TAccountMetas[2];
    /** System program for account creation */
    systemProgram: TAccountMetas[3];
    /** Clock sysvar for timestamp validation */
    clock: TAccountMetas[4];
  };
  data: CreateAnalyticsDashboardInstructionData;
}

export function parseCreateAnalyticsDashboardInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCreateAnalyticsDashboardInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    throw new Error('Invalid number of accounts provided');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      dashboard: getNextAccount(),
      userRegistry: getNextAccount(),
      owner: getNextAccount(),
      systemProgram: getNextAccount(),
      clock: getNextAccount(),
    },
    data: getCreateAnalyticsDashboardInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
