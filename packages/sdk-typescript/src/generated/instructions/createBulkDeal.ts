/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getF64Decoder,
  getF64Encoder,
  getI64Decoder,
  getI64Encoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
import {
  getDealTypeDecoder,
  getDealTypeEncoder,
  getVolumeTierDecoder,
  getVolumeTierEncoder,
  type DealType,
  type DealTypeArgs,
  type VolumeTier,
  type VolumeTierArgs,
} from '../types';

export const CREATE_BULK_DEAL_DISCRIMINATOR = new Uint8Array([
  133, 143, 169, 255, 188, 189, 104, 216,
]);

export function getCreateBulkDealDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_BULK_DEAL_DISCRIMINATOR
  );
}

export type CreateBulkDealInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountDeal extends string | IAccountMeta<string> = string,
  TAccountAgent extends string | IAccountMeta<string> = string,
  TAccountUserRegistry extends string | IAccountMeta<string> = string,
  TAccountCustomer extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountClock extends
    | string
    | IAccountMeta<string> = 'SysvarC1ock11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountDeal extends string
        ? WritableAccount<TAccountDeal>
        : TAccountDeal,
      TAccountAgent extends string
        ? ReadonlyAccount<TAccountAgent>
        : TAccountAgent,
      TAccountUserRegistry extends string
        ? WritableAccount<TAccountUserRegistry>
        : TAccountUserRegistry,
      TAccountCustomer extends string
        ? WritableSignerAccount<TAccountCustomer> &
            IAccountSignerMeta<TAccountCustomer>
        : TAccountCustomer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountClock extends string
        ? ReadonlyAccount<TAccountClock>
        : TAccountClock,
      ...TRemainingAccounts,
    ]
  >;

export interface CreateBulkDealInstructionData {
  discriminator: ReadonlyUint8Array;
  dealId: bigint;
  dealType: DealType;
  totalVolume: number;
  totalValue: bigint;
  discountPercentage: number;
  volumeTiers: VolumeTier[];
  slaTerms: string;
  contractDuration: bigint;
  endDate: bigint;
}

export interface CreateBulkDealInstructionDataArgs {
  dealId: number | bigint;
  dealType: DealTypeArgs;
  totalVolume: number;
  totalValue: number | bigint;
  discountPercentage: number;
  volumeTiers: VolumeTierArgs[];
  slaTerms: string;
  contractDuration: number | bigint;
  endDate: number | bigint;
}

export function getCreateBulkDealInstructionDataEncoder(): Encoder<CreateBulkDealInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['dealId', getU64Encoder()],
      ['dealType', getDealTypeEncoder()],
      ['totalVolume', getU32Encoder()],
      ['totalValue', getU64Encoder()],
      ['discountPercentage', getF64Encoder()],
      ['volumeTiers', getArrayEncoder(getVolumeTierEncoder())],
      ['slaTerms', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['contractDuration', getI64Encoder()],
      ['endDate', getI64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CREATE_BULK_DEAL_DISCRIMINATOR })
  );
}

export function getCreateBulkDealInstructionDataDecoder(): Decoder<CreateBulkDealInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['dealId', getU64Decoder()],
    ['dealType', getDealTypeDecoder()],
    ['totalVolume', getU32Decoder()],
    ['totalValue', getU64Decoder()],
    ['discountPercentage', getF64Decoder()],
    ['volumeTiers', getArrayDecoder(getVolumeTierDecoder())],
    ['slaTerms', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['contractDuration', getI64Decoder()],
    ['endDate', getI64Decoder()],
  ]);
}

export function getCreateBulkDealInstructionDataCodec(): Codec<
  CreateBulkDealInstructionDataArgs,
  CreateBulkDealInstructionData
> {
  return combineCodec(
    getCreateBulkDealInstructionDataEncoder(),
    getCreateBulkDealInstructionDataDecoder()
  );
}

export interface CreateBulkDealAsyncInput<
  TAccountDeal extends string = string,
  TAccountAgent extends string = string,
  TAccountUserRegistry extends string = string,
  TAccountCustomer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountClock extends string = string,
> {
  /** Bulk deal account with collision prevention */
  deal: Address<TAccountDeal>;
  /** Agent account with enhanced constraints */
  agent: Address<TAccountAgent>;
  /** User registry for rate limiting and spam prevention */
  userRegistry?: Address<TAccountUserRegistry>;
  /** Enhanced customer verification */
  customer: TransactionSigner<TAccountCustomer>;
  /** System program for account creation */
  systemProgram?: Address<TAccountSystemProgram>;
  /** Clock sysvar for timestamp validation */
  clock?: Address<TAccountClock>;
  dealId: CreateBulkDealInstructionDataArgs['dealId'];
  dealType: CreateBulkDealInstructionDataArgs['dealType'];
  totalVolume: CreateBulkDealInstructionDataArgs['totalVolume'];
  totalValue: CreateBulkDealInstructionDataArgs['totalValue'];
  discountPercentage: CreateBulkDealInstructionDataArgs['discountPercentage'];
  volumeTiers: CreateBulkDealInstructionDataArgs['volumeTiers'];
  slaTerms: CreateBulkDealInstructionDataArgs['slaTerms'];
  contractDuration: CreateBulkDealInstructionDataArgs['contractDuration'];
  endDate: CreateBulkDealInstructionDataArgs['endDate'];
}

export async function getCreateBulkDealInstructionAsync<
  TAccountDeal extends string,
  TAccountAgent extends string,
  TAccountUserRegistry extends string,
  TAccountCustomer extends string,
  TAccountSystemProgram extends string,
  TAccountClock extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: CreateBulkDealAsyncInput<
    TAccountDeal,
    TAccountAgent,
    TAccountUserRegistry,
    TAccountCustomer,
    TAccountSystemProgram,
    TAccountClock
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateBulkDealInstruction<
    TProgramAddress,
    TAccountDeal,
    TAccountAgent,
    TAccountUserRegistry,
    TAccountCustomer,
    TAccountSystemProgram,
    TAccountClock
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    deal: { value: input.deal ?? null, isWritable: true },
    agent: { value: input.agent ?? null, isWritable: false },
    userRegistry: { value: input.userRegistry ?? null, isWritable: true },
    customer: { value: input.customer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    clock: { value: input.clock ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.userRegistry.value) {
    accounts.userRegistry.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            117, 115, 101, 114, 95, 114, 101, 103, 105, 115, 116, 114, 121,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.customer.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.deal),
      getAccountMeta(accounts.agent),
      getAccountMeta(accounts.userRegistry),
      getAccountMeta(accounts.customer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.clock),
    ],
    programAddress,
    data: getCreateBulkDealInstructionDataEncoder().encode(
      args as CreateBulkDealInstructionDataArgs
    ),
  } as CreateBulkDealInstruction<
    TProgramAddress,
    TAccountDeal,
    TAccountAgent,
    TAccountUserRegistry,
    TAccountCustomer,
    TAccountSystemProgram,
    TAccountClock
  >;

  return instruction;
}

export interface CreateBulkDealInput<
  TAccountDeal extends string = string,
  TAccountAgent extends string = string,
  TAccountUserRegistry extends string = string,
  TAccountCustomer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountClock extends string = string,
> {
  /** Bulk deal account with collision prevention */
  deal: Address<TAccountDeal>;
  /** Agent account with enhanced constraints */
  agent: Address<TAccountAgent>;
  /** User registry for rate limiting and spam prevention */
  userRegistry: Address<TAccountUserRegistry>;
  /** Enhanced customer verification */
  customer: TransactionSigner<TAccountCustomer>;
  /** System program for account creation */
  systemProgram?: Address<TAccountSystemProgram>;
  /** Clock sysvar for timestamp validation */
  clock?: Address<TAccountClock>;
  dealId: CreateBulkDealInstructionDataArgs['dealId'];
  dealType: CreateBulkDealInstructionDataArgs['dealType'];
  totalVolume: CreateBulkDealInstructionDataArgs['totalVolume'];
  totalValue: CreateBulkDealInstructionDataArgs['totalValue'];
  discountPercentage: CreateBulkDealInstructionDataArgs['discountPercentage'];
  volumeTiers: CreateBulkDealInstructionDataArgs['volumeTiers'];
  slaTerms: CreateBulkDealInstructionDataArgs['slaTerms'];
  contractDuration: CreateBulkDealInstructionDataArgs['contractDuration'];
  endDate: CreateBulkDealInstructionDataArgs['endDate'];
}

export function getCreateBulkDealInstruction<
  TAccountDeal extends string,
  TAccountAgent extends string,
  TAccountUserRegistry extends string,
  TAccountCustomer extends string,
  TAccountSystemProgram extends string,
  TAccountClock extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: CreateBulkDealInput<
    TAccountDeal,
    TAccountAgent,
    TAccountUserRegistry,
    TAccountCustomer,
    TAccountSystemProgram,
    TAccountClock
  >,
  config?: { programAddress?: TProgramAddress }
): CreateBulkDealInstruction<
  TProgramAddress,
  TAccountDeal,
  TAccountAgent,
  TAccountUserRegistry,
  TAccountCustomer,
  TAccountSystemProgram,
  TAccountClock
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    deal: { value: input.deal ?? null, isWritable: true },
    agent: { value: input.agent ?? null, isWritable: false },
    userRegistry: { value: input.userRegistry ?? null, isWritable: true },
    customer: { value: input.customer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    clock: { value: input.clock ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.deal),
      getAccountMeta(accounts.agent),
      getAccountMeta(accounts.userRegistry),
      getAccountMeta(accounts.customer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.clock),
    ],
    programAddress,
    data: getCreateBulkDealInstructionDataEncoder().encode(
      args as CreateBulkDealInstructionDataArgs
    ),
  } as CreateBulkDealInstruction<
    TProgramAddress,
    TAccountDeal,
    TAccountAgent,
    TAccountUserRegistry,
    TAccountCustomer,
    TAccountSystemProgram,
    TAccountClock
  >;

  return instruction;
}

export interface ParsedCreateBulkDealInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    /** Bulk deal account with collision prevention */
    deal: TAccountMetas[0];
    /** Agent account with enhanced constraints */
    agent: TAccountMetas[1];
    /** User registry for rate limiting and spam prevention */
    userRegistry: TAccountMetas[2];
    /** Enhanced customer verification */
    customer: TAccountMetas[3];
    /** System program for account creation */
    systemProgram: TAccountMetas[4];
    /** Clock sysvar for timestamp validation */
    clock: TAccountMetas[5];
  };
  data: CreateBulkDealInstructionData;
}

export function parseCreateBulkDealInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCreateBulkDealInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      deal: getNextAccount(),
      agent: getNextAccount(),
      userRegistry: getNextAccount(),
      customer: getNextAccount(),
      systemProgram: getNextAccount(),
      clock: getNextAccount(),
    },
    data: getCreateBulkDealInstructionDataDecoder().decode(instruction.data),
  };
}
