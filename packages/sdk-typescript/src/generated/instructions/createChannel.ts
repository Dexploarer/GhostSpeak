import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  transformEncoder,
  type Codec,
  type Decoder,
  type Encoder,
  type ReadonlyUint8Array
} from '@solana/codecs-core';
import {
  getU64Decoder,
  getU64Encoder
} from '@solana/codecs-numbers';
import {
  getArrayDecoder,
  getArrayEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder
} from '@solana/codecs-data-structures';
import {
  getAddressDecoder,
  getAddressEncoder,
  type Address
} from '@solana/addresses';
import {
  type IInstruction,
  type IInstructionWithData
} from '@solana/instructions';
import { AccountRole } from '@solana/instructions';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getChannelTypeDecoder,
  getChannelTypeEncoder,
  type ChannelType,
  type ChannelTypeArgs,
} from '../types';
/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

export const CREATE_CHANNEL_DISCRIMINATOR = new Uint8Array([
  37, 105, 253, 99, 87, 46, 223, 20,
]);

export function getCreateChannelDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_CHANNEL_DISCRIMINATOR
  );
}

export type CreateChannelInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly any[] = readonly any[],
> = {
  programAddress: Address<TProgram>;
  data: Uint8Array;
  accounts: TAccountMetas;
};

export type CreateChannelInstructionData = {
  discriminator: ReadonlyUint8Array;
  channelId: bigint;
  participants: Array<Address>;
  channelType: ChannelType;
  isPrivate: boolean;
};

export type CreateChannelInstructionDataArgs = {
  channelId: number | bigint;
  participants: Array<Address>;
  channelType: ChannelTypeArgs;
  isPrivate: boolean;
};

export function getCreateChannelInstructionDataEncoder(): Encoder<CreateChannelInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['channelId', getU64Encoder()],
      ['participants', getArrayEncoder(getAddressEncoder())],
      ['channelType', getChannelTypeEncoder()],
      ['isPrivate', getBooleanEncoder()],
    ]),
    (value) => ({ ...value, discriminator: CREATE_CHANNEL_DISCRIMINATOR })
  );
}

export function getCreateChannelInstructionDataDecoder(): Decoder<CreateChannelInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['channelId', getU64Decoder()],
    ['participants', getArrayDecoder(getAddressDecoder())],
    ['channelType', getChannelTypeDecoder()],
    ['isPrivate', getBooleanDecoder()],
  ]);
}

export function getCreateChannelInstructionDataCodec(): Codec<
  CreateChannelInstructionDataArgs,
  CreateChannelInstructionData
> {
  return combineCodec(
    getCreateChannelInstructionDataEncoder(),
    getCreateChannelInstructionDataDecoder()
  );
}

export type CreateChannelInput<
  TAccountChannel extends string = string,
  TAccountCreator extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  channel: Address<TAccountChannel>;
  creator: any;
  systemProgram?: Address<TAccountSystemProgram>;
  channelId: CreateChannelInstructionDataArgs['channelId'];
  participants: CreateChannelInstructionDataArgs['participants'];
  channelType: CreateChannelInstructionDataArgs['channelType'];
  isPrivate: CreateChannelInstructionDataArgs['isPrivate'];
};

export function getCreateChannelInstruction<
  TAccountChannel extends string,
  TAccountCreator extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: CreateChannelInput<
    TAccountChannel,
    TAccountCreator,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreateChannelInstruction<TProgramAddress, any[]> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    channel: { value: input.channel ?? null, isWritable: true },
    creator: { value: input.creator ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.channel),
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateChannelInstructionDataEncoder().encode(
      args as CreateChannelInstructionDataArgs
    ),
  } as CreateChannelInstruction<TProgramAddress, any[]>;

  return instruction;
}

export type ParsedCreateChannelInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly { address: Address; role: AccountRole }[] = readonly { address: Address; role: AccountRole }[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    channel: TAccountMetas[0];
    creator: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
  };
  data: CreateChannelInstructionData;
};

export function parseCreateChannelInstruction<
  TProgram extends string,
  TAccountMetas extends readonly { address: Address; role: AccountRole }[],
>(
  instruction: { programAddress: TProgram } &
    { accounts: TAccountMetas } &
    { data: Uint8Array }
): ParsedCreateChannelInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress as Address<TProgram>,
    accounts: {
      channel: getNextAccount(),
      creator: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCreateChannelInstructionDataDecoder().decode(instruction.data),
  };
}
