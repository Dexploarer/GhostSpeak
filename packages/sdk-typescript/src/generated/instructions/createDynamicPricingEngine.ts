/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
import {
  getDynamicPricingConfigDecoder,
  getDynamicPricingConfigEncoder,
  type DynamicPricingConfig,
  type DynamicPricingConfigArgs,
} from '../types';

export const CREATE_DYNAMIC_PRICING_ENGINE_DISCRIMINATOR = new Uint8Array([
  251, 20, 25, 4, 140, 172, 5, 167,
]);

export function getCreateDynamicPricingEngineDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_DYNAMIC_PRICING_ENGINE_DISCRIMINATOR
  );
}

export type CreateDynamicPricingEngineInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountEngine extends string | IAccountMeta<string> = string,
  TAccountAgent extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountEngine extends string
        ? WritableAccount<TAccountEngine>
        : TAccountEngine,
      TAccountAgent extends string
        ? ReadonlyAccount<TAccountAgent>
        : TAccountAgent,
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> &
            IAccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface CreateDynamicPricingEngineInstructionData {
  discriminator: ReadonlyUint8Array;
  config: DynamicPricingConfig;
}

export interface CreateDynamicPricingEngineInstructionDataArgs {
  config: DynamicPricingConfigArgs;
}

export function getCreateDynamicPricingEngineInstructionDataEncoder(): Encoder<CreateDynamicPricingEngineInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['config', getDynamicPricingConfigEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: CREATE_DYNAMIC_PRICING_ENGINE_DISCRIMINATOR,
    })
  );
}

export function getCreateDynamicPricingEngineInstructionDataDecoder(): Decoder<CreateDynamicPricingEngineInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['config', getDynamicPricingConfigDecoder()],
  ]);
}

export function getCreateDynamicPricingEngineInstructionDataCodec(): Codec<
  CreateDynamicPricingEngineInstructionDataArgs,
  CreateDynamicPricingEngineInstructionData
> {
  return combineCodec(
    getCreateDynamicPricingEngineInstructionDataEncoder(),
    getCreateDynamicPricingEngineInstructionDataDecoder()
  );
}

export interface CreateDynamicPricingEngineAsyncInput<
  TAccountEngine extends string = string,
  TAccountAgent extends string = string,
  TAccountOwner extends string = string,
  TAccountSystemProgram extends string = string,
> {
  engine?: Address<TAccountEngine>;
  agent: Address<TAccountAgent>;
  owner: TransactionSigner<TAccountOwner>;
  systemProgram?: Address<TAccountSystemProgram>;
  config: CreateDynamicPricingEngineInstructionDataArgs['config'];
}

export async function getCreateDynamicPricingEngineInstructionAsync<
  TAccountEngine extends string,
  TAccountAgent extends string,
  TAccountOwner extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: CreateDynamicPricingEngineAsyncInput<
    TAccountEngine,
    TAccountAgent,
    TAccountOwner,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateDynamicPricingEngineInstruction<
    TProgramAddress,
    TAccountEngine,
    TAccountAgent,
    TAccountOwner,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    engine: { value: input.engine ?? null, isWritable: true },
    agent: { value: input.agent ?? null, isWritable: false },
    owner: { value: input.owner ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.engine.value) {
    accounts.engine.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            100, 121, 110, 97, 109, 105, 99, 95, 112, 114, 105, 99, 105, 110,
            103,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.agent.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.engine),
      getAccountMeta(accounts.agent),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateDynamicPricingEngineInstructionDataEncoder().encode(
      args as CreateDynamicPricingEngineInstructionDataArgs
    ),
  } as CreateDynamicPricingEngineInstruction<
    TProgramAddress,
    TAccountEngine,
    TAccountAgent,
    TAccountOwner,
    TAccountSystemProgram
  >;

  return instruction;
}

export interface CreateDynamicPricingEngineInput<
  TAccountEngine extends string = string,
  TAccountAgent extends string = string,
  TAccountOwner extends string = string,
  TAccountSystemProgram extends string = string,
> {
  engine: Address<TAccountEngine>;
  agent: Address<TAccountAgent>;
  owner: TransactionSigner<TAccountOwner>;
  systemProgram?: Address<TAccountSystemProgram>;
  config: CreateDynamicPricingEngineInstructionDataArgs['config'];
}

export function getCreateDynamicPricingEngineInstruction<
  TAccountEngine extends string,
  TAccountAgent extends string,
  TAccountOwner extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: CreateDynamicPricingEngineInput<
    TAccountEngine,
    TAccountAgent,
    TAccountOwner,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreateDynamicPricingEngineInstruction<
  TProgramAddress,
  TAccountEngine,
  TAccountAgent,
  TAccountOwner,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    engine: { value: input.engine ?? null, isWritable: true },
    agent: { value: input.agent ?? null, isWritable: false },
    owner: { value: input.owner ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.engine),
      getAccountMeta(accounts.agent),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateDynamicPricingEngineInstructionDataEncoder().encode(
      args as CreateDynamicPricingEngineInstructionDataArgs
    ),
  } as CreateDynamicPricingEngineInstruction<
    TProgramAddress,
    TAccountEngine,
    TAccountAgent,
    TAccountOwner,
    TAccountSystemProgram
  >;

  return instruction;
}

export interface ParsedCreateDynamicPricingEngineInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    engine: TAccountMetas[0];
    agent: TAccountMetas[1];
    owner: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
  };
  data: CreateDynamicPricingEngineInstructionData;
}

export function parseCreateDynamicPricingEngineInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCreateDynamicPricingEngineInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      engine: getNextAccount(),
      agent: getNextAccount(),
      owner: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCreateDynamicPricingEngineInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
