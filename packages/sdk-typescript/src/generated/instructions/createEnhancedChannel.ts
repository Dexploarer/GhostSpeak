/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import {
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
import {
  getChannelMetadataDecoder,
  getChannelMetadataEncoder,
  getChannelTypeDecoder,
  getChannelTypeEncoder,
  type ChannelMetadata,
  type ChannelMetadataArgs,
  type ChannelType,
  type ChannelTypeArgs,
} from '../types';

export const CREATE_ENHANCED_CHANNEL_DISCRIMINATOR = new Uint8Array([
  28, 188, 236, 214, 244, 184, 198, 219,
]);

export function getCreateEnhancedChannelDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_ENHANCED_CHANNEL_DISCRIMINATOR
  );
}

export type CreateEnhancedChannelInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountChannel extends string | AccountMeta<string> = string,
  TAccountReentrancyGuard extends string | AccountMeta<string> = string,
  TAccountCreator extends string | AccountMeta<string> = string,
  TAccountCreatorAgent extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountChannel extends string
        ? WritableAccount<TAccountChannel>
        : TAccountChannel,
      TAccountReentrancyGuard extends string
        ? WritableAccount<TAccountReentrancyGuard>
        : TAccountReentrancyGuard,
      TAccountCreator extends string
        ? WritableSignerAccount<TAccountCreator> &
            AccountSignerMeta<TAccountCreator>
        : TAccountCreator,
      TAccountCreatorAgent extends string
        ? ReadonlyAccount<TAccountCreatorAgent>
        : TAccountCreatorAgent,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreateEnhancedChannelInstructionData = {
  discriminator: ReadonlyUint8Array;
  channelId: string;
  participants: Array<Address>;
  channelType: ChannelType;
  metadata: ChannelMetadata;
};

export type CreateEnhancedChannelInstructionDataArgs = {
  channelId: string;
  participants: Array<Address>;
  channelType: ChannelTypeArgs;
  metadata: ChannelMetadataArgs;
};

export function getCreateEnhancedChannelInstructionDataEncoder(): Encoder<CreateEnhancedChannelInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['channelId', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['participants', getArrayEncoder(getAddressEncoder())],
      ['channelType', getChannelTypeEncoder()],
      ['metadata', getChannelMetadataEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: CREATE_ENHANCED_CHANNEL_DISCRIMINATOR,
    })
  );
}

export function getCreateEnhancedChannelInstructionDataDecoder(): Decoder<CreateEnhancedChannelInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['channelId', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['participants', getArrayDecoder(getAddressDecoder())],
    ['channelType', getChannelTypeDecoder()],
    ['metadata', getChannelMetadataDecoder()],
  ]);
}

export function getCreateEnhancedChannelInstructionDataCodec(): Codec<
  CreateEnhancedChannelInstructionDataArgs,
  CreateEnhancedChannelInstructionData
> {
  return combineCodec(
    getCreateEnhancedChannelInstructionDataEncoder(),
    getCreateEnhancedChannelInstructionDataDecoder()
  );
}

export type CreateEnhancedChannelAsyncInput<
  TAccountChannel extends string = string,
  TAccountReentrancyGuard extends string = string,
  TAccountCreator extends string = string,
  TAccountCreatorAgent extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  channel?: Address<TAccountChannel>;
  reentrancyGuard?: Address<TAccountReentrancyGuard>;
  creator: TransactionSigner<TAccountCreator>;
  creatorAgent: Address<TAccountCreatorAgent>;
  systemProgram?: Address<TAccountSystemProgram>;
  channelId: CreateEnhancedChannelInstructionDataArgs['channelId'];
  participants: CreateEnhancedChannelInstructionDataArgs['participants'];
  channelType: CreateEnhancedChannelInstructionDataArgs['channelType'];
  metadata: CreateEnhancedChannelInstructionDataArgs['metadata'];
};

export async function getCreateEnhancedChannelInstructionAsync<
  TAccountChannel extends string,
  TAccountReentrancyGuard extends string,
  TAccountCreator extends string,
  TAccountCreatorAgent extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: CreateEnhancedChannelAsyncInput<
    TAccountChannel,
    TAccountReentrancyGuard,
    TAccountCreator,
    TAccountCreatorAgent,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateEnhancedChannelInstruction<
    TProgramAddress,
    TAccountChannel,
    TAccountReentrancyGuard,
    TAccountCreator,
    TAccountCreatorAgent,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    channel: { value: input.channel ?? null, isWritable: true },
    reentrancyGuard: { value: input.reentrancyGuard ?? null, isWritable: true },
    creator: { value: input.creator ?? null, isWritable: true },
    creatorAgent: { value: input.creatorAgent ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.channel.value) {
    accounts.channel.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([99, 104, 97, 110, 110, 101, 108])
        ),
        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()).encode(
          expectSome(args.channelId)
        ),
      ],
    });
  }
  if (!accounts.reentrancyGuard.value) {
    accounts.reentrancyGuard.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            114, 101, 101, 110, 116, 114, 97, 110, 99, 121, 95, 103, 117, 97,
            114, 100,
          ])
        ),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.channel),
      getAccountMeta(accounts.reentrancyGuard),
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.creatorAgent),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateEnhancedChannelInstructionDataEncoder().encode(
      args as CreateEnhancedChannelInstructionDataArgs
    ),
  } as CreateEnhancedChannelInstruction<
    TProgramAddress,
    TAccountChannel,
    TAccountReentrancyGuard,
    TAccountCreator,
    TAccountCreatorAgent,
    TAccountSystemProgram
  >;

  return instruction;
}

export type CreateEnhancedChannelInput<
  TAccountChannel extends string = string,
  TAccountReentrancyGuard extends string = string,
  TAccountCreator extends string = string,
  TAccountCreatorAgent extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  channel: Address<TAccountChannel>;
  reentrancyGuard: Address<TAccountReentrancyGuard>;
  creator: TransactionSigner<TAccountCreator>;
  creatorAgent: Address<TAccountCreatorAgent>;
  systemProgram?: Address<TAccountSystemProgram>;
  channelId: CreateEnhancedChannelInstructionDataArgs['channelId'];
  participants: CreateEnhancedChannelInstructionDataArgs['participants'];
  channelType: CreateEnhancedChannelInstructionDataArgs['channelType'];
  metadata: CreateEnhancedChannelInstructionDataArgs['metadata'];
};

export function getCreateEnhancedChannelInstruction<
  TAccountChannel extends string,
  TAccountReentrancyGuard extends string,
  TAccountCreator extends string,
  TAccountCreatorAgent extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: CreateEnhancedChannelInput<
    TAccountChannel,
    TAccountReentrancyGuard,
    TAccountCreator,
    TAccountCreatorAgent,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreateEnhancedChannelInstruction<
  TProgramAddress,
  TAccountChannel,
  TAccountReentrancyGuard,
  TAccountCreator,
  TAccountCreatorAgent,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    channel: { value: input.channel ?? null, isWritable: true },
    reentrancyGuard: { value: input.reentrancyGuard ?? null, isWritable: true },
    creator: { value: input.creator ?? null, isWritable: true },
    creatorAgent: { value: input.creatorAgent ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.channel),
      getAccountMeta(accounts.reentrancyGuard),
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.creatorAgent),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateEnhancedChannelInstructionDataEncoder().encode(
      args as CreateEnhancedChannelInstructionDataArgs
    ),
  } as CreateEnhancedChannelInstruction<
    TProgramAddress,
    TAccountChannel,
    TAccountReentrancyGuard,
    TAccountCreator,
    TAccountCreatorAgent,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedCreateEnhancedChannelInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    channel: TAccountMetas[0];
    reentrancyGuard: TAccountMetas[1];
    creator: TAccountMetas[2];
    creatorAgent: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
  };
  data: CreateEnhancedChannelInstructionData;
};

export function parseCreateEnhancedChannelInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCreateEnhancedChannelInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      channel: getNextAccount(),
      reentrancyGuard: getNextAccount(),
      creator: getNextAccount(),
      creatorAgent: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCreateEnhancedChannelInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
