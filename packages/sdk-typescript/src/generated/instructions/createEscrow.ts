/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getOptionDecoder,
  getOptionEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import {
  GHOSTSPEAK_MARKETPLACE_ERROR__INSUFFICIENT_ACCOUNTS,
  GHOSTSPEAK_MARKETPLACE_ERROR__INVALID_INSTRUCTION_DATA,
  GHOSTSPEAK_MARKETPLACE_ERROR__MISSING_REQUIRED_ACCOUNT,
  GHOSTSPEAK_MARKETPLACE_ERROR__INVALID_ACCOUNT,
  GHOSTSPEAK_MARKETPLACE_ERROR__INSTRUCTION_PARSING_FAILED,
  isGhostspeakMarketplaceError,
} from '../errors';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CREATE_ESCROW_DISCRIMINATOR = new Uint8Array([
  253, 215, 165, 116, 36, 108, 68, 80,
]);

export function getCreateEscrowDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_ESCROW_DISCRIMINATOR
  );
}

export type CreateEscrowInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountEscrow extends string | AccountMeta<string> = string,
  TAccountReentrancyGuard extends string | AccountMeta<string> = string,
  TAccountClient extends string | AccountMeta<string> = string,
  TAccountAgent extends string | AccountMeta<string> = string,
  TAccountClientTokenAccount extends string | AccountMeta<string> = string,
  TAccountEscrowTokenAccount extends string | AccountMeta<string> = string,
  TAccountPaymentToken extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb',
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountEscrow extends string
        ? WritableAccount<TAccountEscrow>
        : TAccountEscrow,
      TAccountReentrancyGuard extends string
        ? WritableAccount<TAccountReentrancyGuard>
        : TAccountReentrancyGuard,
      TAccountClient extends string
        ? WritableSignerAccount<TAccountClient> &
            AccountSignerMeta<TAccountClient>
        : TAccountClient,
      TAccountAgent extends string
        ? ReadonlyAccount<TAccountAgent>
        : TAccountAgent,
      TAccountClientTokenAccount extends string
        ? WritableAccount<TAccountClientTokenAccount>
        : TAccountClientTokenAccount,
      TAccountEscrowTokenAccount extends string
        ? WritableAccount<TAccountEscrowTokenAccount>
        : TAccountEscrowTokenAccount,
      TAccountPaymentToken extends string
        ? ReadonlyAccount<TAccountPaymentToken>
        : TAccountPaymentToken,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreateEscrowInstructionData = {
  discriminator: ReadonlyUint8Array;
  taskId: string;
  amount: bigint;
  expiresAt: bigint;
  transferHook: Option<Address>;
  isConfidential: boolean;
};

export type CreateEscrowInstructionDataArgs = {
  taskId: string;
  amount: number | bigint;
  expiresAt: number | bigint;
  transferHook: OptionOrNullable<Address>;
  isConfidential: boolean;
};

export function getCreateEscrowInstructionDataEncoder(): Encoder<CreateEscrowInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['taskId', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['amount', getU64Encoder()],
      ['expiresAt', getI64Encoder()],
      ['transferHook', getOptionEncoder(getAddressEncoder())],
      ['isConfidential', getBooleanEncoder()],
    ]),
    (value) => ({ ...value, discriminator: CREATE_ESCROW_DISCRIMINATOR })
  );
}

export function getCreateEscrowInstructionDataDecoder(): Decoder<CreateEscrowInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['taskId', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['amount', getU64Decoder()],
    ['expiresAt', getI64Decoder()],
    ['transferHook', getOptionDecoder(getAddressDecoder())],
    ['isConfidential', getBooleanDecoder()],
  ]);
}

export function getCreateEscrowInstructionDataCodec(): Codec<
  CreateEscrowInstructionDataArgs,
  CreateEscrowInstructionData
> {
  return combineCodec(
    getCreateEscrowInstructionDataEncoder(),
    getCreateEscrowInstructionDataDecoder()
  );
}

export type CreateEscrowAsyncInput<
  TAccountEscrow extends string = string,
  TAccountReentrancyGuard extends string = string,
  TAccountClient extends string = string,
  TAccountAgent extends string = string,
  TAccountClientTokenAccount extends string = string,
  TAccountEscrowTokenAccount extends string = string,
  TAccountPaymentToken extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  escrow?: Address<TAccountEscrow>;
  reentrancyGuard?: Address<TAccountReentrancyGuard>;
  client: TransactionSigner<TAccountClient>;
  agent: Address<TAccountAgent>;
  clientTokenAccount?: Address<TAccountClientTokenAccount>;
  escrowTokenAccount?: Address<TAccountEscrowTokenAccount>;
  paymentToken: Address<TAccountPaymentToken>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  taskId: CreateEscrowInstructionDataArgs['taskId'];
  amount: CreateEscrowInstructionDataArgs['amount'];
  expiresAt: CreateEscrowInstructionDataArgs['expiresAt'];
  transferHook: CreateEscrowInstructionDataArgs['transferHook'];
  isConfidential: CreateEscrowInstructionDataArgs['isConfidential'];
};

export async function getCreateEscrowInstructionAsync<
  TAccountEscrow extends string,
  TAccountReentrancyGuard extends string,
  TAccountClient extends string,
  TAccountAgent extends string,
  TAccountClientTokenAccount extends string,
  TAccountEscrowTokenAccount extends string,
  TAccountPaymentToken extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: CreateEscrowAsyncInput<
    TAccountEscrow,
    TAccountReentrancyGuard,
    TAccountClient,
    TAccountAgent,
    TAccountClientTokenAccount,
    TAccountEscrowTokenAccount,
    TAccountPaymentToken,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateEscrowInstruction<
    TProgramAddress,
    TAccountEscrow,
    TAccountReentrancyGuard,
    TAccountClient,
    TAccountAgent,
    TAccountClientTokenAccount,
    TAccountEscrowTokenAccount,
    TAccountPaymentToken,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    escrow: { value: input.escrow ?? null, isWritable: true },
    reentrancyGuard: { value: input.reentrancyGuard ?? null, isWritable: true },
    client: { value: input.client ?? null, isWritable: true },
    agent: { value: input.agent ?? null, isWritable: false },
    clientTokenAccount: {
      value: input.clientTokenAccount ?? null,
      isWritable: true,
    },
    escrowTokenAccount: {
      value: input.escrowTokenAccount ?? null,
      isWritable: true,
    },
    paymentToken: { value: input.paymentToken ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.escrow.value) {
    accounts.escrow.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([101, 115, 99, 114, 111, 119])),
        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()).encode(
          expectSome(args.taskId)
        ),
      ],
    });
  }
  if (!accounts.reentrancyGuard.value) {
    accounts.reentrancyGuard.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            114, 101, 101, 110, 116, 114, 97, 110, 99, 121, 95, 103, 117, 97,
            114, 100,
          ])
        ),
      ],
    });
  }
  if (!accounts.clientTokenAccount.value) {
    accounts.clientTokenAccount.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.client.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
            121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
            126, 255, 0, 169,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.paymentToken.value)),
      ],
    });
  }
  if (!accounts.escrowTokenAccount.value) {
    accounts.escrowTokenAccount.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.escrow.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
            121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
            126, 255, 0, 169,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.paymentToken.value)),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.escrow),
      getAccountMeta(accounts.reentrancyGuard),
      getAccountMeta(accounts.client),
      getAccountMeta(accounts.agent),
      getAccountMeta(accounts.clientTokenAccount),
      getAccountMeta(accounts.escrowTokenAccount),
      getAccountMeta(accounts.paymentToken),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateEscrowInstructionDataEncoder().encode(
      args as CreateEscrowInstructionDataArgs
    ),
  } as CreateEscrowInstruction<
    TProgramAddress,
    TAccountEscrow,
    TAccountReentrancyGuard,
    TAccountClient,
    TAccountAgent,
    TAccountClientTokenAccount,
    TAccountEscrowTokenAccount,
    TAccountPaymentToken,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type CreateEscrowInput<
  TAccountEscrow extends string = string,
  TAccountReentrancyGuard extends string = string,
  TAccountClient extends string = string,
  TAccountAgent extends string = string,
  TAccountClientTokenAccount extends string = string,
  TAccountEscrowTokenAccount extends string = string,
  TAccountPaymentToken extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  escrow: Address<TAccountEscrow>;
  reentrancyGuard: Address<TAccountReentrancyGuard>;
  client: TransactionSigner<TAccountClient>;
  agent: Address<TAccountAgent>;
  clientTokenAccount: Address<TAccountClientTokenAccount>;
  escrowTokenAccount: Address<TAccountEscrowTokenAccount>;
  paymentToken: Address<TAccountPaymentToken>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  taskId: CreateEscrowInstructionDataArgs['taskId'];
  amount: CreateEscrowInstructionDataArgs['amount'];
  expiresAt: CreateEscrowInstructionDataArgs['expiresAt'];
  transferHook: CreateEscrowInstructionDataArgs['transferHook'];
  isConfidential: CreateEscrowInstructionDataArgs['isConfidential'];
};

export function getCreateEscrowInstruction<
  TAccountEscrow extends string,
  TAccountReentrancyGuard extends string,
  TAccountClient extends string,
  TAccountAgent extends string,
  TAccountClientTokenAccount extends string,
  TAccountEscrowTokenAccount extends string,
  TAccountPaymentToken extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: CreateEscrowInput<
    TAccountEscrow,
    TAccountReentrancyGuard,
    TAccountClient,
    TAccountAgent,
    TAccountClientTokenAccount,
    TAccountEscrowTokenAccount,
    TAccountPaymentToken,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreateEscrowInstruction<
  TProgramAddress,
  TAccountEscrow,
  TAccountReentrancyGuard,
  TAccountClient,
  TAccountAgent,
  TAccountClientTokenAccount,
  TAccountEscrowTokenAccount,
  TAccountPaymentToken,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    escrow: { value: input.escrow ?? null, isWritable: true },
    reentrancyGuard: { value: input.reentrancyGuard ?? null, isWritable: true },
    client: { value: input.client ?? null, isWritable: true },
    agent: { value: input.agent ?? null, isWritable: false },
    clientTokenAccount: {
      value: input.clientTokenAccount ?? null,
      isWritable: true,
    },
    escrowTokenAccount: {
      value: input.escrowTokenAccount ?? null,
      isWritable: true,
    },
    paymentToken: { value: input.paymentToken ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.escrow),
      getAccountMeta(accounts.reentrancyGuard),
      getAccountMeta(accounts.client),
      getAccountMeta(accounts.agent),
      getAccountMeta(accounts.clientTokenAccount),
      getAccountMeta(accounts.escrowTokenAccount),
      getAccountMeta(accounts.paymentToken),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateEscrowInstructionDataEncoder().encode(
      args as CreateEscrowInstructionDataArgs
    ),
  } as CreateEscrowInstruction<
    TProgramAddress,
    TAccountEscrow,
    TAccountReentrancyGuard,
    TAccountClient,
    TAccountAgent,
    TAccountClientTokenAccount,
    TAccountEscrowTokenAccount,
    TAccountPaymentToken,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedCreateEscrowInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    escrow: TAccountMetas[0];
    reentrancyGuard: TAccountMetas[1];
    client: TAccountMetas[2];
    agent: TAccountMetas[3];
    clientTokenAccount: TAccountMetas[4];
    escrowTokenAccount: TAccountMetas[5];
    paymentToken: TAccountMetas[6];
    tokenProgram: TAccountMetas[7];
    associatedTokenProgram: TAccountMetas[8];
    systemProgram: TAccountMetas[9];
  };
  data: CreateEscrowInstructionData;
};

export function parseCreateEscrowInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCreateEscrowInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    throw new Error('[GHOSTSPEAK_MARKETPLACE_ERROR__INSUFFICIENT_ACCOUNTS] Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      escrow: getNextAccount(),
      reentrancyGuard: getNextAccount(),
      client: getNextAccount(),
      agent: getNextAccount(),
      clientTokenAccount: getNextAccount(),
      escrowTokenAccount: getNextAccount(),
      paymentToken: getNextAccount(),
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCreateEscrowInstructionDataDecoder().decode(instruction.data),
  };
}
