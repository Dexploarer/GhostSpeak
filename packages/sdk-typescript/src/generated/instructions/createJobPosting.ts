/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CREATE_JOB_POSTING_DISCRIMINATOR = new Uint8Array([
  71, 93, 23, 166, 103, 210, 218, 105,
]);

export function getCreateJobPostingDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_JOB_POSTING_DISCRIMINATOR
  );
}

export type CreateJobPostingInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountJobPosting extends string | IAccountMeta<string> = string,
  TAccountEmployer extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountJobPosting extends string
        ? WritableAccount<TAccountJobPosting>
        : TAccountJobPosting,
      TAccountEmployer extends string
        ? WritableSignerAccount<TAccountEmployer> &
            IAccountSignerMeta<TAccountEmployer>
        : TAccountEmployer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreateJobPostingInstructionData = {
  discriminator: ReadonlyUint8Array;
  title: string;
  description: string;
  requirements: Array<string>;
  budget: bigint;
  deadline: bigint;
  skillsNeeded: Array<string>;
  budgetMin: bigint;
  budgetMax: bigint;
  paymentToken: Address;
  jobType: string;
  experienceLevel: string;
};

export type CreateJobPostingInstructionDataArgs = {
  title: string;
  description: string;
  requirements: Array<string>;
  budget: number | bigint;
  deadline: number | bigint;
  skillsNeeded: Array<string>;
  budgetMin: number | bigint;
  budgetMax: number | bigint;
  paymentToken: Address;
  jobType: string;
  experienceLevel: string;
};

export function getCreateJobPostingInstructionDataEncoder(): Encoder<CreateJobPostingInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['title', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['description', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      [
        'requirements',
        getArrayEncoder(
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())
        ),
      ],
      ['budget', getU64Encoder()],
      ['deadline', getI64Encoder()],
      [
        'skillsNeeded',
        getArrayEncoder(
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())
        ),
      ],
      ['budgetMin', getU64Encoder()],
      ['budgetMax', getU64Encoder()],
      ['paymentToken', getAddressEncoder()],
      ['jobType', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      [
        'experienceLevel',
        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
      ],
    ]),
    (value) => ({ ...value, discriminator: CREATE_JOB_POSTING_DISCRIMINATOR })
  );
}

export function getCreateJobPostingInstructionDataDecoder(): Decoder<CreateJobPostingInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['title', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['description', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    [
      'requirements',
      getArrayDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
    ['budget', getU64Decoder()],
    ['deadline', getI64Decoder()],
    [
      'skillsNeeded',
      getArrayDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
    ['budgetMin', getU64Decoder()],
    ['budgetMax', getU64Decoder()],
    ['paymentToken', getAddressDecoder()],
    ['jobType', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    [
      'experienceLevel',
      addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder()),
    ],
  ]);
}

export function getCreateJobPostingInstructionDataCodec(): Codec<
  CreateJobPostingInstructionDataArgs,
  CreateJobPostingInstructionData
> {
  return combineCodec(
    getCreateJobPostingInstructionDataEncoder(),
    getCreateJobPostingInstructionDataDecoder()
  );
}

export type CreateJobPostingAsyncInput<
  TAccountJobPosting extends string = string,
  TAccountEmployer extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  jobPosting?: Address<TAccountJobPosting>;
  employer: TransactionSigner<TAccountEmployer>;
  systemProgram?: Address<TAccountSystemProgram>;
  title: CreateJobPostingInstructionDataArgs['title'];
  description: CreateJobPostingInstructionDataArgs['description'];
  requirements: CreateJobPostingInstructionDataArgs['requirements'];
  budget: CreateJobPostingInstructionDataArgs['budget'];
  deadline: CreateJobPostingInstructionDataArgs['deadline'];
  skillsNeeded: CreateJobPostingInstructionDataArgs['skillsNeeded'];
  budgetMin: CreateJobPostingInstructionDataArgs['budgetMin'];
  budgetMax: CreateJobPostingInstructionDataArgs['budgetMax'];
  paymentToken: CreateJobPostingInstructionDataArgs['paymentToken'];
  jobType: CreateJobPostingInstructionDataArgs['jobType'];
  experienceLevel: CreateJobPostingInstructionDataArgs['experienceLevel'];
};

export async function getCreateJobPostingInstructionAsync<
  TAccountJobPosting extends string,
  TAccountEmployer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: CreateJobPostingAsyncInput<
    TAccountJobPosting,
    TAccountEmployer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateJobPostingInstruction<
    TProgramAddress,
    TAccountJobPosting,
    TAccountEmployer,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    jobPosting: { value: input.jobPosting ?? null, isWritable: true },
    employer: { value: input.employer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.jobPosting.value) {
    accounts.jobPosting.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([106, 111, 98, 95, 112, 111, 115, 116, 105, 110, 103])
        ),
        getAddressEncoder().encode(expectAddress(accounts.employer.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.jobPosting),
      getAccountMeta(accounts.employer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateJobPostingInstructionDataEncoder().encode(
      args as CreateJobPostingInstructionDataArgs
    ),
  } as CreateJobPostingInstruction<
    TProgramAddress,
    TAccountJobPosting,
    TAccountEmployer,
    TAccountSystemProgram
  >;

  return instruction;
}

export type CreateJobPostingInput<
  TAccountJobPosting extends string = string,
  TAccountEmployer extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  jobPosting: Address<TAccountJobPosting>;
  employer: TransactionSigner<TAccountEmployer>;
  systemProgram?: Address<TAccountSystemProgram>;
  title: CreateJobPostingInstructionDataArgs['title'];
  description: CreateJobPostingInstructionDataArgs['description'];
  requirements: CreateJobPostingInstructionDataArgs['requirements'];
  budget: CreateJobPostingInstructionDataArgs['budget'];
  deadline: CreateJobPostingInstructionDataArgs['deadline'];
  skillsNeeded: CreateJobPostingInstructionDataArgs['skillsNeeded'];
  budgetMin: CreateJobPostingInstructionDataArgs['budgetMin'];
  budgetMax: CreateJobPostingInstructionDataArgs['budgetMax'];
  paymentToken: CreateJobPostingInstructionDataArgs['paymentToken'];
  jobType: CreateJobPostingInstructionDataArgs['jobType'];
  experienceLevel: CreateJobPostingInstructionDataArgs['experienceLevel'];
};

export function getCreateJobPostingInstruction<
  TAccountJobPosting extends string,
  TAccountEmployer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: CreateJobPostingInput<
    TAccountJobPosting,
    TAccountEmployer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreateJobPostingInstruction<
  TProgramAddress,
  TAccountJobPosting,
  TAccountEmployer,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    jobPosting: { value: input.jobPosting ?? null, isWritable: true },
    employer: { value: input.employer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.jobPosting),
      getAccountMeta(accounts.employer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateJobPostingInstructionDataEncoder().encode(
      args as CreateJobPostingInstructionDataArgs
    ),
  } as CreateJobPostingInstruction<
    TProgramAddress,
    TAccountJobPosting,
    TAccountEmployer,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedCreateJobPostingInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    jobPosting: TAccountMetas[0];
    employer: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
  };
  data: CreateJobPostingInstructionData;
};

export function parseCreateJobPostingInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCreateJobPostingInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      jobPosting: getNextAccount(),
      employer: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCreateJobPostingInstructionDataDecoder().decode(instruction.data),
  };
}
