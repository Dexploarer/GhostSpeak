/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
import {
  getMultisigConfigDecoder,
  getMultisigConfigEncoder,
  type MultisigConfig,
  type MultisigConfigArgs,
} from '../types';

export const CREATE_MULTISIG_DISCRIMINATOR = new Uint8Array([
  148, 146, 240, 10, 226, 215, 167, 174,
]);

export function getCreateMultisigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_MULTISIG_DISCRIMINATOR
  );
}

export type CreateMultisigInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMultisig extends string | AccountMeta<string> = string,
  TAccountOwner extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountMultisig extends string
        ? WritableAccount<TAccountMultisig>
        : TAccountMultisig,
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> &
            AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreateMultisigInstructionData = {
  discriminator: ReadonlyUint8Array;
  multisigId: bigint;
  threshold: number;
  signers: Array<Address>;
  config: MultisigConfig;
};

export type CreateMultisigInstructionDataArgs = {
  multisigId: number | bigint;
  threshold: number;
  signers: Array<Address>;
  config: MultisigConfigArgs;
};

export function getCreateMultisigInstructionDataEncoder(): Encoder<CreateMultisigInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['multisigId', getU64Encoder()],
      ['threshold', getU8Encoder()],
      ['signers', getArrayEncoder(getAddressEncoder())],
      ['config', getMultisigConfigEncoder()],
    ]),
    (value) => ({ ...value, discriminator: CREATE_MULTISIG_DISCRIMINATOR })
  );
}

export function getCreateMultisigInstructionDataDecoder(): Decoder<CreateMultisigInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['multisigId', getU64Decoder()],
    ['threshold', getU8Decoder()],
    ['signers', getArrayDecoder(getAddressDecoder())],
    ['config', getMultisigConfigDecoder()],
  ]);
}

export function getCreateMultisigInstructionDataCodec(): Codec<
  CreateMultisigInstructionDataArgs,
  CreateMultisigInstructionData
> {
  return combineCodec(
    getCreateMultisigInstructionDataEncoder(),
    getCreateMultisigInstructionDataDecoder()
  );
}

export type CreateMultisigAsyncInput<
  TAccountMultisig extends string = string,
  TAccountOwner extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  multisig?: Address<TAccountMultisig>;
  owner: TransactionSigner<TAccountOwner>;
  systemProgram?: Address<TAccountSystemProgram>;
  multisigId: CreateMultisigInstructionDataArgs['multisigId'];
  threshold: CreateMultisigInstructionDataArgs['threshold'];
  signers: CreateMultisigInstructionDataArgs['signers'];
  config: CreateMultisigInstructionDataArgs['config'];
};

export async function getCreateMultisigInstructionAsync<
  TAccountMultisig extends string,
  TAccountOwner extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: CreateMultisigAsyncInput<
    TAccountMultisig,
    TAccountOwner,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateMultisigInstruction<
    TProgramAddress,
    TAccountMultisig,
    TAccountOwner,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    multisig: { value: input.multisig ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.multisig.value) {
    accounts.multisig.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([109, 117, 108, 116, 105, 115, 105, 103])
        ),
        getAddressEncoder().encode(expectAddress(accounts.owner.value)),
        getU64Encoder().encode(expectSome(args.multisigId)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.multisig),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateMultisigInstructionDataEncoder().encode(
      args as CreateMultisigInstructionDataArgs
    ),
  } as CreateMultisigInstruction<
    TProgramAddress,
    TAccountMultisig,
    TAccountOwner,
    TAccountSystemProgram
  >;

  return instruction;
}

export type CreateMultisigInput<
  TAccountMultisig extends string = string,
  TAccountOwner extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  multisig: Address<TAccountMultisig>;
  owner: TransactionSigner<TAccountOwner>;
  systemProgram?: Address<TAccountSystemProgram>;
  multisigId: CreateMultisigInstructionDataArgs['multisigId'];
  threshold: CreateMultisigInstructionDataArgs['threshold'];
  signers: CreateMultisigInstructionDataArgs['signers'];
  config: CreateMultisigInstructionDataArgs['config'];
};

export function getCreateMultisigInstruction<
  TAccountMultisig extends string,
  TAccountOwner extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: CreateMultisigInput<
    TAccountMultisig,
    TAccountOwner,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreateMultisigInstruction<
  TProgramAddress,
  TAccountMultisig,
  TAccountOwner,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    multisig: { value: input.multisig ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.multisig),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateMultisigInstructionDataEncoder().encode(
      args as CreateMultisigInstructionDataArgs
    ),
  } as CreateMultisigInstruction<
    TProgramAddress,
    TAccountMultisig,
    TAccountOwner,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedCreateMultisigInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    multisig: TAccountMetas[0];
    owner: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
  };
  data: CreateMultisigInstructionData;
};

export function parseCreateMultisigInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCreateMultisigInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      multisig: getNextAccount(),
      owner: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCreateMultisigInstructionDataDecoder().decode(instruction.data),
  };
}
