/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CREATE_REPLICATION_TEMPLATE_DISCRIMINATOR = new Uint8Array([
  58, 37, 131, 238, 116, 165, 200, 193,
]);

export function getCreateReplicationTemplateDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_REPLICATION_TEMPLATE_DISCRIMINATOR
  );
}

export type CreateReplicationTemplateInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountReplicationTemplate extends string | IAccountMeta<string> = string,
  TAccountSourceAgent extends string | IAccountMeta<string> = string,
  TAccountCreator extends string | IAccountMeta<string> = string,
  TAccountClock extends
    | string
    | IAccountMeta<string> = 'SysvarC1ock11111111111111111111111111111111',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountReplicationTemplate extends string
        ? WritableAccount<TAccountReplicationTemplate>
        : TAccountReplicationTemplate,
      TAccountSourceAgent extends string
        ? ReadonlyAccount<TAccountSourceAgent>
        : TAccountSourceAgent,
      TAccountCreator extends string
        ? WritableSignerAccount<TAccountCreator> &
            IAccountSignerMeta<TAccountCreator>
        : TAccountCreator,
      TAccountClock extends string
        ? ReadonlyAccount<TAccountClock>
        : TAccountClock,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface CreateReplicationTemplateInstructionData {
  discriminator: ReadonlyUint8Array;
  genomeHash: string;
  baseCapabilities: string[];
  replicationFee: bigint;
  maxReplications: number;
}

export interface CreateReplicationTemplateInstructionDataArgs {
  genomeHash: string;
  baseCapabilities: string[];
  replicationFee: number | bigint;
  maxReplications: number;
}

export function getCreateReplicationTemplateInstructionDataEncoder(): Encoder<CreateReplicationTemplateInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['genomeHash', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      [
        'baseCapabilities',
        getArrayEncoder(
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())
        ),
      ],
      ['replicationFee', getU64Encoder()],
      ['maxReplications', getU32Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: CREATE_REPLICATION_TEMPLATE_DISCRIMINATOR,
    })
  );
}

export function getCreateReplicationTemplateInstructionDataDecoder(): Decoder<CreateReplicationTemplateInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['genomeHash', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    [
      'baseCapabilities',
      getArrayDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
    ['replicationFee', getU64Decoder()],
    ['maxReplications', getU32Decoder()],
  ]);
}

export function getCreateReplicationTemplateInstructionDataCodec(): Codec<
  CreateReplicationTemplateInstructionDataArgs,
  CreateReplicationTemplateInstructionData
> {
  return combineCodec(
    getCreateReplicationTemplateInstructionDataEncoder(),
    getCreateReplicationTemplateInstructionDataDecoder()
  );
}

export interface CreateReplicationTemplateAsyncInput<
  TAccountReplicationTemplate extends string = string,
  TAccountSourceAgent extends string = string,
  TAccountCreator extends string = string,
  TAccountClock extends string = string,
  TAccountSystemProgram extends string = string,
> {
  replicationTemplate?: Address<TAccountReplicationTemplate>;
  sourceAgent: Address<TAccountSourceAgent>;
  creator: TransactionSigner<TAccountCreator>;
  clock?: Address<TAccountClock>;
  systemProgram?: Address<TAccountSystemProgram>;
  genomeHash: CreateReplicationTemplateInstructionDataArgs['genomeHash'];
  baseCapabilities: CreateReplicationTemplateInstructionDataArgs['baseCapabilities'];
  replicationFee: CreateReplicationTemplateInstructionDataArgs['replicationFee'];
  maxReplications: CreateReplicationTemplateInstructionDataArgs['maxReplications'];
}

export async function getCreateReplicationTemplateInstructionAsync<
  TAccountReplicationTemplate extends string,
  TAccountSourceAgent extends string,
  TAccountCreator extends string,
  TAccountClock extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: CreateReplicationTemplateAsyncInput<
    TAccountReplicationTemplate,
    TAccountSourceAgent,
    TAccountCreator,
    TAccountClock,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateReplicationTemplateInstruction<
    TProgramAddress,
    TAccountReplicationTemplate,
    TAccountSourceAgent,
    TAccountCreator,
    TAccountClock,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    replicationTemplate: {
      value: input.replicationTemplate ?? null,
      isWritable: true,
    },
    sourceAgent: { value: input.sourceAgent ?? null, isWritable: false },
    creator: { value: input.creator ?? null, isWritable: true },
    clock: { value: input.clock ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.replicationTemplate.value) {
    accounts.replicationTemplate.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            114, 101, 112, 108, 105, 99, 97, 116, 105, 111, 110, 95, 116, 101,
            109, 112, 108, 97, 116, 101,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.sourceAgent.value)),
      ],
    });
  }
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.replicationTemplate),
      getAccountMeta(accounts.sourceAgent),
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.clock),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateReplicationTemplateInstructionDataEncoder().encode(
      args as CreateReplicationTemplateInstructionDataArgs
    ),
  } as CreateReplicationTemplateInstruction<
    TProgramAddress,
    TAccountReplicationTemplate,
    TAccountSourceAgent,
    TAccountCreator,
    TAccountClock,
    TAccountSystemProgram
  >;

  return instruction;
}

export interface CreateReplicationTemplateInput<
  TAccountReplicationTemplate extends string = string,
  TAccountSourceAgent extends string = string,
  TAccountCreator extends string = string,
  TAccountClock extends string = string,
  TAccountSystemProgram extends string = string,
> {
  replicationTemplate: Address<TAccountReplicationTemplate>;
  sourceAgent: Address<TAccountSourceAgent>;
  creator: TransactionSigner<TAccountCreator>;
  clock?: Address<TAccountClock>;
  systemProgram?: Address<TAccountSystemProgram>;
  genomeHash: CreateReplicationTemplateInstructionDataArgs['genomeHash'];
  baseCapabilities: CreateReplicationTemplateInstructionDataArgs['baseCapabilities'];
  replicationFee: CreateReplicationTemplateInstructionDataArgs['replicationFee'];
  maxReplications: CreateReplicationTemplateInstructionDataArgs['maxReplications'];
}

export function getCreateReplicationTemplateInstruction<
  TAccountReplicationTemplate extends string,
  TAccountSourceAgent extends string,
  TAccountCreator extends string,
  TAccountClock extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: CreateReplicationTemplateInput<
    TAccountReplicationTemplate,
    TAccountSourceAgent,
    TAccountCreator,
    TAccountClock,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreateReplicationTemplateInstruction<
  TProgramAddress,
  TAccountReplicationTemplate,
  TAccountSourceAgent,
  TAccountCreator,
  TAccountClock,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    replicationTemplate: {
      value: input.replicationTemplate ?? null,
      isWritable: true,
    },
    sourceAgent: { value: input.sourceAgent ?? null, isWritable: false },
    creator: { value: input.creator ?? null, isWritable: true },
    clock: { value: input.clock ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.replicationTemplate),
      getAccountMeta(accounts.sourceAgent),
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.clock),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateReplicationTemplateInstructionDataEncoder().encode(
      args as CreateReplicationTemplateInstructionDataArgs
    ),
  } as CreateReplicationTemplateInstruction<
    TProgramAddress,
    TAccountReplicationTemplate,
    TAccountSourceAgent,
    TAccountCreator,
    TAccountClock,
    TAccountSystemProgram
  >;

  return instruction;
}

export interface ParsedCreateReplicationTemplateInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    replicationTemplate: TAccountMetas[0];
    sourceAgent: TAccountMetas[1];
    creator: TAccountMetas[2];
    clock: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
  };
  data: CreateReplicationTemplateInstructionData;
}

export function parseCreateReplicationTemplateInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCreateReplicationTemplateInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      replicationTemplate: getNextAccount(),
      sourceAgent: getNextAccount(),
      creator: getNextAccount(),
      clock: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCreateReplicationTemplateInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
