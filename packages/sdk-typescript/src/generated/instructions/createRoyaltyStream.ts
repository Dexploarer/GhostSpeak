/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
import {
  getRoyaltyConfigDecoder,
  getRoyaltyConfigEncoder,
  type RoyaltyConfig,
  type RoyaltyConfigArgs,
} from '../types';

export const CREATE_ROYALTY_STREAM_DISCRIMINATOR = new Uint8Array([
  139, 213, 158, 201, 140, 251, 236, 89,
]);

export function getCreateRoyaltyStreamDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_ROYALTY_STREAM_DISCRIMINATOR
  );
}

export type CreateRoyaltyStreamInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountStream extends string | AccountMeta<string> = string,
  TAccountAgent extends string | AccountMeta<string> = string,
  TAccountCreator extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountStream extends string
        ? WritableAccount<TAccountStream>
        : TAccountStream,
      TAccountAgent extends string
        ? ReadonlyAccount<TAccountAgent>
        : TAccountAgent,
      TAccountCreator extends string
        ? WritableSignerAccount<TAccountCreator> &
            AccountSignerMeta<TAccountCreator>
        : TAccountCreator,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreateRoyaltyStreamInstructionData = {
  discriminator: ReadonlyUint8Array;
  config: RoyaltyConfig;
};

export type CreateRoyaltyStreamInstructionDataArgs = {
  config: RoyaltyConfigArgs;
};

export function getCreateRoyaltyStreamInstructionDataEncoder(): FixedSizeEncoder<CreateRoyaltyStreamInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['config', getRoyaltyConfigEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: CREATE_ROYALTY_STREAM_DISCRIMINATOR,
    })
  );
}

export function getCreateRoyaltyStreamInstructionDataDecoder(): FixedSizeDecoder<CreateRoyaltyStreamInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['config', getRoyaltyConfigDecoder()],
  ]);
}

export function getCreateRoyaltyStreamInstructionDataCodec(): FixedSizeCodec<
  CreateRoyaltyStreamInstructionDataArgs,
  CreateRoyaltyStreamInstructionData
> {
  return combineCodec(
    getCreateRoyaltyStreamInstructionDataEncoder(),
    getCreateRoyaltyStreamInstructionDataDecoder()
  );
}

export type CreateRoyaltyStreamAsyncInput<
  TAccountStream extends string = string,
  TAccountAgent extends string = string,
  TAccountCreator extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  stream?: Address<TAccountStream>;
  agent: Address<TAccountAgent>;
  creator: TransactionSigner<TAccountCreator>;
  systemProgram?: Address<TAccountSystemProgram>;
  config: CreateRoyaltyStreamInstructionDataArgs['config'];
};

export async function getCreateRoyaltyStreamInstructionAsync<
  TAccountStream extends string,
  TAccountAgent extends string,
  TAccountCreator extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: CreateRoyaltyStreamAsyncInput<
    TAccountStream,
    TAccountAgent,
    TAccountCreator,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateRoyaltyStreamInstruction<
    TProgramAddress,
    TAccountStream,
    TAccountAgent,
    TAccountCreator,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stream: { value: input.stream ?? null, isWritable: true },
    agent: { value: input.agent ?? null, isWritable: false },
    creator: { value: input.creator ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.stream.value) {
    accounts.stream.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            114, 111, 121, 97, 108, 116, 121, 95, 115, 116, 114, 101, 97, 109,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.agent.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.stream),
      getAccountMeta(accounts.agent),
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateRoyaltyStreamInstructionDataEncoder().encode(
      args as CreateRoyaltyStreamInstructionDataArgs
    ),
  } as CreateRoyaltyStreamInstruction<
    TProgramAddress,
    TAccountStream,
    TAccountAgent,
    TAccountCreator,
    TAccountSystemProgram
  >;

  return instruction;
}

export type CreateRoyaltyStreamInput<
  TAccountStream extends string = string,
  TAccountAgent extends string = string,
  TAccountCreator extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  stream: Address<TAccountStream>;
  agent: Address<TAccountAgent>;
  creator: TransactionSigner<TAccountCreator>;
  systemProgram?: Address<TAccountSystemProgram>;
  config: CreateRoyaltyStreamInstructionDataArgs['config'];
};

export function getCreateRoyaltyStreamInstruction<
  TAccountStream extends string,
  TAccountAgent extends string,
  TAccountCreator extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: CreateRoyaltyStreamInput<
    TAccountStream,
    TAccountAgent,
    TAccountCreator,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreateRoyaltyStreamInstruction<
  TProgramAddress,
  TAccountStream,
  TAccountAgent,
  TAccountCreator,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    stream: { value: input.stream ?? null, isWritable: true },
    agent: { value: input.agent ?? null, isWritable: false },
    creator: { value: input.creator ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.stream),
      getAccountMeta(accounts.agent),
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateRoyaltyStreamInstructionDataEncoder().encode(
      args as CreateRoyaltyStreamInstructionDataArgs
    ),
  } as CreateRoyaltyStreamInstruction<
    TProgramAddress,
    TAccountStream,
    TAccountAgent,
    TAccountCreator,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedCreateRoyaltyStreamInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    stream: TAccountMetas[0];
    agent: TAccountMetas[1];
    creator: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
  };
  data: CreateRoyaltyStreamInstructionData;
};

export function parseCreateRoyaltyStreamInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCreateRoyaltyStreamInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      stream: getNextAccount(),
      agent: getNextAccount(),
      creator: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCreateRoyaltyStreamInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
