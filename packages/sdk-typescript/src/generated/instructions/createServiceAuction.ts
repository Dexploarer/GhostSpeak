/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getOptionDecoder,
  getOptionEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import {
  GHOSTSPEAK_MARKETPLACE_ERROR__INSUFFICIENT_ACCOUNTS,
  GHOSTSPEAK_MARKETPLACE_ERROR__INVALID_INSTRUCTION_DATA,
  GHOSTSPEAK_MARKETPLACE_ERROR__MISSING_REQUIRED_ACCOUNT,
  GHOSTSPEAK_MARKETPLACE_ERROR__INVALID_ACCOUNT,
  GHOSTSPEAK_MARKETPLACE_ERROR__INSTRUCTION_PARSING_FAILED,
  isGhostspeakMarketplaceError,
} from '../errors';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
import {
  getAuctionTypeDecoder,
  getAuctionTypeEncoder,
  getDutchAuctionConfigDecoder,
  getDutchAuctionConfigEncoder,
  type AuctionType,
  type AuctionTypeArgs,
  type DutchAuctionConfig,
  type DutchAuctionConfigArgs,
} from '../types';

export const CREATE_SERVICE_AUCTION_DISCRIMINATOR = new Uint8Array([
  236, 178, 59, 67, 226, 82, 27, 209,
]);

export function getCreateServiceAuctionDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_SERVICE_AUCTION_DISCRIMINATOR
  );
}

export type CreateServiceAuctionInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountAuction extends string | AccountMeta<string> = string,
  TAccountAgent extends string | AccountMeta<string> = string,
  TAccountUserRegistry extends string | AccountMeta<string> = string,
  TAccountCreator extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountClock extends
    | string
    | AccountMeta<string> = 'SysvarC1ock11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAuction extends string
        ? WritableAccount<TAccountAuction>
        : TAccountAuction,
      TAccountAgent extends string
        ? ReadonlyAccount<TAccountAgent>
        : TAccountAgent,
      TAccountUserRegistry extends string
        ? ReadonlyAccount<TAccountUserRegistry>
        : TAccountUserRegistry,
      TAccountCreator extends string
        ? WritableSignerAccount<TAccountCreator> &
            AccountSignerMeta<TAccountCreator>
        : TAccountCreator,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountClock extends string
        ? ReadonlyAccount<TAccountClock>
        : TAccountClock,
      ...TRemainingAccounts,
    ]
  >;

export type CreateServiceAuctionInstructionData = {
  discriminator: ReadonlyUint8Array;
  auctionType: AuctionType;
  startingPrice: bigint;
  reservePrice: bigint;
  isReserveHidden: boolean;
  currentBid: bigint;
  currentBidder: Option<Address>;
  auctionEndTime: bigint;
  minimumBidIncrement: bigint;
  totalBids: number;
  dutchConfig: Option<DutchAuctionConfig>;
};

export type CreateServiceAuctionInstructionDataArgs = {
  auctionType: AuctionTypeArgs;
  startingPrice: number | bigint;
  reservePrice: number | bigint;
  isReserveHidden: boolean;
  currentBid: number | bigint;
  currentBidder: OptionOrNullable<Address>;
  auctionEndTime: number | bigint;
  minimumBidIncrement: number | bigint;
  totalBids: number;
  dutchConfig: OptionOrNullable<DutchAuctionConfigArgs>;
};

export function getCreateServiceAuctionInstructionDataEncoder(): Encoder<CreateServiceAuctionInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['auctionType', getAuctionTypeEncoder()],
      ['startingPrice', getU64Encoder()],
      ['reservePrice', getU64Encoder()],
      ['isReserveHidden', getBooleanEncoder()],
      ['currentBid', getU64Encoder()],
      ['currentBidder', getOptionEncoder(getAddressEncoder())],
      ['auctionEndTime', getI64Encoder()],
      ['minimumBidIncrement', getU64Encoder()],
      ['totalBids', getU32Encoder()],
      ['dutchConfig', getOptionEncoder(getDutchAuctionConfigEncoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: CREATE_SERVICE_AUCTION_DISCRIMINATOR,
    })
  );
}

export function getCreateServiceAuctionInstructionDataDecoder(): Decoder<CreateServiceAuctionInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['auctionType', getAuctionTypeDecoder()],
    ['startingPrice', getU64Decoder()],
    ['reservePrice', getU64Decoder()],
    ['isReserveHidden', getBooleanDecoder()],
    ['currentBid', getU64Decoder()],
    ['currentBidder', getOptionDecoder(getAddressDecoder())],
    ['auctionEndTime', getI64Decoder()],
    ['minimumBidIncrement', getU64Decoder()],
    ['totalBids', getU32Decoder()],
    ['dutchConfig', getOptionDecoder(getDutchAuctionConfigDecoder())],
  ]);
}

export function getCreateServiceAuctionInstructionDataCodec(): Codec<
  CreateServiceAuctionInstructionDataArgs,
  CreateServiceAuctionInstructionData
> {
  return combineCodec(
    getCreateServiceAuctionInstructionDataEncoder(),
    getCreateServiceAuctionInstructionDataDecoder()
  );
}

export type CreateServiceAuctionAsyncInput<
  TAccountAuction extends string = string,
  TAccountAgent extends string = string,
  TAccountUserRegistry extends string = string,
  TAccountCreator extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountClock extends string = string,
> = {
  /** Auction account with canonical PDA validation and collision prevention */
  auction?: Address<TAccountAuction>;
  /** Agent account with enhanced constraints */
  agent: Address<TAccountAgent>;
  /** User registry for rate limiting and spam prevention */
  userRegistry: Address<TAccountUserRegistry>;
  /** Enhanced authority verification */
  creator: TransactionSigner<TAccountCreator>;
  /** System program for account creation */
  systemProgram?: Address<TAccountSystemProgram>;
  /** Clock sysvar for timestamp validation */
  clock?: Address<TAccountClock>;
  auctionType: CreateServiceAuctionInstructionDataArgs['auctionType'];
  startingPrice: CreateServiceAuctionInstructionDataArgs['startingPrice'];
  reservePrice: CreateServiceAuctionInstructionDataArgs['reservePrice'];
  isReserveHidden: CreateServiceAuctionInstructionDataArgs['isReserveHidden'];
  currentBid: CreateServiceAuctionInstructionDataArgs['currentBid'];
  currentBidder: CreateServiceAuctionInstructionDataArgs['currentBidder'];
  auctionEndTime: CreateServiceAuctionInstructionDataArgs['auctionEndTime'];
  minimumBidIncrement: CreateServiceAuctionInstructionDataArgs['minimumBidIncrement'];
  totalBids: CreateServiceAuctionInstructionDataArgs['totalBids'];
  dutchConfig: CreateServiceAuctionInstructionDataArgs['dutchConfig'];
};

export async function getCreateServiceAuctionInstructionAsync<
  TAccountAuction extends string,
  TAccountAgent extends string,
  TAccountUserRegistry extends string,
  TAccountCreator extends string,
  TAccountSystemProgram extends string,
  TAccountClock extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: CreateServiceAuctionAsyncInput<
    TAccountAuction,
    TAccountAgent,
    TAccountUserRegistry,
    TAccountCreator,
    TAccountSystemProgram,
    TAccountClock
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateServiceAuctionInstruction<
    TProgramAddress,
    TAccountAuction,
    TAccountAgent,
    TAccountUserRegistry,
    TAccountCreator,
    TAccountSystemProgram,
    TAccountClock
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    auction: { value: input.auction ?? null, isWritable: true },
    agent: { value: input.agent ?? null, isWritable: false },
    userRegistry: { value: input.userRegistry ?? null, isWritable: false },
    creator: { value: input.creator ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    clock: { value: input.clock ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.auction.value) {
    accounts.auction.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([97, 117, 99, 116, 105, 111, 110])
        ),
        getAddressEncoder().encode(expectAddress(accounts.agent.value)),
        getAddressEncoder().encode(expectAddress(accounts.creator.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.auction),
      getAccountMeta(accounts.agent),
      getAccountMeta(accounts.userRegistry),
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.clock),
    ],
    programAddress,
    data: getCreateServiceAuctionInstructionDataEncoder().encode(
      args as CreateServiceAuctionInstructionDataArgs
    ),
  } as CreateServiceAuctionInstruction<
    TProgramAddress,
    TAccountAuction,
    TAccountAgent,
    TAccountUserRegistry,
    TAccountCreator,
    TAccountSystemProgram,
    TAccountClock
  >;

  return instruction;
}

export type CreateServiceAuctionInput<
  TAccountAuction extends string = string,
  TAccountAgent extends string = string,
  TAccountUserRegistry extends string = string,
  TAccountCreator extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountClock extends string = string,
> = {
  /** Auction account with canonical PDA validation and collision prevention */
  auction: Address<TAccountAuction>;
  /** Agent account with enhanced constraints */
  agent: Address<TAccountAgent>;
  /** User registry for rate limiting and spam prevention */
  userRegistry: Address<TAccountUserRegistry>;
  /** Enhanced authority verification */
  creator: TransactionSigner<TAccountCreator>;
  /** System program for account creation */
  systemProgram?: Address<TAccountSystemProgram>;
  /** Clock sysvar for timestamp validation */
  clock?: Address<TAccountClock>;
  auctionType: CreateServiceAuctionInstructionDataArgs['auctionType'];
  startingPrice: CreateServiceAuctionInstructionDataArgs['startingPrice'];
  reservePrice: CreateServiceAuctionInstructionDataArgs['reservePrice'];
  isReserveHidden: CreateServiceAuctionInstructionDataArgs['isReserveHidden'];
  currentBid: CreateServiceAuctionInstructionDataArgs['currentBid'];
  currentBidder: CreateServiceAuctionInstructionDataArgs['currentBidder'];
  auctionEndTime: CreateServiceAuctionInstructionDataArgs['auctionEndTime'];
  minimumBidIncrement: CreateServiceAuctionInstructionDataArgs['minimumBidIncrement'];
  totalBids: CreateServiceAuctionInstructionDataArgs['totalBids'];
  dutchConfig: CreateServiceAuctionInstructionDataArgs['dutchConfig'];
};

export function getCreateServiceAuctionInstruction<
  TAccountAuction extends string,
  TAccountAgent extends string,
  TAccountUserRegistry extends string,
  TAccountCreator extends string,
  TAccountSystemProgram extends string,
  TAccountClock extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: CreateServiceAuctionInput<
    TAccountAuction,
    TAccountAgent,
    TAccountUserRegistry,
    TAccountCreator,
    TAccountSystemProgram,
    TAccountClock
  >,
  config?: { programAddress?: TProgramAddress }
): CreateServiceAuctionInstruction<
  TProgramAddress,
  TAccountAuction,
  TAccountAgent,
  TAccountUserRegistry,
  TAccountCreator,
  TAccountSystemProgram,
  TAccountClock
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    auction: { value: input.auction ?? null, isWritable: true },
    agent: { value: input.agent ?? null, isWritable: false },
    userRegistry: { value: input.userRegistry ?? null, isWritable: false },
    creator: { value: input.creator ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    clock: { value: input.clock ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.auction),
      getAccountMeta(accounts.agent),
      getAccountMeta(accounts.userRegistry),
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.clock),
    ],
    programAddress,
    data: getCreateServiceAuctionInstructionDataEncoder().encode(
      args as CreateServiceAuctionInstructionDataArgs
    ),
  } as CreateServiceAuctionInstruction<
    TProgramAddress,
    TAccountAuction,
    TAccountAgent,
    TAccountUserRegistry,
    TAccountCreator,
    TAccountSystemProgram,
    TAccountClock
  >;

  return instruction;
}

export type ParsedCreateServiceAuctionInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Auction account with canonical PDA validation and collision prevention */
    auction: TAccountMetas[0];
    /** Agent account with enhanced constraints */
    agent: TAccountMetas[1];
    /** User registry for rate limiting and spam prevention */
    userRegistry: TAccountMetas[2];
    /** Enhanced authority verification */
    creator: TAccountMetas[3];
    /** System program for account creation */
    systemProgram: TAccountMetas[4];
    /** Clock sysvar for timestamp validation */
    clock: TAccountMetas[5];
  };
  data: CreateServiceAuctionInstructionData;
};

export function parseCreateServiceAuctionInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCreateServiceAuctionInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    throw new Error('[GHOSTSPEAK_MARKETPLACE_ERROR__INSUFFICIENT_ACCOUNTS] Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      auction: getNextAccount(),
      agent: getNextAccount(),
      userRegistry: getNextAccount(),
      creator: getNextAccount(),
      systemProgram: getNextAccount(),
      clock: getNextAccount(),
    },
    data: getCreateServiceAuctionInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
