import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  transformEncoder,
  type Codec,
  type Decoder,
  type Encoder,
  type ReadonlyUint8Array
} from '@solana/codecs-core';
import {
  getUtf8Decoder,
  getUtf8Encoder
} from '@solana/codecs-strings';
import {
  getI64Decoder,
  getI64Encoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder
} from '@solana/codecs-numbers';
import {
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder
} from '@solana/codecs-data-structures';
import {
  getAddressDecoder,
  getAddressEncoder,
  getProgramDerivedAddress,
  type Address
} from '@solana/addresses';
import {
  type IInstruction,
  type IInstructionWithData
} from '@solana/instructions';
import { AccountRole } from '@solana/instructions';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

export const CREATE_SERVICE_LISTING_DISCRIMINATOR = new Uint8Array([
  91, 37, 216, 26, 93, 146, 13, 182,
]);

export function getCreateServiceListingDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_SERVICE_LISTING_DISCRIMINATOR
  );
}

export type CreateServiceListingInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly any[] = readonly any[],
> = {
  programAddress: Address<TProgram>;
  data: Uint8Array;
  accounts: TAccountMetas;
};

export type CreateServiceListingInstructionData = {
  discriminator: ReadonlyUint8Array;
  title: string;
  description: string;
  price: bigint;
  tokenMint: Address;
  serviceType: string;
  paymentToken: Address;
  estimatedDelivery: bigint;
  tags: Array<string>;
  listingId: string;
};

export type CreateServiceListingInstructionDataArgs = {
  title: string;
  description: string;
  price: number | bigint;
  tokenMint: Address;
  serviceType: string;
  paymentToken: Address;
  estimatedDelivery: number | bigint;
  tags: Array<string>;
  listingId: string;
};

export function getCreateServiceListingInstructionDataEncoder(): Encoder<CreateServiceListingInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['title', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['description', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['price', getU64Encoder()],
      ['tokenMint', getAddressEncoder()],
      ['serviceType', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['paymentToken', getAddressEncoder()],
      ['estimatedDelivery', getI64Encoder()],
      [
        'tags',
        getArrayEncoder(
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())
        ),
      ],
      ['listingId', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: CREATE_SERVICE_LISTING_DISCRIMINATOR,
    })
  );
}

export function getCreateServiceListingInstructionDataDecoder(): Decoder<CreateServiceListingInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['title', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['description', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['price', getU64Decoder()],
    ['tokenMint', getAddressDecoder()],
    ['serviceType', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['paymentToken', getAddressDecoder()],
    ['estimatedDelivery', getI64Decoder()],
    [
      'tags',
      getArrayDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
    ['listingId', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getCreateServiceListingInstructionDataCodec(): Codec<
  CreateServiceListingInstructionDataArgs,
  CreateServiceListingInstructionData
> {
  return combineCodec(
    getCreateServiceListingInstructionDataEncoder(),
    getCreateServiceListingInstructionDataDecoder()
  );
}

export type CreateServiceListingAsyncInput<
  TAccountServiceListing extends string = string,
  TAccountAgent extends string = string,
  TAccountUserRegistry extends string = string,
  TAccountCreator extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountClock extends string = string,
> = {
  /** Service listing account with enhanced PDA security */
  serviceListing?: Address<TAccountServiceListing>;
  /** Agent account with ownership validation */
  agent: Address<TAccountAgent>;
  /** User registry for rate limiting */
  userRegistry?: Address<TAccountUserRegistry>;
  /** Creator authority with enhanced verification */
  creator: any;
  /** System program for account operations */
  systemProgram?: Address<TAccountSystemProgram>;
  /** Clock sysvar for timestamp validation and rate limiting */
  clock?: Address<TAccountClock>;
  title: CreateServiceListingInstructionDataArgs['title'];
  description: CreateServiceListingInstructionDataArgs['description'];
  price: CreateServiceListingInstructionDataArgs['price'];
  tokenMint: CreateServiceListingInstructionDataArgs['tokenMint'];
  serviceType: CreateServiceListingInstructionDataArgs['serviceType'];
  paymentToken: CreateServiceListingInstructionDataArgs['paymentToken'];
  estimatedDelivery: CreateServiceListingInstructionDataArgs['estimatedDelivery'];
  tags: CreateServiceListingInstructionDataArgs['tags'];
  listingId: CreateServiceListingInstructionDataArgs['listingId'];
};

export async function getCreateServiceListingInstructionAsync<
  TAccountServiceListing extends string,
  TAccountAgent extends string,
  TAccountUserRegistry extends string,
  TAccountCreator extends string,
  TAccountSystemProgram extends string,
  TAccountClock extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: CreateServiceListingAsyncInput<
    TAccountServiceListing,
    TAccountAgent,
    TAccountUserRegistry,
    TAccountCreator,
    TAccountSystemProgram,
    TAccountClock
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<CreateServiceListingInstruction<TProgramAddress, any[]>> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    serviceListing: { value: input.serviceListing ?? null, isWritable: true },
    agent: { value: input.agent ?? null, isWritable: false },
    userRegistry: { value: input.userRegistry ?? null, isWritable: true },
    creator: { value: input.creator ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    clock: { value: input.clock ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.serviceListing.value) {
    accounts.serviceListing.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            115, 101, 114, 118, 105, 99, 101, 95, 108, 105, 115, 116, 105, 110,
            103,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.creator.value)),
        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()).encode(
          expectSome(args.listingId)
        ),
      ],
    });
  }
  if (!accounts.userRegistry.value) {
    accounts.userRegistry.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            117, 115, 101, 114, 95, 114, 101, 103, 105, 115, 116, 114, 121,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.creator.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.serviceListing),
      getAccountMeta(accounts.agent),
      getAccountMeta(accounts.userRegistry),
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.clock),
    ],
    programAddress,
    data: getCreateServiceListingInstructionDataEncoder().encode(
      args as CreateServiceListingInstructionDataArgs
    ),
  } as CreateServiceListingInstruction<TProgramAddress, any[]>;

  return instruction;
}

export type CreateServiceListingInput<
  TAccountServiceListing extends string = string,
  TAccountAgent extends string = string,
  TAccountUserRegistry extends string = string,
  TAccountCreator extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountClock extends string = string,
> = {
  /** Service listing account with enhanced PDA security */
  serviceListing: Address<TAccountServiceListing>;
  /** Agent account with ownership validation */
  agent: Address<TAccountAgent>;
  /** User registry for rate limiting */
  userRegistry: Address<TAccountUserRegistry>;
  /** Creator authority with enhanced verification */
  creator: any;
  /** System program for account operations */
  systemProgram?: Address<TAccountSystemProgram>;
  /** Clock sysvar for timestamp validation and rate limiting */
  clock?: Address<TAccountClock>;
  title: CreateServiceListingInstructionDataArgs['title'];
  description: CreateServiceListingInstructionDataArgs['description'];
  price: CreateServiceListingInstructionDataArgs['price'];
  tokenMint: CreateServiceListingInstructionDataArgs['tokenMint'];
  serviceType: CreateServiceListingInstructionDataArgs['serviceType'];
  paymentToken: CreateServiceListingInstructionDataArgs['paymentToken'];
  estimatedDelivery: CreateServiceListingInstructionDataArgs['estimatedDelivery'];
  tags: CreateServiceListingInstructionDataArgs['tags'];
  listingId: CreateServiceListingInstructionDataArgs['listingId'];
};

export function getCreateServiceListingInstruction<
  TAccountServiceListing extends string,
  TAccountAgent extends string,
  TAccountUserRegistry extends string,
  TAccountCreator extends string,
  TAccountSystemProgram extends string,
  TAccountClock extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: CreateServiceListingInput<
    TAccountServiceListing,
    TAccountAgent,
    TAccountUserRegistry,
    TAccountCreator,
    TAccountSystemProgram,
    TAccountClock
  >,
  config?: { programAddress?: TProgramAddress }
): CreateServiceListingInstruction<TProgramAddress, any[]> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    serviceListing: { value: input.serviceListing ?? null, isWritable: true },
    agent: { value: input.agent ?? null, isWritable: false },
    userRegistry: { value: input.userRegistry ?? null, isWritable: true },
    creator: { value: input.creator ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    clock: { value: input.clock ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.serviceListing),
      getAccountMeta(accounts.agent),
      getAccountMeta(accounts.userRegistry),
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.clock),
    ],
    programAddress,
    data: getCreateServiceListingInstructionDataEncoder().encode(
      args as CreateServiceListingInstructionDataArgs
    ),
  } as CreateServiceListingInstruction<TProgramAddress, any[]>;

  return instruction;
}

export type ParsedCreateServiceListingInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly { address: Address; role: AccountRole }[] = readonly { address: Address; role: AccountRole }[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Service listing account with enhanced PDA security */
    serviceListing: TAccountMetas[0];
    /** Agent account with ownership validation */
    agent: TAccountMetas[1];
    /** User registry for rate limiting */
    userRegistry: TAccountMetas[2];
    /** Creator authority with enhanced verification */
    creator: TAccountMetas[3];
    /** System program for account operations */
    systemProgram: TAccountMetas[4];
    /** Clock sysvar for timestamp validation and rate limiting */
    clock: TAccountMetas[5];
  };
  data: CreateServiceListingInstructionData;
};

export function parseCreateServiceListingInstruction<
  TProgram extends string,
  TAccountMetas extends readonly { address: Address; role: AccountRole }[],
>(
  instruction: { programAddress: TProgram } &
    { accounts: TAccountMetas } &
    { data: Uint8Array }
): ParsedCreateServiceListingInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress as Address<TProgram>,
    accounts: {
      serviceListing: getNextAccount(),
      agent: getNextAccount(),
      userRegistry: getNextAccount(),
      creator: getNextAccount(),
      systemProgram: getNextAccount(),
      clock: getNextAccount(),
    },
    data: getCreateServiceListingInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
