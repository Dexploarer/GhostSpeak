/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CREATE_WORK_ORDER_DISCRIMINATOR = new Uint8Array([
  143, 17, 248, 200, 217, 85, 10, 175,
]);

export function getCreateWorkOrderDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_WORK_ORDER_DISCRIMINATOR
  );
}

export type CreateWorkOrderInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountWorkOrder extends string | IAccountMeta<string> = string,
  TAccountClient extends string | IAccountMeta<string> = string,
  TAccountClock extends
    | string
    | IAccountMeta<string> = 'SysvarC1ock11111111111111111111111111111111',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountWorkOrder extends string
        ? WritableAccount<TAccountWorkOrder>
        : TAccountWorkOrder,
      TAccountClient extends string
        ? WritableSignerAccount<TAccountClient> &
            IAccountSignerMeta<TAccountClient>
        : TAccountClient,
      TAccountClock extends string
        ? ReadonlyAccount<TAccountClock>
        : TAccountClock,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface CreateWorkOrderInstructionData {
  discriminator: ReadonlyUint8Array;
  orderId: bigint;
  provider: Address;
  title: string;
  description: string;
  requirements: string[];
  paymentAmount: bigint;
  paymentToken: Address;
  deadline: bigint;
}

export interface CreateWorkOrderInstructionDataArgs {
  orderId: number | bigint;
  provider: Address;
  title: string;
  description: string;
  requirements: string[];
  paymentAmount: number | bigint;
  paymentToken: Address;
  deadline: number | bigint;
}

export function getCreateWorkOrderInstructionDataEncoder(): Encoder<CreateWorkOrderInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['orderId', getU64Encoder()],
      ['provider', getAddressEncoder()],
      ['title', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['description', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      [
        'requirements',
        getArrayEncoder(
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())
        ),
      ],
      ['paymentAmount', getU64Encoder()],
      ['paymentToken', getAddressEncoder()],
      ['deadline', getI64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CREATE_WORK_ORDER_DISCRIMINATOR })
  );
}

export function getCreateWorkOrderInstructionDataDecoder(): Decoder<CreateWorkOrderInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['orderId', getU64Decoder()],
    ['provider', getAddressDecoder()],
    ['title', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['description', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    [
      'requirements',
      getArrayDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
    ['paymentAmount', getU64Decoder()],
    ['paymentToken', getAddressDecoder()],
    ['deadline', getI64Decoder()],
  ]);
}

export function getCreateWorkOrderInstructionDataCodec(): Codec<
  CreateWorkOrderInstructionDataArgs,
  CreateWorkOrderInstructionData
> {
  return combineCodec(
    getCreateWorkOrderInstructionDataEncoder(),
    getCreateWorkOrderInstructionDataDecoder()
  );
}

export interface CreateWorkOrderInput<
  TAccountWorkOrder extends string = string,
  TAccountClient extends string = string,
  TAccountClock extends string = string,
  TAccountSystemProgram extends string = string,
> {
  workOrder: Address<TAccountWorkOrder>;
  client: TransactionSigner<TAccountClient>;
  clock?: Address<TAccountClock>;
  systemProgram?: Address<TAccountSystemProgram>;
  orderId: CreateWorkOrderInstructionDataArgs['orderId'];
  provider: CreateWorkOrderInstructionDataArgs['provider'];
  title: CreateWorkOrderInstructionDataArgs['title'];
  description: CreateWorkOrderInstructionDataArgs['description'];
  requirements: CreateWorkOrderInstructionDataArgs['requirements'];
  paymentAmount: CreateWorkOrderInstructionDataArgs['paymentAmount'];
  paymentToken: CreateWorkOrderInstructionDataArgs['paymentToken'];
  deadline: CreateWorkOrderInstructionDataArgs['deadline'];
}

export function getCreateWorkOrderInstruction<
  TAccountWorkOrder extends string,
  TAccountClient extends string,
  TAccountClock extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: CreateWorkOrderInput<
    TAccountWorkOrder,
    TAccountClient,
    TAccountClock,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreateWorkOrderInstruction<
  TProgramAddress,
  TAccountWorkOrder,
  TAccountClient,
  TAccountClock,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    workOrder: { value: input.workOrder ?? null, isWritable: true },
    client: { value: input.client ?? null, isWritable: true },
    clock: { value: input.clock ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.workOrder),
      getAccountMeta(accounts.client),
      getAccountMeta(accounts.clock),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateWorkOrderInstructionDataEncoder().encode(
      args as CreateWorkOrderInstructionDataArgs
    ),
  } as CreateWorkOrderInstruction<
    TProgramAddress,
    TAccountWorkOrder,
    TAccountClient,
    TAccountClock,
    TAccountSystemProgram
  >;

  return instruction;
}

export interface ParsedCreateWorkOrderInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    workOrder: TAccountMetas[0];
    client: TAccountMetas[1];
    clock: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
  };
  data: CreateWorkOrderInstructionData;
}

export function parseCreateWorkOrderInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCreateWorkOrderInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    throw new Error('Invalid number of accounts provided');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      workOrder: getNextAccount(),
      client: getNextAccount(),
      clock: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCreateWorkOrderInstructionDataDecoder().decode(instruction.data),
  };
}
