/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getOptionDecoder,
  getOptionEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import {
  GHOSTSPEAK_MARKETPLACE_ERROR__INSUFFICIENT_ACCOUNTS,
  GHOSTSPEAK_MARKETPLACE_ERROR__INVALID_INSTRUCTION_DATA,
  GHOSTSPEAK_MARKETPLACE_ERROR__MISSING_REQUIRED_ACCOUNT,
  GHOSTSPEAK_MARKETPLACE_ERROR__INVALID_ACCOUNT,
  GHOSTSPEAK_MARKETPLACE_ERROR__INSTRUCTION_PARSING_FAILED,
  isGhostspeakMarketplaceError,
} from '../errors';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import {
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
import {
  getDelegationScopeDecoder,
  getDelegationScopeEncoder,
  type DelegationScope,
  type DelegationScopeArgs,
} from '../types';

export const DELEGATE_VOTE_DISCRIMINATOR = new Uint8Array([
  12, 116, 204, 68, 87, 205, 40, 205,
]);

export function getDelegateVoteDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    DELEGATE_VOTE_DISCRIMINATOR
  );
}

export type DelegateVoteInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountProposal extends string | AccountMeta<string> = string,
  TAccountDelegator extends string | AccountMeta<string> = string,
  TAccountDelegate extends string | AccountMeta<string> = string,
  TAccountDelegatorTokenAccount extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountProposal extends string
        ? WritableAccount<TAccountProposal>
        : TAccountProposal,
      TAccountDelegator extends string
        ? WritableSignerAccount<TAccountDelegator> &
            AccountSignerMeta<TAccountDelegator>
        : TAccountDelegator,
      TAccountDelegate extends string
        ? ReadonlyAccount<TAccountDelegate>
        : TAccountDelegate,
      TAccountDelegatorTokenAccount extends string
        ? ReadonlyAccount<TAccountDelegatorTokenAccount>
        : TAccountDelegatorTokenAccount,
      ...TRemainingAccounts,
    ]
  >;

export type DelegateVoteInstructionData = {
  discriminator: ReadonlyUint8Array;
  proposalId: bigint;
  scope: DelegationScope;
  expiresAt: Option<bigint>;
};

export type DelegateVoteInstructionDataArgs = {
  proposalId: number | bigint;
  scope: DelegationScopeArgs;
  expiresAt: OptionOrNullable<number | bigint>;
};

export function getDelegateVoteInstructionDataEncoder(): Encoder<DelegateVoteInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['proposalId', getU64Encoder()],
      ['scope', getDelegationScopeEncoder()],
      ['expiresAt', getOptionEncoder(getI64Encoder())],
    ]),
    (value) => ({ ...value, discriminator: DELEGATE_VOTE_DISCRIMINATOR })
  );
}

export function getDelegateVoteInstructionDataDecoder(): Decoder<DelegateVoteInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['proposalId', getU64Decoder()],
    ['scope', getDelegationScopeDecoder()],
    ['expiresAt', getOptionDecoder(getI64Decoder())],
  ]);
}

export function getDelegateVoteInstructionDataCodec(): Codec<
  DelegateVoteInstructionDataArgs,
  DelegateVoteInstructionData
> {
  return combineCodec(
    getDelegateVoteInstructionDataEncoder(),
    getDelegateVoteInstructionDataDecoder()
  );
}

export type DelegateVoteAsyncInput<
  TAccountProposal extends string = string,
  TAccountDelegator extends string = string,
  TAccountDelegate extends string = string,
  TAccountDelegatorTokenAccount extends string = string,
> = {
  /** The proposal to delegate for (or use 0 for all proposals) */
  proposal?: Address<TAccountProposal>;
  delegator: TransactionSigner<TAccountDelegator>;
  /** The account to delegate voting power to */
  delegate: Address<TAccountDelegate>;
  /** Delegator's token account */
  delegatorTokenAccount: Address<TAccountDelegatorTokenAccount>;
  proposalId: DelegateVoteInstructionDataArgs['proposalId'];
  scope: DelegateVoteInstructionDataArgs['scope'];
  expiresAt: DelegateVoteInstructionDataArgs['expiresAt'];
};

export async function getDelegateVoteInstructionAsync<
  TAccountProposal extends string,
  TAccountDelegator extends string,
  TAccountDelegate extends string,
  TAccountDelegatorTokenAccount extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: DelegateVoteAsyncInput<
    TAccountProposal,
    TAccountDelegator,
    TAccountDelegate,
    TAccountDelegatorTokenAccount
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  DelegateVoteInstruction<
    TProgramAddress,
    TAccountProposal,
    TAccountDelegator,
    TAccountDelegate,
    TAccountDelegatorTokenAccount
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    proposal: { value: input.proposal ?? null, isWritable: true },
    delegator: { value: input.delegator ?? null, isWritable: true },
    delegate: { value: input.delegate ?? null, isWritable: false },
    delegatorTokenAccount: {
      value: input.delegatorTokenAccount ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.proposal.value) {
    accounts.proposal.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            103, 111, 118, 101, 114, 110, 97, 110, 99, 101, 95, 112, 114, 111,
            112, 111, 115, 97, 108,
          ])
        ),
        getU64Encoder().encode(expectSome(args.proposalId)),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.proposal),
      getAccountMeta(accounts.delegator),
      getAccountMeta(accounts.delegate),
      getAccountMeta(accounts.delegatorTokenAccount),
    ],
    programAddress,
    data: getDelegateVoteInstructionDataEncoder().encode(
      args as DelegateVoteInstructionDataArgs
    ),
  } as DelegateVoteInstruction<
    TProgramAddress,
    TAccountProposal,
    TAccountDelegator,
    TAccountDelegate,
    TAccountDelegatorTokenAccount
  >;

  return instruction;
}

export type DelegateVoteInput<
  TAccountProposal extends string = string,
  TAccountDelegator extends string = string,
  TAccountDelegate extends string = string,
  TAccountDelegatorTokenAccount extends string = string,
> = {
  /** The proposal to delegate for (or use 0 for all proposals) */
  proposal?: Address<TAccountProposal>;
  delegator: TransactionSigner<TAccountDelegator>;
  /** The account to delegate voting power to */
  delegate: Address<TAccountDelegate>;
  /** Delegator's token account */
  delegatorTokenAccount: Address<TAccountDelegatorTokenAccount>;
  proposalId: DelegateVoteInstructionDataArgs['proposalId'];
  scope: DelegateVoteInstructionDataArgs['scope'];
  expiresAt: DelegateVoteInstructionDataArgs['expiresAt'];
};

export function getDelegateVoteInstruction<
  TAccountProposal extends string,
  TAccountDelegator extends string,
  TAccountDelegate extends string,
  TAccountDelegatorTokenAccount extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: DelegateVoteInput<
    TAccountProposal,
    TAccountDelegator,
    TAccountDelegate,
    TAccountDelegatorTokenAccount
  >,
  config?: { programAddress?: TProgramAddress }
): DelegateVoteInstruction<
  TProgramAddress,
  TAccountProposal,
  TAccountDelegator,
  TAccountDelegate,
  TAccountDelegatorTokenAccount
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    proposal: { value: input.proposal ?? null, isWritable: true },
    delegator: { value: input.delegator ?? null, isWritable: true },
    delegate: { value: input.delegate ?? null, isWritable: false },
    delegatorTokenAccount: {
      value: input.delegatorTokenAccount ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.proposal),
      getAccountMeta(accounts.delegator),
      getAccountMeta(accounts.delegate),
      getAccountMeta(accounts.delegatorTokenAccount),
    ],
    programAddress,
    data: getDelegateVoteInstructionDataEncoder().encode(
      args as DelegateVoteInstructionDataArgs
    ),
  } as DelegateVoteInstruction<
    TProgramAddress,
    TAccountProposal,
    TAccountDelegator,
    TAccountDelegate,
    TAccountDelegatorTokenAccount
  >;

  return instruction;
}

export type ParsedDelegateVoteInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The proposal to delegate for (or use 0 for all proposals) */
    proposal?: TAccountMetas[0] | undefined;
    delegator: TAccountMetas[1];
    /** The account to delegate voting power to */
    delegate: TAccountMetas[2];
    /** Delegator's token account */
    delegatorTokenAccount: TAccountMetas[3];
  };
  data: DelegateVoteInstructionData;
};

export function parseDelegateVoteInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedDelegateVoteInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    throw new Error('[GHOSTSPEAK_MARKETPLACE_ERROR__INSUFFICIENT_ACCOUNTS] Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      proposal: getNextOptionalAccount(),
      delegator: getNextAccount(),
      delegate: getNextAccount(),
      delegatorTokenAccount: getNextAccount(),
    },
    data: getDelegateVoteInstructionDataDecoder().decode(instruction.data),
  };
}
