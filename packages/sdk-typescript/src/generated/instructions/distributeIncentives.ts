import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  transformEncoder,
  type Codec,
  type Decoder,
  type Encoder,
  type ReadonlyUint8Array
} from '@solana/codecs-core';
import {
  getUtf8Decoder,
  getUtf8Encoder
} from '@solana/codecs-strings';
import {
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder
} from '@solana/codecs-numbers';
import {
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder
} from '@solana/codecs-data-structures';
import {
  getAddressDecoder,
  getAddressEncoder,
  type Address
} from '@solana/addresses';
import {
  type IInstruction,
  type IInstructionWithData
} from '@solana/instructions';
import { AccountRole } from '@solana/instructions';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

export const DISTRIBUTE_INCENTIVES_DISCRIMINATOR = new Uint8Array([
  172, 97, 184, 220, 51, 131, 45, 160,
]);

export function getDistributeIncentivesDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    DISTRIBUTE_INCENTIVES_DISCRIMINATOR
  );
}

export type DistributeIncentivesInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly any[] = readonly any[],
> = {
  programAddress: Address<TProgram>;
  data: Uint8Array;
  accounts: TAccountMetas;
};

export type DistributeIncentivesInstructionData = {
  discriminator: ReadonlyUint8Array;
  agent: Address;
  incentiveType: string;
  amount: bigint;
};

export type DistributeIncentivesInstructionDataArgs = {
  agent: Address;
  incentiveType: string;
  amount: number | bigint;
};

export function getDistributeIncentivesInstructionDataEncoder(): Encoder<DistributeIncentivesInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['agent', getAddressEncoder()],
      [
        'incentiveType',
        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
      ],
      ['amount', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: DISTRIBUTE_INCENTIVES_DISCRIMINATOR,
    })
  );
}

export function getDistributeIncentivesInstructionDataDecoder(): Decoder<DistributeIncentivesInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['agent', getAddressDecoder()],
    ['incentiveType', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['amount', getU64Decoder()],
  ]);
}

export function getDistributeIncentivesInstructionDataCodec(): Codec<
  DistributeIncentivesInstructionDataArgs,
  DistributeIncentivesInstructionData
> {
  return combineCodec(
    getDistributeIncentivesInstructionDataEncoder(),
    getDistributeIncentivesInstructionDataDecoder()
  );
}

export type DistributeIncentivesInput<
  TAccountProgram extends string = string,
  TAccountIncentives extends string = string,
  TAccountDistributor extends string = string,
> = {
  program: Address<TAccountProgram>;
  incentives: Address<TAccountIncentives>;
  distributor: any;
  agent: DistributeIncentivesInstructionDataArgs['agent'];
  incentiveType: DistributeIncentivesInstructionDataArgs['incentiveType'];
  amount: DistributeIncentivesInstructionDataArgs['amount'];
};

export function getDistributeIncentivesInstruction<
  TAccountProgram extends string,
  TAccountIncentives extends string,
  TAccountDistributor extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: DistributeIncentivesInput<
    TAccountProgram,
    TAccountIncentives,
    TAccountDistributor
  >,
  config?: { programAddress?: TProgramAddress }
): DistributeIncentivesInstruction<TProgramAddress, any[]> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    program: { value: input.program ?? null, isWritable: true },
    incentives: { value: input.incentives ?? null, isWritable: true },
    distributor: { value: input.distributor ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.program),
      getAccountMeta(accounts.incentives),
      getAccountMeta(accounts.distributor),
    ],
    programAddress,
    data: getDistributeIncentivesInstructionDataEncoder().encode(
      args as DistributeIncentivesInstructionDataArgs
    ),
  } as DistributeIncentivesInstruction<TProgramAddress, any[]>;

  return instruction;
}

export type ParsedDistributeIncentivesInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly { address: Address; role: AccountRole }[] = readonly { address: Address; role: AccountRole }[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    program: TAccountMetas[0];
    incentives: TAccountMetas[1];
    distributor: TAccountMetas[2];
  };
  data: DistributeIncentivesInstructionData;
};

export function parseDistributeIncentivesInstruction<
  TProgram extends string,
  TAccountMetas extends readonly { address: Address; role: AccountRole }[],
>(
  instruction: { programAddress: TProgram } &
    { accounts: TAccountMetas } &
    { data: Uint8Array }
): ParsedDistributeIncentivesInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress as Address<TProgram>,
    accounts: {
      program: getNextAccount(),
      incentives: getNextAccount(),
      distributor: getNextAccount(),
    },
    data: getDistributeIncentivesInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
