/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const DISTRIBUTE_INCENTIVES_DISCRIMINATOR = new Uint8Array([
  172, 97, 184, 220, 51, 131, 45, 160,
]);

export function getDistributeIncentivesDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    DISTRIBUTE_INCENTIVES_DISCRIMINATOR
  );
}

export type DistributeIncentivesInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountProgram extends string | IAccountMeta<string> = string,
  TAccountIncentives extends string | IAccountMeta<string> = string,
  TAccountDistributor extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountProgram extends string
        ? WritableAccount<TAccountProgram>
        : TAccountProgram,
      TAccountIncentives extends string
        ? WritableAccount<TAccountIncentives>
        : TAccountIncentives,
      TAccountDistributor extends string
        ? ReadonlySignerAccount<TAccountDistributor> &
            IAccountSignerMeta<TAccountDistributor>
        : TAccountDistributor,
      ...TRemainingAccounts,
    ]
  >;

export interface DistributeIncentivesInstructionData {
  discriminator: ReadonlyUint8Array;
  agent: Address;
  incentiveType: string;
  amount: bigint;
}

export interface DistributeIncentivesInstructionDataArgs {
  agent: Address;
  incentiveType: string;
  amount: number | bigint;
}

export function getDistributeIncentivesInstructionDataEncoder(): Encoder<DistributeIncentivesInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['agent', getAddressEncoder()],
      [
        'incentiveType',
        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
      ],
      ['amount', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: DISTRIBUTE_INCENTIVES_DISCRIMINATOR,
    })
  );
}

export function getDistributeIncentivesInstructionDataDecoder(): Decoder<DistributeIncentivesInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['agent', getAddressDecoder()],
    ['incentiveType', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['amount', getU64Decoder()],
  ]);
}

export function getDistributeIncentivesInstructionDataCodec(): Codec<
  DistributeIncentivesInstructionDataArgs,
  DistributeIncentivesInstructionData
> {
  return combineCodec(
    getDistributeIncentivesInstructionDataEncoder(),
    getDistributeIncentivesInstructionDataDecoder()
  );
}

export interface DistributeIncentivesInput<
  TAccountProgram extends string = string,
  TAccountIncentives extends string = string,
  TAccountDistributor extends string = string,
> {
  program: Address<TAccountProgram>;
  incentives: Address<TAccountIncentives>;
  distributor: TransactionSigner<TAccountDistributor>;
  agent: DistributeIncentivesInstructionDataArgs['agent'];
  incentiveType: DistributeIncentivesInstructionDataArgs['incentiveType'];
  amount: DistributeIncentivesInstructionDataArgs['amount'];
}

export function getDistributeIncentivesInstruction<
  TAccountProgram extends string,
  TAccountIncentives extends string,
  TAccountDistributor extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: DistributeIncentivesInput<
    TAccountProgram,
    TAccountIncentives,
    TAccountDistributor
  >,
  config?: { programAddress?: TProgramAddress }
): DistributeIncentivesInstruction<
  TProgramAddress,
  TAccountProgram,
  TAccountIncentives,
  TAccountDistributor
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    program: { value: input.program ?? null, isWritable: true },
    incentives: { value: input.incentives ?? null, isWritable: true },
    distributor: { value: input.distributor ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.program),
      getAccountMeta(accounts.incentives),
      getAccountMeta(accounts.distributor),
    ],
    programAddress,
    data: getDistributeIncentivesInstructionDataEncoder().encode(
      args as DistributeIncentivesInstructionDataArgs
    ),
  } as DistributeIncentivesInstruction<
    TProgramAddress,
    TAccountProgram,
    TAccountIncentives,
    TAccountDistributor
  >;

  return instruction;
}

export interface ParsedDistributeIncentivesInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    program: TAccountMetas[0];
    incentives: TAccountMetas[1];
    distributor: TAccountMetas[2];
  };
  data: DistributeIncentivesInstructionData;
}

export function parseDistributeIncentivesInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedDistributeIncentivesInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    throw new Error('Invalid number of accounts provided');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      program: getNextAccount(),
      incentives: getNextAccount(),
      distributor: getNextAccount(),
    },
    data: getDistributeIncentivesInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
