import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  transformEncoder,
  type Codec,
  type Decoder,
  type Encoder,
  type ReadonlyUint8Array
} from '@solana/codecs-core';
import {
  getU32Decoder,
  getU32Encoder
} from '@solana/codecs-numbers';
import {
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder
} from '@solana/codecs-data-structures';
import {
  getAddressEncoder,
  getProgramDerivedAddress,
  type Address
} from '@solana/addresses';
import {
  type IInstruction,
  type IInstructionWithData
} from '@solana/instructions';
import { AccountRole } from '@solana/instructions';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

export const EXECUTE_BULK_DEAL_BATCH_DISCRIMINATOR = new Uint8Array([
  236, 222, 159, 76, 52, 79, 235, 109,
]);

export function getExecuteBulkDealBatchDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    EXECUTE_BULK_DEAL_BATCH_DISCRIMINATOR
  );
}

export type ExecuteBulkDealBatchInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly any[] = readonly any[],
> = {
  programAddress: Address<TProgram>;
  data: Uint8Array;
  accounts: TAccountMetas;
};

export type ExecuteBulkDealBatchInstructionData = {
  discriminator: ReadonlyUint8Array;
  batchSize: number;
};

export type ExecuteBulkDealBatchInstructionDataArgs = { batchSize: number };

export function getExecuteBulkDealBatchInstructionDataEncoder(): Encoder<ExecuteBulkDealBatchInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['batchSize', getU32Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: EXECUTE_BULK_DEAL_BATCH_DISCRIMINATOR,
    })
  );
}

export function getExecuteBulkDealBatchInstructionDataDecoder(): Decoder<ExecuteBulkDealBatchInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['batchSize', getU32Decoder()],
  ]);
}

export function getExecuteBulkDealBatchInstructionDataCodec(): Codec<
  ExecuteBulkDealBatchInstructionDataArgs,
  ExecuteBulkDealBatchInstructionData
> {
  return combineCodec(
    getExecuteBulkDealBatchInstructionDataEncoder(),
    getExecuteBulkDealBatchInstructionDataDecoder()
  );
}

export type ExecuteBulkDealBatchAsyncInput<
  TAccountDeal extends string = string,
  TAccountUserRegistry extends string = string,
  TAccountAuthority extends string = string,
  TAccountClock extends string = string,
> = {
  /** Bulk deal account with canonical bump validation */
  deal: Address<TAccountDeal>;
  /** User registry for rate limiting */
  userRegistry?: Address<TAccountUserRegistry>;
  /** Enhanced authority verification - only customer or agent */
  authority: any;
  /** Clock sysvar for rate limiting */
  clock?: Address<TAccountClock>;
  batchSize: ExecuteBulkDealBatchInstructionDataArgs['batchSize'];
};

export async function getExecuteBulkDealBatchInstructionAsync<
  TAccountDeal extends string,
  TAccountUserRegistry extends string,
  TAccountAuthority extends string,
  TAccountClock extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: ExecuteBulkDealBatchAsyncInput<
    TAccountDeal,
    TAccountUserRegistry,
    TAccountAuthority,
    TAccountClock
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<ExecuteBulkDealBatchInstruction<TProgramAddress, any[]>> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    deal: { value: input.deal ?? null, isWritable: true },
    userRegistry: { value: input.userRegistry ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: true },
    clock: { value: input.clock ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.userRegistry.value) {
    accounts.userRegistry.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            117, 115, 101, 114, 95, 114, 101, 103, 105, 115, 116, 114, 121,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.authority.value)),
      ],
    });
  }
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.deal),
      getAccountMeta(accounts.userRegistry),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.clock),
    ],
    programAddress,
    data: getExecuteBulkDealBatchInstructionDataEncoder().encode(
      args as ExecuteBulkDealBatchInstructionDataArgs
    ),
  } as ExecuteBulkDealBatchInstruction<TProgramAddress, any[]>;

  return instruction;
}

export type ExecuteBulkDealBatchInput<
  TAccountDeal extends string = string,
  TAccountUserRegistry extends string = string,
  TAccountAuthority extends string = string,
  TAccountClock extends string = string,
> = {
  /** Bulk deal account with canonical bump validation */
  deal: Address<TAccountDeal>;
  /** User registry for rate limiting */
  userRegistry: Address<TAccountUserRegistry>;
  /** Enhanced authority verification - only customer or agent */
  authority: any;
  /** Clock sysvar for rate limiting */
  clock?: Address<TAccountClock>;
  batchSize: ExecuteBulkDealBatchInstructionDataArgs['batchSize'];
};

export function getExecuteBulkDealBatchInstruction<
  TAccountDeal extends string,
  TAccountUserRegistry extends string,
  TAccountAuthority extends string,
  TAccountClock extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: ExecuteBulkDealBatchInput<
    TAccountDeal,
    TAccountUserRegistry,
    TAccountAuthority,
    TAccountClock
  >,
  config?: { programAddress?: TProgramAddress }
): ExecuteBulkDealBatchInstruction<TProgramAddress, any[]> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    deal: { value: input.deal ?? null, isWritable: true },
    userRegistry: { value: input.userRegistry ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: true },
    clock: { value: input.clock ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.deal),
      getAccountMeta(accounts.userRegistry),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.clock),
    ],
    programAddress,
    data: getExecuteBulkDealBatchInstructionDataEncoder().encode(
      args as ExecuteBulkDealBatchInstructionDataArgs
    ),
  } as ExecuteBulkDealBatchInstruction<TProgramAddress, any[]>;

  return instruction;
}

export type ParsedExecuteBulkDealBatchInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly { address: Address; role: AccountRole }[] = readonly { address: Address; role: AccountRole }[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Bulk deal account with canonical bump validation */
    deal: TAccountMetas[0];
    /** User registry for rate limiting */
    userRegistry: TAccountMetas[1];
    /** Enhanced authority verification - only customer or agent */
    authority: TAccountMetas[2];
    /** Clock sysvar for rate limiting */
    clock: TAccountMetas[3];
  };
  data: ExecuteBulkDealBatchInstructionData;
};

export function parseExecuteBulkDealBatchInstruction<
  TProgram extends string,
  TAccountMetas extends readonly { address: Address; role: AccountRole }[],
>(
  instruction: { programAddress: TProgram } &
    { accounts: TAccountMetas } &
    { data: Uint8Array }
): ParsedExecuteBulkDealBatchInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress as Address<TProgram>,
    accounts: {
      deal: getNextAccount(),
      userRegistry: getNextAccount(),
      authority: getNextAccount(),
      clock: getNextAccount(),
    },
    data: getExecuteBulkDealBatchInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
