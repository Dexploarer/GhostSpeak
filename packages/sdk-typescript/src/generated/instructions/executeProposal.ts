/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import {
  GHOSTSPEAK_MARKETPLACE_ERROR__INSUFFICIENT_ACCOUNTS,
  GHOSTSPEAK_MARKETPLACE_ERROR__INVALID_INSTRUCTION_DATA,
  GHOSTSPEAK_MARKETPLACE_ERROR__MISSING_REQUIRED_ACCOUNT,
  GHOSTSPEAK_MARKETPLACE_ERROR__INVALID_ACCOUNT,
  GHOSTSPEAK_MARKETPLACE_ERROR__INSTRUCTION_PARSING_FAILED,
  isGhostspeakMarketplaceError,
} from '../errors';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const EXECUTE_PROPOSAL_DISCRIMINATOR = new Uint8Array([
  186, 60, 116, 133, 108, 128, 111, 28,
]);

export function getExecuteProposalDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    EXECUTE_PROPOSAL_DISCRIMINATOR
  );
}

export type ExecuteProposalInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountProposal extends string | AccountMeta<string> = string,
  TAccountExecutor extends string | AccountMeta<string> = string,
  TAccountTargetProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountProposal extends string
        ? WritableAccount<TAccountProposal>
        : TAccountProposal,
      TAccountExecutor extends string
        ? WritableSignerAccount<TAccountExecutor> &
            AccountSignerMeta<TAccountExecutor>
        : TAccountExecutor,
      TAccountTargetProgram extends string
        ? ReadonlyAccount<TAccountTargetProgram>
        : TAccountTargetProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ExecuteProposalInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type ExecuteProposalInstructionDataArgs = {};

export function getExecuteProposalInstructionDataEncoder(): FixedSizeEncoder<ExecuteProposalInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: EXECUTE_PROPOSAL_DISCRIMINATOR })
  );
}

export function getExecuteProposalInstructionDataDecoder(): FixedSizeDecoder<ExecuteProposalInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getExecuteProposalInstructionDataCodec(): FixedSizeCodec<
  ExecuteProposalInstructionDataArgs,
  ExecuteProposalInstructionData
> {
  return combineCodec(
    getExecuteProposalInstructionDataEncoder(),
    getExecuteProposalInstructionDataDecoder()
  );
}

export type ExecuteProposalInput<
  TAccountProposal extends string = string,
  TAccountExecutor extends string = string,
  TAccountTargetProgram extends string = string,
> = {
  proposal: Address<TAccountProposal>;
  executor: TransactionSigner<TAccountExecutor>;
  /** Target program for proposal execution */
  targetProgram: Address<TAccountTargetProgram>;
};

export function getExecuteProposalInstruction<
  TAccountProposal extends string,
  TAccountExecutor extends string,
  TAccountTargetProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: ExecuteProposalInput<
    TAccountProposal,
    TAccountExecutor,
    TAccountTargetProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ExecuteProposalInstruction<
  TProgramAddress,
  TAccountProposal,
  TAccountExecutor,
  TAccountTargetProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    proposal: { value: input.proposal ?? null, isWritable: true },
    executor: { value: input.executor ?? null, isWritable: true },
    targetProgram: { value: input.targetProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.proposal),
      getAccountMeta(accounts.executor),
      getAccountMeta(accounts.targetProgram),
    ],
    programAddress,
    data: getExecuteProposalInstructionDataEncoder().encode({}),
  } as ExecuteProposalInstruction<
    TProgramAddress,
    TAccountProposal,
    TAccountExecutor,
    TAccountTargetProgram
  >;

  return instruction;
}

export type ParsedExecuteProposalInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    proposal: TAccountMetas[0];
    executor: TAccountMetas[1];
    /** Target program for proposal execution */
    targetProgram: TAccountMetas[2];
  };
  data: ExecuteProposalInstructionData;
};

export function parseExecuteProposalInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedExecuteProposalInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    throw new Error('[GHOSTSPEAK_MARKETPLACE_ERROR__INSUFFICIENT_ACCOUNTS] Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      proposal: getNextAccount(),
      executor: getNextAccount(),
      targetProgram: getNextAccount(),
    },
    data: getExecuteProposalInstructionDataDecoder().decode(instruction.data),
  };
}
