import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  transformEncoder,
  type Codec,
  type Decoder,
  type Encoder,
  type ReadonlyUint8Array
} from '@solana/codecs-core';
import {
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder
} from '@solana/codecs-data-structures';
import {
  type Address
} from '@solana/addresses';
import {
  type IInstruction,
  type IInstructionWithData
} from '@solana/instructions';
import { AccountRole } from '@solana/instructions';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getAuditContextDecoder,
  getAuditContextEncoder,
  type AuditContext,
  type AuditContextArgs,
} from '../types';
/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

export const EXPORT_AUDIT_CONTEXT_DISCRIMINATOR = new Uint8Array([
  146, 64, 145, 33, 190, 17, 82, 70,
]);

export function getExportAuditContextDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    EXPORT_AUDIT_CONTEXT_DISCRIMINATOR
  );
}

export type ExportAuditContextInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly any[] = readonly any[],
> = {
  programAddress: Address<TProgram>;
  data: Uint8Array;
  accounts: TAccountMetas;
};

export type ExportAuditContextInstructionData = {
  discriminator: ReadonlyUint8Array;
  data: AuditContext;
};

export type ExportAuditContextInstructionDataArgs = { data: AuditContextArgs };

export function getExportAuditContextInstructionDataEncoder(): Encoder<ExportAuditContextInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['data', getAuditContextEncoder()],
    ]),
    (value) => ({ ...value, discriminator: EXPORT_AUDIT_CONTEXT_DISCRIMINATOR })
  );
}

export function getExportAuditContextInstructionDataDecoder(): Decoder<ExportAuditContextInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['data', getAuditContextDecoder()],
  ]);
}

export function getExportAuditContextInstructionDataCodec(): Codec<
  ExportAuditContextInstructionDataArgs,
  ExportAuditContextInstructionData
> {
  return combineCodec(
    getExportAuditContextInstructionDataEncoder(),
    getExportAuditContextInstructionDataDecoder()
  );
}

export type ExportAuditContextInput<
  TAccountSystemProgram extends string = string,
> = {
  systemProgram?: Address<TAccountSystemProgram>;
  data: ExportAuditContextInstructionDataArgs['data'];
};

export function getExportAuditContextInstruction<
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: ExportAuditContextInput<TAccountSystemProgram>,
  config?: { programAddress?: TProgramAddress }
): ExportAuditContextInstruction<TProgramAddress, any[]> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [getAccountMeta(accounts.systemProgram)],
    programAddress,
    data: getExportAuditContextInstructionDataEncoder().encode(
      args as ExportAuditContextInstructionDataArgs
    ),
  } as ExportAuditContextInstruction<TProgramAddress, any[]>;

  return instruction;
}

export type ParsedExportAuditContextInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly { address: Address; role: AccountRole }[] = readonly { address: Address; role: AccountRole }[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    systemProgram: TAccountMetas[0];
  };
  data: ExportAuditContextInstructionData;
};

export function parseExportAuditContextInstruction<
  TProgram extends string,
  TAccountMetas extends readonly { address: Address; role: AccountRole }[],
>(
  instruction: { programAddress: TProgram } &
    { accounts: TAccountMetas } &
    { data: Uint8Array }
): ParsedExportAuditContextInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 1) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress as Address<TProgram>,
    accounts: {
      systemProgram: getNextAccount(),
    },
    data: getExportAuditContextInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
