/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getComplianceStatusDecoder,
  getComplianceStatusEncoder,
  type ComplianceStatus,
  type ComplianceStatusArgs,
} from '../types';

export const EXPORT_COMPLIANCE_STATUS_DISCRIMINATOR = new Uint8Array([
  25, 78, 239, 255, 21, 9, 170, 98,
]);

export function getExportComplianceStatusDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    EXPORT_COMPLIANCE_STATUS_DISCRIMINATOR
  );
}

export type ExportComplianceStatusInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ExportComplianceStatusInstructionData = {
  discriminator: ReadonlyUint8Array;
  data: ComplianceStatus;
};

export type ExportComplianceStatusInstructionDataArgs = {
  data: ComplianceStatusArgs;
};

export function getExportComplianceStatusInstructionDataEncoder(): Encoder<ExportComplianceStatusInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['data', getComplianceStatusEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: EXPORT_COMPLIANCE_STATUS_DISCRIMINATOR,
    })
  );
}

export function getExportComplianceStatusInstructionDataDecoder(): Decoder<ExportComplianceStatusInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['data', getComplianceStatusDecoder()],
  ]);
}

export function getExportComplianceStatusInstructionDataCodec(): Codec<
  ExportComplianceStatusInstructionDataArgs,
  ExportComplianceStatusInstructionData
> {
  return combineCodec(
    getExportComplianceStatusInstructionDataEncoder(),
    getExportComplianceStatusInstructionDataDecoder()
  );
}

export type ExportComplianceStatusInput<
  TAccountSystemProgram extends string = string,
> = {
  systemProgram?: Address<TAccountSystemProgram>;
  data: ExportComplianceStatusInstructionDataArgs['data'];
};

export function getExportComplianceStatusInstruction<
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: ExportComplianceStatusInput<TAccountSystemProgram>,
  config?: { programAddress?: TProgramAddress }
): ExportComplianceStatusInstruction<TProgramAddress, TAccountSystemProgram> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [getAccountMeta(accounts.systemProgram)],
    programAddress,
    data: getExportComplianceStatusInstructionDataEncoder().encode(
      args as ExportComplianceStatusInstructionDataArgs
    ),
  } as ExportComplianceStatusInstruction<
    TProgramAddress,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedExportComplianceStatusInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    systemProgram: TAccountMetas[0];
  };
  data: ExportComplianceStatusInstructionData;
};

export function parseExportComplianceStatusInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedExportComplianceStatusInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 1) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      systemProgram: getNextAccount(),
    },
    data: getExportComplianceStatusInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
