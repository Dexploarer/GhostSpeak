import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  transformEncoder,
  type Codec,
  type Decoder,
  type Encoder,
  type ReadonlyUint8Array
} from '@solana/codecs-core';
import {
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder
} from '@solana/codecs-data-structures';
import {
  type Address
} from '@solana/addresses';
import {
  type IInstruction,
  type IInstructionWithData
} from '@solana/instructions';
import { AccountRole } from '@solana/instructions';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getDynamicPricingConfigDecoder,
  getDynamicPricingConfigEncoder,
  type DynamicPricingConfig,
  type DynamicPricingConfigArgs,
} from '../types';
/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

export const EXPORT_DYNAMIC_PRICING_CONFIG_DISCRIMINATOR = new Uint8Array([
  212, 219, 242, 67, 179, 18, 238, 104,
]);

export function getExportDynamicPricingConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    EXPORT_DYNAMIC_PRICING_CONFIG_DISCRIMINATOR
  );
}

export type ExportDynamicPricingConfigInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly any[] = readonly any[],
> = {
  programAddress: Address<TProgram>;
  data: Uint8Array;
  accounts: TAccountMetas;
};

export type ExportDynamicPricingConfigInstructionData = {
  discriminator: ReadonlyUint8Array;
  data: DynamicPricingConfig;
};

export type ExportDynamicPricingConfigInstructionDataArgs = {
  data: DynamicPricingConfigArgs;
};

export function getExportDynamicPricingConfigInstructionDataEncoder(): Encoder<ExportDynamicPricingConfigInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['data', getDynamicPricingConfigEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: EXPORT_DYNAMIC_PRICING_CONFIG_DISCRIMINATOR,
    })
  );
}

export function getExportDynamicPricingConfigInstructionDataDecoder(): Decoder<ExportDynamicPricingConfigInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['data', getDynamicPricingConfigDecoder()],
  ]);
}

export function getExportDynamicPricingConfigInstructionDataCodec(): Codec<
  ExportDynamicPricingConfigInstructionDataArgs,
  ExportDynamicPricingConfigInstructionData
> {
  return combineCodec(
    getExportDynamicPricingConfigInstructionDataEncoder(),
    getExportDynamicPricingConfigInstructionDataDecoder()
  );
}

export type ExportDynamicPricingConfigInput<
  TAccountSystemProgram extends string = string,
> = {
  systemProgram?: Address<TAccountSystemProgram>;
  data: ExportDynamicPricingConfigInstructionDataArgs['data'];
};

export function getExportDynamicPricingConfigInstruction<
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: ExportDynamicPricingConfigInput<TAccountSystemProgram>,
  config?: { programAddress?: TProgramAddress }
): ExportDynamicPricingConfigInstruction<TProgramAddress, any[]> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [getAccountMeta(accounts.systemProgram)],
    programAddress,
    data: getExportDynamicPricingConfigInstructionDataEncoder().encode(
      args as ExportDynamicPricingConfigInstructionDataArgs
    ),
  } as ExportDynamicPricingConfigInstruction<TProgramAddress, any[]>;

  return instruction;
}

export type ParsedExportDynamicPricingConfigInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly { address: Address; role: AccountRole }[] = readonly { address: Address; role: AccountRole }[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    systemProgram: TAccountMetas[0];
  };
  data: ExportDynamicPricingConfigInstructionData;
};

export function parseExportDynamicPricingConfigInstruction<
  TProgram extends string,
  TAccountMetas extends readonly { address: Address; role: AccountRole }[],
>(
  instruction: { programAddress: TProgram } &
    { accounts: TAccountMetas } &
    { data: Uint8Array }
): ParsedExportDynamicPricingConfigInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 1) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress as Address<TProgram>,
    accounts: {
      systemProgram: getNextAccount(),
    },
    data: getExportDynamicPricingConfigInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
