import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  transformEncoder,
  type Codec,
  type Decoder,
  type Encoder,
  type ReadonlyUint8Array
} from '@solana/codecs-core';
import {
  getUtf8Decoder,
  getUtf8Encoder
} from '@solana/codecs-strings';
import {
  getU32Decoder,
  getU32Encoder
} from '@solana/codecs-numbers';
import {
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder
} from '@solana/codecs-data-structures';
import {
  getAddressEncoder,
  getProgramDerivedAddress,
  type Address
} from '@solana/addresses';
import {
  type IInstruction,
  type IInstructionWithData
} from '@solana/instructions';
import { AccountRole } from '@solana/instructions';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

export const FILE_DISPUTE_DISCRIMINATOR = new Uint8Array([
  210, 63, 221, 114, 212, 97, 195, 156,
]);

export function getFileDisputeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    FILE_DISPUTE_DISCRIMINATOR
  );
}

export type FileDisputeInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly any[] = readonly any[],
> = {
  programAddress: Address<TProgram>;
  data: Uint8Array;
  accounts: TAccountMetas;
};

export type FileDisputeInstructionData = {
  discriminator: ReadonlyUint8Array;
  reason: string;
};

export type FileDisputeInstructionDataArgs = { reason: string };

export function getFileDisputeInstructionDataEncoder(): Encoder<FileDisputeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['reason', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ]),
    (value) => ({ ...value, discriminator: FILE_DISPUTE_DISCRIMINATOR })
  );
}

export function getFileDisputeInstructionDataDecoder(): Decoder<FileDisputeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['reason', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getFileDisputeInstructionDataCodec(): Codec<
  FileDisputeInstructionDataArgs,
  FileDisputeInstructionData
> {
  return combineCodec(
    getFileDisputeInstructionDataEncoder(),
    getFileDisputeInstructionDataDecoder()
  );
}

export type FileDisputeAsyncInput<
  TAccountDispute extends string = string,
  TAccountTransaction extends string = string,
  TAccountUserRegistry extends string = string,
  TAccountComplainant extends string = string,
  TAccountRespondent extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountClock extends string = string,
> = {
  /** Dispute account with collision prevention */
  dispute?: Address<TAccountDispute>;
  /**
   * Transaction account with enhanced validation
   * Transaction info for key reference
   */
  transaction: Address<TAccountTransaction>;
  /** User registry for rate limiting and spam prevention */
  userRegistry?: Address<TAccountUserRegistry>;
  /** Enhanced complainant verification */
  complainant: any;
  /** Enhanced respondent validation */
  respondent: Address<TAccountRespondent>;
  /** System program for account creation */
  systemProgram?: Address<TAccountSystemProgram>;
  /** Clock sysvar for timestamp validation */
  clock?: Address<TAccountClock>;
  reason: FileDisputeInstructionDataArgs['reason'];
};

export async function getFileDisputeInstructionAsync<
  TAccountDispute extends string,
  TAccountTransaction extends string,
  TAccountUserRegistry extends string,
  TAccountComplainant extends string,
  TAccountRespondent extends string,
  TAccountSystemProgram extends string,
  TAccountClock extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: FileDisputeAsyncInput<
    TAccountDispute,
    TAccountTransaction,
    TAccountUserRegistry,
    TAccountComplainant,
    TAccountRespondent,
    TAccountSystemProgram,
    TAccountClock
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<FileDisputeInstruction<TProgramAddress, any[]>> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    dispute: { value: input.dispute ?? null, isWritable: true },
    transaction: { value: input.transaction ?? null, isWritable: false },
    userRegistry: { value: input.userRegistry ?? null, isWritable: true },
    complainant: { value: input.complainant ?? null, isWritable: true },
    respondent: { value: input.respondent ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    clock: { value: input.clock ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.dispute.value) {
    accounts.dispute.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([100, 105, 115, 112, 117, 116, 101])
        ),
        getAddressEncoder().encode(expectAddress(accounts.transaction.value)),
        getAddressEncoder().encode(expectAddress(accounts.complainant.value)),
        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()).encode(
          expectSome(args.reason)
        ),
      ],
    });
  }
  if (!accounts.userRegistry.value) {
    accounts.userRegistry.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            117, 115, 101, 114, 95, 114, 101, 103, 105, 115, 116, 114, 121,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.complainant.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.dispute),
      getAccountMeta(accounts.transaction),
      getAccountMeta(accounts.userRegistry),
      getAccountMeta(accounts.complainant),
      getAccountMeta(accounts.respondent),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.clock),
    ],
    programAddress,
    data: getFileDisputeInstructionDataEncoder().encode(
      args as FileDisputeInstructionDataArgs
    ),
  } as FileDisputeInstruction<TProgramAddress, any[]>;

  return instruction;
}

export type FileDisputeInput<
  TAccountDispute extends string = string,
  TAccountTransaction extends string = string,
  TAccountUserRegistry extends string = string,
  TAccountComplainant extends string = string,
  TAccountRespondent extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountClock extends string = string,
> = {
  /** Dispute account with collision prevention */
  dispute: Address<TAccountDispute>;
  /**
   * Transaction account with enhanced validation
   * Transaction info for key reference
   */
  transaction: Address<TAccountTransaction>;
  /** User registry for rate limiting and spam prevention */
  userRegistry: Address<TAccountUserRegistry>;
  /** Enhanced complainant verification */
  complainant: any;
  /** Enhanced respondent validation */
  respondent: Address<TAccountRespondent>;
  /** System program for account creation */
  systemProgram?: Address<TAccountSystemProgram>;
  /** Clock sysvar for timestamp validation */
  clock?: Address<TAccountClock>;
  reason: FileDisputeInstructionDataArgs['reason'];
};

export function getFileDisputeInstruction<
  TAccountDispute extends string,
  TAccountTransaction extends string,
  TAccountUserRegistry extends string,
  TAccountComplainant extends string,
  TAccountRespondent extends string,
  TAccountSystemProgram extends string,
  TAccountClock extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: FileDisputeInput<
    TAccountDispute,
    TAccountTransaction,
    TAccountUserRegistry,
    TAccountComplainant,
    TAccountRespondent,
    TAccountSystemProgram,
    TAccountClock
  >,
  config?: { programAddress?: TProgramAddress }
): FileDisputeInstruction<TProgramAddress, any[]> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    dispute: { value: input.dispute ?? null, isWritable: true },
    transaction: { value: input.transaction ?? null, isWritable: false },
    userRegistry: { value: input.userRegistry ?? null, isWritable: true },
    complainant: { value: input.complainant ?? null, isWritable: true },
    respondent: { value: input.respondent ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    clock: { value: input.clock ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.dispute),
      getAccountMeta(accounts.transaction),
      getAccountMeta(accounts.userRegistry),
      getAccountMeta(accounts.complainant),
      getAccountMeta(accounts.respondent),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.clock),
    ],
    programAddress,
    data: getFileDisputeInstructionDataEncoder().encode(
      args as FileDisputeInstructionDataArgs
    ),
  } as FileDisputeInstruction<TProgramAddress, any[]>;

  return instruction;
}

export type ParsedFileDisputeInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly { address: Address; role: AccountRole }[] = readonly { address: Address; role: AccountRole }[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Dispute account with collision prevention */
    dispute: TAccountMetas[0];
    /**
     * Transaction account with enhanced validation
     * Transaction info for key reference
     */

    transaction: TAccountMetas[1];
    /** User registry for rate limiting and spam prevention */
    userRegistry: TAccountMetas[2];
    /** Enhanced complainant verification */
    complainant: TAccountMetas[3];
    /** Enhanced respondent validation */
    respondent: TAccountMetas[4];
    /** System program for account creation */
    systemProgram: TAccountMetas[5];
    /** Clock sysvar for timestamp validation */
    clock: TAccountMetas[6];
  };
  data: FileDisputeInstructionData;
};

export function parseFileDisputeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly { address: Address; role: AccountRole }[],
>(
  instruction: { programAddress: TProgram } &
    { accounts: TAccountMetas } &
    { data: Uint8Array }
): ParsedFileDisputeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress as Address<TProgram>,
    accounts: {
      dispute: getNextAccount(),
      transaction: getNextAccount(),
      userRegistry: getNextAccount(),
      complainant: getNextAccount(),
      respondent: getNextAccount(),
      systemProgram: getNextAccount(),
      clock: getNextAccount(),
    },
    data: getFileDisputeInstructionDataDecoder().decode(instruction.data),
  };
}
