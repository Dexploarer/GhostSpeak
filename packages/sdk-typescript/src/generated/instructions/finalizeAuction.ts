/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const FINALIZE_AUCTION_DISCRIMINATOR = new Uint8Array([
  220, 209, 175, 193, 57, 132, 241, 168,
]);

export function getFinalizeAuctionDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    FINALIZE_AUCTION_DISCRIMINATOR
  );
}

export type FinalizeAuctionInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountAuction extends string | IAccountMeta<string> = string,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountClock extends
    | string
    | IAccountMeta<string> = 'SysvarC1ock11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAuction extends string
        ? WritableAccount<TAccountAuction>
        : TAccountAuction,
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountClock extends string
        ? ReadonlyAccount<TAccountClock>
        : TAccountClock,
      ...TRemainingAccounts,
    ]
  >;

export interface FinalizeAuctionInstructionData {
  discriminator: ReadonlyUint8Array;
}

export interface FinalizeAuctionInstructionDataArgs {}

export function getFinalizeAuctionInstructionDataEncoder(): Encoder<FinalizeAuctionInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: FINALIZE_AUCTION_DISCRIMINATOR })
  );
}

export function getFinalizeAuctionInstructionDataDecoder(): Decoder<FinalizeAuctionInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getFinalizeAuctionInstructionDataCodec(): Codec<
  FinalizeAuctionInstructionDataArgs,
  FinalizeAuctionInstructionData
> {
  return combineCodec(
    getFinalizeAuctionInstructionDataEncoder(),
    getFinalizeAuctionInstructionDataDecoder()
  );
}

export interface FinalizeAuctionInput<
  TAccountAuction extends string = string,
  TAccountAuthority extends string = string,
  TAccountClock extends string = string,
> {
  /** Auction account with canonical validation */
  auction: Address<TAccountAuction>;
  /** Enhanced authority verification - only creator or protocol admin */
  authority: TransactionSigner<TAccountAuthority>;
  /** Clock sysvar for timestamp validation */
  clock?: Address<TAccountClock>;
}

export function getFinalizeAuctionInstruction<
  TAccountAuction extends string,
  TAccountAuthority extends string,
  TAccountClock extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: FinalizeAuctionInput<
    TAccountAuction,
    TAccountAuthority,
    TAccountClock
  >,
  config?: { programAddress?: TProgramAddress }
): FinalizeAuctionInstruction<
  TProgramAddress,
  TAccountAuction,
  TAccountAuthority,
  TAccountClock
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    auction: { value: input.auction ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: true },
    clock: { value: input.clock ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.auction),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.clock),
    ],
    programAddress,
    data: getFinalizeAuctionInstructionDataEncoder().encode({}),
  } as FinalizeAuctionInstruction<
    TProgramAddress,
    TAccountAuction,
    TAccountAuthority,
    TAccountClock
  >;

  return instruction;
}

export interface ParsedFinalizeAuctionInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    /** Auction account with canonical validation */
    auction: TAccountMetas[0];
    /** Enhanced authority verification - only creator or protocol admin */
    authority: TAccountMetas[1];
    /** Clock sysvar for timestamp validation */
    clock: TAccountMetas[2];
  };
  data: FinalizeAuctionInstructionData;
}

export function parseFinalizeAuctionInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedFinalizeAuctionInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    throw new Error('Invalid number of accounts provided');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      auction: getNextAccount(),
      authority: getNextAccount(),
      clock: getNextAccount(),
    },
    data: getFinalizeAuctionInstructionDataDecoder().decode(instruction.data),
  };
}
