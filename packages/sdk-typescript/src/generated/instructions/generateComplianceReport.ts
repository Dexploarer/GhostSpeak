/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import {
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
import {
  getReportTypeDecoder,
  getReportTypeEncoder,
  type ReportType,
  type ReportTypeArgs,
} from '../types';

export const GENERATE_COMPLIANCE_REPORT_DISCRIMINATOR = new Uint8Array([
  213, 97, 79, 234, 22, 228, 14, 32,
]);

export function getGenerateComplianceReportDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    GENERATE_COMPLIANCE_REPORT_DISCRIMINATOR
  );
}

export type GenerateComplianceReportInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountReport extends string | IAccountMeta<string> = string,
  TAccountAuditTrail extends string | IAccountMeta<string> = string,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountReport extends string
        ? WritableAccount<TAccountReport>
        : TAccountReport,
      TAccountAuditTrail extends string
        ? WritableAccount<TAccountAuditTrail>
        : TAccountAuditTrail,
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface GenerateComplianceReportInstructionData {
  discriminator: ReadonlyUint8Array;
  reportId: bigint;
  reportType: ReportType;
  dateRangeStart: bigint;
  dateRangeEnd: bigint;
}

export interface GenerateComplianceReportInstructionDataArgs {
  reportId: number | bigint;
  reportType: ReportTypeArgs;
  dateRangeStart: number | bigint;
  dateRangeEnd: number | bigint;
}

export function getGenerateComplianceReportInstructionDataEncoder(): Encoder<GenerateComplianceReportInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['reportId', getU64Encoder()],
      ['reportType', getReportTypeEncoder()],
      ['dateRangeStart', getI64Encoder()],
      ['dateRangeEnd', getI64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: GENERATE_COMPLIANCE_REPORT_DISCRIMINATOR,
    })
  );
}

export function getGenerateComplianceReportInstructionDataDecoder(): Decoder<GenerateComplianceReportInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['reportId', getU64Decoder()],
    ['reportType', getReportTypeDecoder()],
    ['dateRangeStart', getI64Decoder()],
    ['dateRangeEnd', getI64Decoder()],
  ]);
}

export function getGenerateComplianceReportInstructionDataCodec(): Codec<
  GenerateComplianceReportInstructionDataArgs,
  GenerateComplianceReportInstructionData
> {
  return combineCodec(
    getGenerateComplianceReportInstructionDataEncoder(),
    getGenerateComplianceReportInstructionDataDecoder()
  );
}

export interface GenerateComplianceReportAsyncInput<
  TAccountReport extends string = string,
  TAccountAuditTrail extends string = string,
  TAccountAuthority extends string = string,
  TAccountSystemProgram extends string = string,
> {
  report?: Address<TAccountReport>;
  /** Audit trail for the entity */
  auditTrail: Address<TAccountAuditTrail>;
  authority: TransactionSigner<TAccountAuthority>;
  systemProgram?: Address<TAccountSystemProgram>;
  reportId: GenerateComplianceReportInstructionDataArgs['reportId'];
  reportType: GenerateComplianceReportInstructionDataArgs['reportType'];
  dateRangeStart: GenerateComplianceReportInstructionDataArgs['dateRangeStart'];
  dateRangeEnd: GenerateComplianceReportInstructionDataArgs['dateRangeEnd'];
}

export async function getGenerateComplianceReportInstructionAsync<
  TAccountReport extends string,
  TAccountAuditTrail extends string,
  TAccountAuthority extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: GenerateComplianceReportAsyncInput<
    TAccountReport,
    TAccountAuditTrail,
    TAccountAuthority,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  GenerateComplianceReportInstruction<
    TProgramAddress,
    TAccountReport,
    TAccountAuditTrail,
    TAccountAuthority,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    report: { value: input.report ?? null, isWritable: true },
    auditTrail: { value: input.auditTrail ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.report.value) {
    accounts.report.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            99, 111, 109, 112, 108, 105, 97, 110, 99, 101, 95, 114, 101, 112,
            111, 114, 116,
          ])
        ),
        getU64Encoder().encode(expectSome(args.reportId)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.report),
      getAccountMeta(accounts.auditTrail),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getGenerateComplianceReportInstructionDataEncoder().encode(
      args as GenerateComplianceReportInstructionDataArgs
    ),
  } as GenerateComplianceReportInstruction<
    TProgramAddress,
    TAccountReport,
    TAccountAuditTrail,
    TAccountAuthority,
    TAccountSystemProgram
  >;

  return instruction;
}

export interface GenerateComplianceReportInput<
  TAccountReport extends string = string,
  TAccountAuditTrail extends string = string,
  TAccountAuthority extends string = string,
  TAccountSystemProgram extends string = string,
> {
  report: Address<TAccountReport>;
  /** Audit trail for the entity */
  auditTrail: Address<TAccountAuditTrail>;
  authority: TransactionSigner<TAccountAuthority>;
  systemProgram?: Address<TAccountSystemProgram>;
  reportId: GenerateComplianceReportInstructionDataArgs['reportId'];
  reportType: GenerateComplianceReportInstructionDataArgs['reportType'];
  dateRangeStart: GenerateComplianceReportInstructionDataArgs['dateRangeStart'];
  dateRangeEnd: GenerateComplianceReportInstructionDataArgs['dateRangeEnd'];
}

export function getGenerateComplianceReportInstruction<
  TAccountReport extends string,
  TAccountAuditTrail extends string,
  TAccountAuthority extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: GenerateComplianceReportInput<
    TAccountReport,
    TAccountAuditTrail,
    TAccountAuthority,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): GenerateComplianceReportInstruction<
  TProgramAddress,
  TAccountReport,
  TAccountAuditTrail,
  TAccountAuthority,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    report: { value: input.report ?? null, isWritable: true },
    auditTrail: { value: input.auditTrail ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.report),
      getAccountMeta(accounts.auditTrail),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getGenerateComplianceReportInstructionDataEncoder().encode(
      args as GenerateComplianceReportInstructionDataArgs
    ),
  } as GenerateComplianceReportInstruction<
    TProgramAddress,
    TAccountReport,
    TAccountAuditTrail,
    TAccountAuthority,
    TAccountSystemProgram
  >;

  return instruction;
}

export interface ParsedGenerateComplianceReportInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    report: TAccountMetas[0];
    /** Audit trail for the entity */
    auditTrail: TAccountMetas[1];
    authority: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
  };
  data: GenerateComplianceReportInstructionData;
}

export function parseGenerateComplianceReportInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedGenerateComplianceReportInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      report: getNextAccount(),
      auditTrail: getNextAccount(),
      authority: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getGenerateComplianceReportInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
