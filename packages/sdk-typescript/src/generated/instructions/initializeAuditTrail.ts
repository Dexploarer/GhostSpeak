/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
import {
  getAuditConfigDecoder,
  getAuditConfigEncoder,
  type AuditConfig,
  type AuditConfigArgs,
} from '../types';

export const INITIALIZE_AUDIT_TRAIL_DISCRIMINATOR = new Uint8Array([
  145, 182, 236, 249, 212, 17, 175, 161,
]);

export function getInitializeAuditTrailDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_AUDIT_TRAIL_DISCRIMINATOR
  );
}

export type InitializeAuditTrailInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountAuditTrail extends string | IAccountMeta<string> = string,
  TAccountEntity extends string | IAccountMeta<string> = string,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAuditTrail extends string
        ? WritableAccount<TAccountAuditTrail>
        : TAccountAuditTrail,
      TAccountEntity extends string
        ? ReadonlyAccount<TAccountEntity>
        : TAccountEntity,
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeAuditTrailInstructionData = {
  discriminator: ReadonlyUint8Array;
  entityType: string;
  config: AuditConfig;
};

export type InitializeAuditTrailInstructionDataArgs = {
  entityType: string;
  config: AuditConfigArgs;
};

export function getInitializeAuditTrailInstructionDataEncoder(): Encoder<InitializeAuditTrailInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['entityType', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['config', getAuditConfigEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: INITIALIZE_AUDIT_TRAIL_DISCRIMINATOR,
    })
  );
}

export function getInitializeAuditTrailInstructionDataDecoder(): Decoder<InitializeAuditTrailInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['entityType', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['config', getAuditConfigDecoder()],
  ]);
}

export function getInitializeAuditTrailInstructionDataCodec(): Codec<
  InitializeAuditTrailInstructionDataArgs,
  InitializeAuditTrailInstructionData
> {
  return combineCodec(
    getInitializeAuditTrailInstructionDataEncoder(),
    getInitializeAuditTrailInstructionDataDecoder()
  );
}

export type InitializeAuditTrailAsyncInput<
  TAccountAuditTrail extends string = string,
  TAccountEntity extends string = string,
  TAccountAuthority extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  auditTrail?: Address<TAccountAuditTrail>;
  /** Entity being audited */
  entity: Address<TAccountEntity>;
  authority: TransactionSigner<TAccountAuthority>;
  systemProgram?: Address<TAccountSystemProgram>;
  entityType: InitializeAuditTrailInstructionDataArgs['entityType'];
  config: InitializeAuditTrailInstructionDataArgs['config'];
};

export async function getInitializeAuditTrailInstructionAsync<
  TAccountAuditTrail extends string,
  TAccountEntity extends string,
  TAccountAuthority extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: InitializeAuditTrailAsyncInput<
    TAccountAuditTrail,
    TAccountEntity,
    TAccountAuthority,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitializeAuditTrailInstruction<
    TProgramAddress,
    TAccountAuditTrail,
    TAccountEntity,
    TAccountAuthority,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    auditTrail: { value: input.auditTrail ?? null, isWritable: true },
    entity: { value: input.entity ?? null, isWritable: false },
    authority: { value: input.authority ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.auditTrail.value) {
    accounts.auditTrail.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([97, 117, 100, 105, 116, 95, 116, 114, 97, 105, 108])
        ),
        getAddressEncoder().encode(expectAddress(accounts.entity.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.auditTrail),
      getAccountMeta(accounts.entity),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeAuditTrailInstructionDataEncoder().encode(
      args as InitializeAuditTrailInstructionDataArgs
    ),
  } as InitializeAuditTrailInstruction<
    TProgramAddress,
    TAccountAuditTrail,
    TAccountEntity,
    TAccountAuthority,
    TAccountSystemProgram
  >;

  return instruction;
}

export type InitializeAuditTrailInput<
  TAccountAuditTrail extends string = string,
  TAccountEntity extends string = string,
  TAccountAuthority extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  auditTrail: Address<TAccountAuditTrail>;
  /** Entity being audited */
  entity: Address<TAccountEntity>;
  authority: TransactionSigner<TAccountAuthority>;
  systemProgram?: Address<TAccountSystemProgram>;
  entityType: InitializeAuditTrailInstructionDataArgs['entityType'];
  config: InitializeAuditTrailInstructionDataArgs['config'];
};

export function getInitializeAuditTrailInstruction<
  TAccountAuditTrail extends string,
  TAccountEntity extends string,
  TAccountAuthority extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: InitializeAuditTrailInput<
    TAccountAuditTrail,
    TAccountEntity,
    TAccountAuthority,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeAuditTrailInstruction<
  TProgramAddress,
  TAccountAuditTrail,
  TAccountEntity,
  TAccountAuthority,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    auditTrail: { value: input.auditTrail ?? null, isWritable: true },
    entity: { value: input.entity ?? null, isWritable: false },
    authority: { value: input.authority ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.auditTrail),
      getAccountMeta(accounts.entity),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeAuditTrailInstructionDataEncoder().encode(
      args as InitializeAuditTrailInstructionDataArgs
    ),
  } as InitializeAuditTrailInstruction<
    TProgramAddress,
    TAccountAuditTrail,
    TAccountEntity,
    TAccountAuthority,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedInitializeAuditTrailInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    auditTrail: TAccountMetas[0];
    /** Entity being audited */
    entity: TAccountMetas[1];
    authority: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
  };
  data: InitializeAuditTrailInstructionData;
};

export function parseInitializeAuditTrailInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedInitializeAuditTrailInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      auditTrail: getNextAccount(),
      entity: getNextAccount(),
      authority: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeAuditTrailInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
