/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import {
  GHOSTSPEAK_MARKETPLACE_ERROR__INSUFFICIENT_ACCOUNTS,
  GHOSTSPEAK_MARKETPLACE_ERROR__INVALID_INSTRUCTION_DATA,
  GHOSTSPEAK_MARKETPLACE_ERROR__MISSING_REQUIRED_ACCOUNT,
  GHOSTSPEAK_MARKETPLACE_ERROR__INVALID_ACCOUNT,
  GHOSTSPEAK_MARKETPLACE_ERROR__INSTRUCTION_PARSING_FAILED,
  isGhostspeakMarketplaceError,
} from '../errors';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const INITIALIZE_CONFIDENTIAL_TRANSFER_MINT_DISCRIMINATOR =
  new Uint8Array([154, 47, 116, 20, 167, 57, 114, 41]);

export function getInitializeConfidentialTransferMintDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_CONFIDENTIAL_TRANSFER_MINT_DISCRIMINATOR
  );
}

export type InitializeConfidentialTransferMintInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountMint extends string | AccountMeta<string> = string,
  TAccountAgent extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountMint extends string
        ? WritableAccount<TAccountMint>
        : TAccountMint,
      TAccountAgent extends string
        ? ReadonlyAccount<TAccountAgent>
        : TAccountAgent,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeConfidentialTransferMintInstructionData = {
  discriminator: ReadonlyUint8Array;
  autoApproveNewAccounts: boolean;
  auditorElgamalPubkey: Option<ReadonlyUint8Array>;
};

export type InitializeConfidentialTransferMintInstructionDataArgs = {
  autoApproveNewAccounts: boolean;
  auditorElgamalPubkey: OptionOrNullable<ReadonlyUint8Array>;
};

export function getInitializeConfidentialTransferMintInstructionDataEncoder(): Encoder<InitializeConfidentialTransferMintInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['autoApproveNewAccounts', getBooleanEncoder()],
      [
        'auditorElgamalPubkey',
        getOptionEncoder(fixEncoderSize(getBytesEncoder(), 32)),
      ],
    ]),
    (value) => ({
      ...value,
      discriminator: INITIALIZE_CONFIDENTIAL_TRANSFER_MINT_DISCRIMINATOR,
    })
  );
}

export function getInitializeConfidentialTransferMintInstructionDataDecoder(): Decoder<InitializeConfidentialTransferMintInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['autoApproveNewAccounts', getBooleanDecoder()],
    [
      'auditorElgamalPubkey',
      getOptionDecoder(fixDecoderSize(getBytesDecoder(), 32)),
    ],
  ]);
}

export function getInitializeConfidentialTransferMintInstructionDataCodec(): Codec<
  InitializeConfidentialTransferMintInstructionDataArgs,
  InitializeConfidentialTransferMintInstructionData
> {
  return combineCodec(
    getInitializeConfidentialTransferMintInstructionDataEncoder(),
    getInitializeConfidentialTransferMintInstructionDataDecoder()
  );
}

export type InitializeConfidentialTransferMintAsyncInput<
  TAccountAuthority extends string = string,
  TAccountMint extends string = string,
  TAccountAgent extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  authority: TransactionSigner<TAccountAuthority>;
  /** The mint to initialize confidential transfers for */
  mint: Address<TAccountMint>;
  /** The agent that owns this mint */
  agent?: Address<TAccountAgent>;
  /** Token-2022 program */
  tokenProgram?: Address<TAccountTokenProgram>;
  autoApproveNewAccounts: InitializeConfidentialTransferMintInstructionDataArgs['autoApproveNewAccounts'];
  auditorElgamalPubkey: InitializeConfidentialTransferMintInstructionDataArgs['auditorElgamalPubkey'];
};

export async function getInitializeConfidentialTransferMintInstructionAsync<
  TAccountAuthority extends string,
  TAccountMint extends string,
  TAccountAgent extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: InitializeConfidentialTransferMintAsyncInput<
    TAccountAuthority,
    TAccountMint,
    TAccountAgent,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitializeConfidentialTransferMintInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountMint,
    TAccountAgent,
    TAccountTokenProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: true },
    agent: { value: input.agent ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.agent.value) {
    accounts.agent.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([97, 103, 101, 110, 116])),
        getAddressEncoder().encode(expectAddress(accounts.authority.value)),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.agent),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getInitializeConfidentialTransferMintInstructionDataEncoder().encode(
      args as InitializeConfidentialTransferMintInstructionDataArgs
    ),
  } as InitializeConfidentialTransferMintInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountMint,
    TAccountAgent,
    TAccountTokenProgram
  >;

  return instruction;
}

export type InitializeConfidentialTransferMintInput<
  TAccountAuthority extends string = string,
  TAccountMint extends string = string,
  TAccountAgent extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  authority: TransactionSigner<TAccountAuthority>;
  /** The mint to initialize confidential transfers for */
  mint: Address<TAccountMint>;
  /** The agent that owns this mint */
  agent: Address<TAccountAgent>;
  /** Token-2022 program */
  tokenProgram?: Address<TAccountTokenProgram>;
  autoApproveNewAccounts: InitializeConfidentialTransferMintInstructionDataArgs['autoApproveNewAccounts'];
  auditorElgamalPubkey: InitializeConfidentialTransferMintInstructionDataArgs['auditorElgamalPubkey'];
};

export function getInitializeConfidentialTransferMintInstruction<
  TAccountAuthority extends string,
  TAccountMint extends string,
  TAccountAgent extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: InitializeConfidentialTransferMintInput<
    TAccountAuthority,
    TAccountMint,
    TAccountAgent,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeConfidentialTransferMintInstruction<
  TProgramAddress,
  TAccountAuthority,
  TAccountMint,
  TAccountAgent,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: true },
    agent: { value: input.agent ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.agent),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getInitializeConfidentialTransferMintInstructionDataEncoder().encode(
      args as InitializeConfidentialTransferMintInstructionDataArgs
    ),
  } as InitializeConfidentialTransferMintInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountMint,
    TAccountAgent,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedInitializeConfidentialTransferMintInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    authority: TAccountMetas[0];
    /** The mint to initialize confidential transfers for */
    mint: TAccountMetas[1];
    /** The agent that owns this mint */
    agent: TAccountMetas[2];
    /** Token-2022 program */
    tokenProgram: TAccountMetas[3];
  };
  data: InitializeConfidentialTransferMintInstructionData;
};

export function parseInitializeConfidentialTransferMintInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitializeConfidentialTransferMintInstruction<
  TProgram,
  TAccountMetas
> {
  if (instruction.accounts.length < 4) {
    throw new Error('[GHOSTSPEAK_MARKETPLACE_ERROR__INSUFFICIENT_ACCOUNTS] Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authority: getNextAccount(),
      mint: getNextAccount(),
      agent: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getInitializeConfidentialTransferMintInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
