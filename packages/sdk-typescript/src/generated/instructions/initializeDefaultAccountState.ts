/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import {
  GHOSTSPEAK_MARKETPLACE_ERROR__INSUFFICIENT_ACCOUNTS,
  GHOSTSPEAK_MARKETPLACE_ERROR__INVALID_INSTRUCTION_DATA,
  GHOSTSPEAK_MARKETPLACE_ERROR__MISSING_REQUIRED_ACCOUNT,
  GHOSTSPEAK_MARKETPLACE_ERROR__INVALID_ACCOUNT,
  GHOSTSPEAK_MARKETPLACE_ERROR__INSTRUCTION_PARSING_FAILED,
  isGhostspeakMarketplaceError,
} from '../errors';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
import {
  getAccountStateDecoder,
  getAccountStateEncoder,
  type AccountState,
  type AccountStateArgs,
} from '../types';

export const INITIALIZE_DEFAULT_ACCOUNT_STATE_DISCRIMINATOR = new Uint8Array([
  175, 89, 119, 112, 150, 203, 202, 198,
]);

export function getInitializeDefaultAccountStateDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_DEFAULT_ACCOUNT_STATE_DISCRIMINATOR
  );
}

export type InitializeDefaultAccountStateInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountMint extends string | AccountMeta<string> = string,
  TAccountAgent extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountMint extends string
        ? WritableAccount<TAccountMint>
        : TAccountMint,
      TAccountAgent extends string
        ? ReadonlyAccount<TAccountAgent>
        : TAccountAgent,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeDefaultAccountStateInstructionData = {
  discriminator: ReadonlyUint8Array;
  state: AccountState;
};

export type InitializeDefaultAccountStateInstructionDataArgs = {
  state: AccountStateArgs;
};

export function getInitializeDefaultAccountStateInstructionDataEncoder(): FixedSizeEncoder<InitializeDefaultAccountStateInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['state', getAccountStateEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: INITIALIZE_DEFAULT_ACCOUNT_STATE_DISCRIMINATOR,
    })
  );
}

export function getInitializeDefaultAccountStateInstructionDataDecoder(): FixedSizeDecoder<InitializeDefaultAccountStateInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['state', getAccountStateDecoder()],
  ]);
}

export function getInitializeDefaultAccountStateInstructionDataCodec(): FixedSizeCodec<
  InitializeDefaultAccountStateInstructionDataArgs,
  InitializeDefaultAccountStateInstructionData
> {
  return combineCodec(
    getInitializeDefaultAccountStateInstructionDataEncoder(),
    getInitializeDefaultAccountStateInstructionDataDecoder()
  );
}

export type InitializeDefaultAccountStateAsyncInput<
  TAccountAuthority extends string = string,
  TAccountMint extends string = string,
  TAccountAgent extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  authority: TransactionSigner<TAccountAuthority>;
  /** The mint to initialize default account state for */
  mint: Address<TAccountMint>;
  /** The agent that owns this mint */
  agent?: Address<TAccountAgent>;
  /** Token-2022 program */
  tokenProgram?: Address<TAccountTokenProgram>;
  state: InitializeDefaultAccountStateInstructionDataArgs['state'];
};

export async function getInitializeDefaultAccountStateInstructionAsync<
  TAccountAuthority extends string,
  TAccountMint extends string,
  TAccountAgent extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: InitializeDefaultAccountStateAsyncInput<
    TAccountAuthority,
    TAccountMint,
    TAccountAgent,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitializeDefaultAccountStateInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountMint,
    TAccountAgent,
    TAccountTokenProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: true },
    agent: { value: input.agent ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.agent.value) {
    accounts.agent.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([97, 103, 101, 110, 116])),
        getAddressEncoder().encode(expectAddress(accounts.authority.value)),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.agent),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getInitializeDefaultAccountStateInstructionDataEncoder().encode(
      args as InitializeDefaultAccountStateInstructionDataArgs
    ),
  } as InitializeDefaultAccountStateInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountMint,
    TAccountAgent,
    TAccountTokenProgram
  >;

  return instruction;
}

export type InitializeDefaultAccountStateInput<
  TAccountAuthority extends string = string,
  TAccountMint extends string = string,
  TAccountAgent extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  authority: TransactionSigner<TAccountAuthority>;
  /** The mint to initialize default account state for */
  mint: Address<TAccountMint>;
  /** The agent that owns this mint */
  agent: Address<TAccountAgent>;
  /** Token-2022 program */
  tokenProgram?: Address<TAccountTokenProgram>;
  state: InitializeDefaultAccountStateInstructionDataArgs['state'];
};

export function getInitializeDefaultAccountStateInstruction<
  TAccountAuthority extends string,
  TAccountMint extends string,
  TAccountAgent extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: InitializeDefaultAccountStateInput<
    TAccountAuthority,
    TAccountMint,
    TAccountAgent,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeDefaultAccountStateInstruction<
  TProgramAddress,
  TAccountAuthority,
  TAccountMint,
  TAccountAgent,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: true },
    agent: { value: input.agent ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.agent),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getInitializeDefaultAccountStateInstructionDataEncoder().encode(
      args as InitializeDefaultAccountStateInstructionDataArgs
    ),
  } as InitializeDefaultAccountStateInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountMint,
    TAccountAgent,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedInitializeDefaultAccountStateInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    authority: TAccountMetas[0];
    /** The mint to initialize default account state for */
    mint: TAccountMetas[1];
    /** The agent that owns this mint */
    agent: TAccountMetas[2];
    /** Token-2022 program */
    tokenProgram: TAccountMetas[3];
  };
  data: InitializeDefaultAccountStateInstructionData;
};

export function parseInitializeDefaultAccountStateInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitializeDefaultAccountStateInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    throw new Error('[GHOSTSPEAK_MARKETPLACE_ERROR__INSUFFICIENT_ACCOUNTS] Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authority: getNextAccount(),
      mint: getNextAccount(),
      agent: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getInitializeDefaultAccountStateInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
