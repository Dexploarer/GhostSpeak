/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import {
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
import {
  getExecutionParamsDecoder,
  getExecutionParamsEncoder,
  getProposalTypeDecoder,
  getProposalTypeEncoder,
  type ExecutionParams,
  type ExecutionParamsArgs,
  type ProposalType,
  type ProposalTypeArgs,
} from '../types';

export const INITIALIZE_GOVERNANCE_PROPOSAL_DISCRIMINATOR = new Uint8Array([
  137, 84, 234, 206, 17, 58, 54, 215,
]);

export function getInitializeGovernanceProposalDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_GOVERNANCE_PROPOSAL_DISCRIMINATOR
  );
}

export type InitializeGovernanceProposalInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountProposal extends string | IAccountMeta<string> = string,
  TAccountProposer extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountProposal extends string
        ? WritableAccount<TAccountProposal>
        : TAccountProposal,
      TAccountProposer extends string
        ? WritableSignerAccount<TAccountProposer> &
            IAccountSignerMeta<TAccountProposer>
        : TAccountProposer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface InitializeGovernanceProposalInstructionData {
  discriminator: ReadonlyUint8Array;
  proposalId: bigint;
  title: string;
  description: string;
  proposalType: ProposalType;
  executionParams: ExecutionParams;
}

export interface InitializeGovernanceProposalInstructionDataArgs {
  proposalId: number | bigint;
  title: string;
  description: string;
  proposalType: ProposalTypeArgs;
  executionParams: ExecutionParamsArgs;
}

export function getInitializeGovernanceProposalInstructionDataEncoder(): Encoder<InitializeGovernanceProposalInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['proposalId', getU64Encoder()],
      ['title', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['description', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['proposalType', getProposalTypeEncoder()],
      ['executionParams', getExecutionParamsEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: INITIALIZE_GOVERNANCE_PROPOSAL_DISCRIMINATOR,
    })
  );
}

export function getInitializeGovernanceProposalInstructionDataDecoder(): Decoder<InitializeGovernanceProposalInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['proposalId', getU64Decoder()],
    ['title', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['description', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['proposalType', getProposalTypeDecoder()],
    ['executionParams', getExecutionParamsDecoder()],
  ]);
}

export function getInitializeGovernanceProposalInstructionDataCodec(): Codec<
  InitializeGovernanceProposalInstructionDataArgs,
  InitializeGovernanceProposalInstructionData
> {
  return combineCodec(
    getInitializeGovernanceProposalInstructionDataEncoder(),
    getInitializeGovernanceProposalInstructionDataDecoder()
  );
}

export interface InitializeGovernanceProposalAsyncInput<
  TAccountProposal extends string = string,
  TAccountProposer extends string = string,
  TAccountSystemProgram extends string = string,
> {
  proposal?: Address<TAccountProposal>;
  proposer: TransactionSigner<TAccountProposer>;
  systemProgram?: Address<TAccountSystemProgram>;
  proposalId: InitializeGovernanceProposalInstructionDataArgs['proposalId'];
  title: InitializeGovernanceProposalInstructionDataArgs['title'];
  description: InitializeGovernanceProposalInstructionDataArgs['description'];
  proposalType: InitializeGovernanceProposalInstructionDataArgs['proposalType'];
  executionParams: InitializeGovernanceProposalInstructionDataArgs['executionParams'];
}

export async function getInitializeGovernanceProposalInstructionAsync<
  TAccountProposal extends string,
  TAccountProposer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: InitializeGovernanceProposalAsyncInput<
    TAccountProposal,
    TAccountProposer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitializeGovernanceProposalInstruction<
    TProgramAddress,
    TAccountProposal,
    TAccountProposer,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    proposal: { value: input.proposal ?? null, isWritable: true },
    proposer: { value: input.proposer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.proposal.value) {
    accounts.proposal.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            103, 111, 118, 101, 114, 110, 97, 110, 99, 101, 95, 112, 114, 111,
            112, 111, 115, 97, 108,
          ])
        ),
        getU64Encoder().encode(expectSome(args.proposalId)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.proposal),
      getAccountMeta(accounts.proposer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeGovernanceProposalInstructionDataEncoder().encode(
      args as InitializeGovernanceProposalInstructionDataArgs
    ),
  } as InitializeGovernanceProposalInstruction<
    TProgramAddress,
    TAccountProposal,
    TAccountProposer,
    TAccountSystemProgram
  >;

  return instruction;
}

export interface InitializeGovernanceProposalInput<
  TAccountProposal extends string = string,
  TAccountProposer extends string = string,
  TAccountSystemProgram extends string = string,
> {
  proposal: Address<TAccountProposal>;
  proposer: TransactionSigner<TAccountProposer>;
  systemProgram?: Address<TAccountSystemProgram>;
  proposalId: InitializeGovernanceProposalInstructionDataArgs['proposalId'];
  title: InitializeGovernanceProposalInstructionDataArgs['title'];
  description: InitializeGovernanceProposalInstructionDataArgs['description'];
  proposalType: InitializeGovernanceProposalInstructionDataArgs['proposalType'];
  executionParams: InitializeGovernanceProposalInstructionDataArgs['executionParams'];
}

export function getInitializeGovernanceProposalInstruction<
  TAccountProposal extends string,
  TAccountProposer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: InitializeGovernanceProposalInput<
    TAccountProposal,
    TAccountProposer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeGovernanceProposalInstruction<
  TProgramAddress,
  TAccountProposal,
  TAccountProposer,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    proposal: { value: input.proposal ?? null, isWritable: true },
    proposer: { value: input.proposer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.proposal),
      getAccountMeta(accounts.proposer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeGovernanceProposalInstructionDataEncoder().encode(
      args as InitializeGovernanceProposalInstructionDataArgs
    ),
  } as InitializeGovernanceProposalInstruction<
    TProgramAddress,
    TAccountProposal,
    TAccountProposer,
    TAccountSystemProgram
  >;

  return instruction;
}

export interface ParsedInitializeGovernanceProposalInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    proposal: TAccountMetas[0];
    proposer: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
  };
  data: InitializeGovernanceProposalInstructionData;
}

export function parseInitializeGovernanceProposalInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedInitializeGovernanceProposalInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    throw new Error('Invalid number of accounts provided');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      proposal: getNextAccount(),
      proposer: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeGovernanceProposalInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
