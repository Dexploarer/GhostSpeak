/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI16Decoder,
  getI16Encoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import {
  GHOSTSPEAK_MARKETPLACE_ERROR__INSUFFICIENT_ACCOUNTS,
  GHOSTSPEAK_MARKETPLACE_ERROR__INVALID_INSTRUCTION_DATA,
  GHOSTSPEAK_MARKETPLACE_ERROR__MISSING_REQUIRED_ACCOUNT,
  GHOSTSPEAK_MARKETPLACE_ERROR__INVALID_ACCOUNT,
  GHOSTSPEAK_MARKETPLACE_ERROR__INSTRUCTION_PARSING_FAILED,
  isGhostspeakMarketplaceError,
} from '../errors';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const INITIALIZE_INTEREST_BEARING_CONFIG_DISCRIMINATOR = new Uint8Array([
  59, 39, 17, 210, 123, 130, 101, 67,
]);

export function getInitializeInterestBearingConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_INTEREST_BEARING_CONFIG_DISCRIMINATOR
  );
}

export type InitializeInterestBearingConfigInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountMint extends string | AccountMeta<string> = string,
  TAccountAgent extends string | AccountMeta<string> = string,
  TAccountRateAuthority extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountMint extends string
        ? WritableAccount<TAccountMint>
        : TAccountMint,
      TAccountAgent extends string
        ? ReadonlyAccount<TAccountAgent>
        : TAccountAgent,
      TAccountRateAuthority extends string
        ? ReadonlyAccount<TAccountRateAuthority>
        : TAccountRateAuthority,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeInterestBearingConfigInstructionData = {
  discriminator: ReadonlyUint8Array;
  rate: number;
};

export type InitializeInterestBearingConfigInstructionDataArgs = {
  rate: number;
};

export function getInitializeInterestBearingConfigInstructionDataEncoder(): FixedSizeEncoder<InitializeInterestBearingConfigInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['rate', getI16Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: INITIALIZE_INTEREST_BEARING_CONFIG_DISCRIMINATOR,
    })
  );
}

export function getInitializeInterestBearingConfigInstructionDataDecoder(): FixedSizeDecoder<InitializeInterestBearingConfigInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['rate', getI16Decoder()],
  ]);
}

export function getInitializeInterestBearingConfigInstructionDataCodec(): FixedSizeCodec<
  InitializeInterestBearingConfigInstructionDataArgs,
  InitializeInterestBearingConfigInstructionData
> {
  return combineCodec(
    getInitializeInterestBearingConfigInstructionDataEncoder(),
    getInitializeInterestBearingConfigInstructionDataDecoder()
  );
}

export type InitializeInterestBearingConfigAsyncInput<
  TAccountAuthority extends string = string,
  TAccountMint extends string = string,
  TAccountAgent extends string = string,
  TAccountRateAuthority extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  authority: TransactionSigner<TAccountAuthority>;
  /** The mint to initialize interest-bearing config for */
  mint: Address<TAccountMint>;
  /** The agent that owns this mint */
  agent?: Address<TAccountAgent>;
  /** The account that can update the interest rate */
  rateAuthority: Address<TAccountRateAuthority>;
  /** Token-2022 program */
  tokenProgram?: Address<TAccountTokenProgram>;
  rate: InitializeInterestBearingConfigInstructionDataArgs['rate'];
};

export async function getInitializeInterestBearingConfigInstructionAsync<
  TAccountAuthority extends string,
  TAccountMint extends string,
  TAccountAgent extends string,
  TAccountRateAuthority extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: InitializeInterestBearingConfigAsyncInput<
    TAccountAuthority,
    TAccountMint,
    TAccountAgent,
    TAccountRateAuthority,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitializeInterestBearingConfigInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountMint,
    TAccountAgent,
    TAccountRateAuthority,
    TAccountTokenProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: true },
    agent: { value: input.agent ?? null, isWritable: false },
    rateAuthority: { value: input.rateAuthority ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.agent.value) {
    accounts.agent.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([97, 103, 101, 110, 116])),
        getAddressEncoder().encode(expectAddress(accounts.authority.value)),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.agent),
      getAccountMeta(accounts.rateAuthority),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getInitializeInterestBearingConfigInstructionDataEncoder().encode(
      args as InitializeInterestBearingConfigInstructionDataArgs
    ),
  } as InitializeInterestBearingConfigInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountMint,
    TAccountAgent,
    TAccountRateAuthority,
    TAccountTokenProgram
  >;

  return instruction;
}

export type InitializeInterestBearingConfigInput<
  TAccountAuthority extends string = string,
  TAccountMint extends string = string,
  TAccountAgent extends string = string,
  TAccountRateAuthority extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  authority: TransactionSigner<TAccountAuthority>;
  /** The mint to initialize interest-bearing config for */
  mint: Address<TAccountMint>;
  /** The agent that owns this mint */
  agent: Address<TAccountAgent>;
  /** The account that can update the interest rate */
  rateAuthority: Address<TAccountRateAuthority>;
  /** Token-2022 program */
  tokenProgram?: Address<TAccountTokenProgram>;
  rate: InitializeInterestBearingConfigInstructionDataArgs['rate'];
};

export function getInitializeInterestBearingConfigInstruction<
  TAccountAuthority extends string,
  TAccountMint extends string,
  TAccountAgent extends string,
  TAccountRateAuthority extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: InitializeInterestBearingConfigInput<
    TAccountAuthority,
    TAccountMint,
    TAccountAgent,
    TAccountRateAuthority,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeInterestBearingConfigInstruction<
  TProgramAddress,
  TAccountAuthority,
  TAccountMint,
  TAccountAgent,
  TAccountRateAuthority,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: true },
    agent: { value: input.agent ?? null, isWritable: false },
    rateAuthority: { value: input.rateAuthority ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.agent),
      getAccountMeta(accounts.rateAuthority),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getInitializeInterestBearingConfigInstructionDataEncoder().encode(
      args as InitializeInterestBearingConfigInstructionDataArgs
    ),
  } as InitializeInterestBearingConfigInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountMint,
    TAccountAgent,
    TAccountRateAuthority,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedInitializeInterestBearingConfigInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    authority: TAccountMetas[0];
    /** The mint to initialize interest-bearing config for */
    mint: TAccountMetas[1];
    /** The agent that owns this mint */
    agent: TAccountMetas[2];
    /** The account that can update the interest rate */
    rateAuthority: TAccountMetas[3];
    /** Token-2022 program */
    tokenProgram: TAccountMetas[4];
  };
  data: InitializeInterestBearingConfigInstructionData;
};

export function parseInitializeInterestBearingConfigInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitializeInterestBearingConfigInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    throw new Error('[GHOSTSPEAK_MARKETPLACE_ERROR__INSUFFICIENT_ACCOUNTS] Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authority: getNextAccount(),
      mint: getNextAccount(),
      agent: getNextAccount(),
      rateAuthority: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getInitializeInterestBearingConfigInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
