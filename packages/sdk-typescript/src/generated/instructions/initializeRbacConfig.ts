/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
import {
  getRoleDecoder,
  getRoleEncoder,
  type Role,
  type RoleArgs,
} from '../types';

export const INITIALIZE_RBAC_CONFIG_DISCRIMINATOR = new Uint8Array([
  215, 68, 129, 228, 237, 165, 0, 240,
]);

export function getInitializeRbacConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_RBAC_CONFIG_DISCRIMINATOR
  );
}

export type InitializeRbacConfigInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountRbacConfig extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountRbacConfig extends string
        ? WritableAccount<TAccountRbacConfig>
        : TAccountRbacConfig,
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeRbacConfigInstructionData = {
  discriminator: ReadonlyUint8Array;
  initialRoles: Array<Role>;
};

export type InitializeRbacConfigInstructionDataArgs = {
  initialRoles: Array<RoleArgs>;
};

export function getInitializeRbacConfigInstructionDataEncoder(): Encoder<InitializeRbacConfigInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['initialRoles', getArrayEncoder(getRoleEncoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: INITIALIZE_RBAC_CONFIG_DISCRIMINATOR,
    })
  );
}

export function getInitializeRbacConfigInstructionDataDecoder(): Decoder<InitializeRbacConfigInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['initialRoles', getArrayDecoder(getRoleDecoder())],
  ]);
}

export function getInitializeRbacConfigInstructionDataCodec(): Codec<
  InitializeRbacConfigInstructionDataArgs,
  InitializeRbacConfigInstructionData
> {
  return combineCodec(
    getInitializeRbacConfigInstructionDataEncoder(),
    getInitializeRbacConfigInstructionDataDecoder()
  );
}

export type InitializeRbacConfigAsyncInput<
  TAccountRbacConfig extends string = string,
  TAccountAuthority extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  rbacConfig?: Address<TAccountRbacConfig>;
  authority: TransactionSigner<TAccountAuthority>;
  systemProgram?: Address<TAccountSystemProgram>;
  initialRoles: InitializeRbacConfigInstructionDataArgs['initialRoles'];
};

export async function getInitializeRbacConfigInstructionAsync<
  TAccountRbacConfig extends string,
  TAccountAuthority extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: InitializeRbacConfigAsyncInput<
    TAccountRbacConfig,
    TAccountAuthority,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitializeRbacConfigInstruction<
    TProgramAddress,
    TAccountRbacConfig,
    TAccountAuthority,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    rbacConfig: { value: input.rbacConfig ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.rbacConfig.value) {
    accounts.rbacConfig.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([114, 98, 97, 99, 95, 99, 111, 110, 102, 105, 103])
        ),
        getAddressEncoder().encode(expectAddress(accounts.authority.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.rbacConfig),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeRbacConfigInstructionDataEncoder().encode(
      args as InitializeRbacConfigInstructionDataArgs
    ),
  } as InitializeRbacConfigInstruction<
    TProgramAddress,
    TAccountRbacConfig,
    TAccountAuthority,
    TAccountSystemProgram
  >;

  return instruction;
}

export type InitializeRbacConfigInput<
  TAccountRbacConfig extends string = string,
  TAccountAuthority extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  rbacConfig: Address<TAccountRbacConfig>;
  authority: TransactionSigner<TAccountAuthority>;
  systemProgram?: Address<TAccountSystemProgram>;
  initialRoles: InitializeRbacConfigInstructionDataArgs['initialRoles'];
};

export function getInitializeRbacConfigInstruction<
  TAccountRbacConfig extends string,
  TAccountAuthority extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: InitializeRbacConfigInput<
    TAccountRbacConfig,
    TAccountAuthority,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeRbacConfigInstruction<
  TProgramAddress,
  TAccountRbacConfig,
  TAccountAuthority,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    rbacConfig: { value: input.rbacConfig ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.rbacConfig),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeRbacConfigInstructionDataEncoder().encode(
      args as InitializeRbacConfigInstructionDataArgs
    ),
  } as InitializeRbacConfigInstruction<
    TProgramAddress,
    TAccountRbacConfig,
    TAccountAuthority,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedInitializeRbacConfigInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    rbacConfig: TAccountMetas[0];
    authority: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
  };
  data: InitializeRbacConfigInstructionData;
};

export function parseInitializeRbacConfigInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitializeRbacConfigInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      rbacConfig: getNextAccount(),
      authority: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeRbacConfigInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
