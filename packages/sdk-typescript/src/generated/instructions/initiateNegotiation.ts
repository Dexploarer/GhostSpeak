/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import {
  GHOSTSPEAK_MARKETPLACE_ERROR__INSUFFICIENT_ACCOUNTS,
  GHOSTSPEAK_MARKETPLACE_ERROR__INVALID_INSTRUCTION_DATA,
  GHOSTSPEAK_MARKETPLACE_ERROR__MISSING_REQUIRED_ACCOUNT,
  GHOSTSPEAK_MARKETPLACE_ERROR__INVALID_ACCOUNT,
  GHOSTSPEAK_MARKETPLACE_ERROR__INSTRUCTION_PARSING_FAILED,
  isGhostspeakMarketplaceError,
} from '../errors';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const INITIATE_NEGOTIATION_DISCRIMINATOR = new Uint8Array([
  170, 46, 176, 41, 191, 255, 104, 205,
]);

export function getInitiateNegotiationDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIATE_NEGOTIATION_DISCRIMINATOR
  );
}

export type InitiateNegotiationInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountNegotiation extends string | AccountMeta<string> = string,
  TAccountInitiator extends string | AccountMeta<string> = string,
  TAccountCounterparty extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountNegotiation extends string
        ? WritableAccount<TAccountNegotiation>
        : TAccountNegotiation,
      TAccountInitiator extends string
        ? WritableSignerAccount<TAccountInitiator> &
            AccountSignerMeta<TAccountInitiator>
        : TAccountInitiator,
      TAccountCounterparty extends string
        ? ReadonlyAccount<TAccountCounterparty>
        : TAccountCounterparty,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitiateNegotiationInstructionData = {
  discriminator: ReadonlyUint8Array;
  initialOffer: bigint;
  autoAcceptThreshold: bigint;
  negotiationDeadline: bigint;
};

export type InitiateNegotiationInstructionDataArgs = {
  initialOffer: number | bigint;
  autoAcceptThreshold: number | bigint;
  negotiationDeadline: number | bigint;
};

export function getInitiateNegotiationInstructionDataEncoder(): FixedSizeEncoder<InitiateNegotiationInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['initialOffer', getU64Encoder()],
      ['autoAcceptThreshold', getU64Encoder()],
      ['negotiationDeadline', getI64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: INITIATE_NEGOTIATION_DISCRIMINATOR })
  );
}

export function getInitiateNegotiationInstructionDataDecoder(): FixedSizeDecoder<InitiateNegotiationInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['initialOffer', getU64Decoder()],
    ['autoAcceptThreshold', getU64Decoder()],
    ['negotiationDeadline', getI64Decoder()],
  ]);
}

export function getInitiateNegotiationInstructionDataCodec(): FixedSizeCodec<
  InitiateNegotiationInstructionDataArgs,
  InitiateNegotiationInstructionData
> {
  return combineCodec(
    getInitiateNegotiationInstructionDataEncoder(),
    getInitiateNegotiationInstructionDataDecoder()
  );
}

export type InitiateNegotiationAsyncInput<
  TAccountNegotiation extends string = string,
  TAccountInitiator extends string = string,
  TAccountCounterparty extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  negotiation?: Address<TAccountNegotiation>;
  initiator: TransactionSigner<TAccountInitiator>;
  counterparty: Address<TAccountCounterparty>;
  systemProgram?: Address<TAccountSystemProgram>;
  initialOffer: InitiateNegotiationInstructionDataArgs['initialOffer'];
  autoAcceptThreshold: InitiateNegotiationInstructionDataArgs['autoAcceptThreshold'];
  negotiationDeadline: InitiateNegotiationInstructionDataArgs['negotiationDeadline'];
};

export async function getInitiateNegotiationInstructionAsync<
  TAccountNegotiation extends string,
  TAccountInitiator extends string,
  TAccountCounterparty extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: InitiateNegotiationAsyncInput<
    TAccountNegotiation,
    TAccountInitiator,
    TAccountCounterparty,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitiateNegotiationInstruction<
    TProgramAddress,
    TAccountNegotiation,
    TAccountInitiator,
    TAccountCounterparty,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    negotiation: { value: input.negotiation ?? null, isWritable: true },
    initiator: { value: input.initiator ?? null, isWritable: true },
    counterparty: { value: input.counterparty ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.negotiation.value) {
    accounts.negotiation.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([110, 101, 103, 111, 116, 105, 97, 116, 105, 111, 110])
        ),
        getAddressEncoder().encode(expectAddress(accounts.initiator.value)),
        getAddressEncoder().encode(expectAddress(accounts.counterparty.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.negotiation),
      getAccountMeta(accounts.initiator),
      getAccountMeta(accounts.counterparty),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitiateNegotiationInstructionDataEncoder().encode(
      args as InitiateNegotiationInstructionDataArgs
    ),
  } as InitiateNegotiationInstruction<
    TProgramAddress,
    TAccountNegotiation,
    TAccountInitiator,
    TAccountCounterparty,
    TAccountSystemProgram
  >;

  return instruction;
}

export type InitiateNegotiationInput<
  TAccountNegotiation extends string = string,
  TAccountInitiator extends string = string,
  TAccountCounterparty extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  negotiation: Address<TAccountNegotiation>;
  initiator: TransactionSigner<TAccountInitiator>;
  counterparty: Address<TAccountCounterparty>;
  systemProgram?: Address<TAccountSystemProgram>;
  initialOffer: InitiateNegotiationInstructionDataArgs['initialOffer'];
  autoAcceptThreshold: InitiateNegotiationInstructionDataArgs['autoAcceptThreshold'];
  negotiationDeadline: InitiateNegotiationInstructionDataArgs['negotiationDeadline'];
};

export function getInitiateNegotiationInstruction<
  TAccountNegotiation extends string,
  TAccountInitiator extends string,
  TAccountCounterparty extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: InitiateNegotiationInput<
    TAccountNegotiation,
    TAccountInitiator,
    TAccountCounterparty,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitiateNegotiationInstruction<
  TProgramAddress,
  TAccountNegotiation,
  TAccountInitiator,
  TAccountCounterparty,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    negotiation: { value: input.negotiation ?? null, isWritable: true },
    initiator: { value: input.initiator ?? null, isWritable: true },
    counterparty: { value: input.counterparty ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.negotiation),
      getAccountMeta(accounts.initiator),
      getAccountMeta(accounts.counterparty),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitiateNegotiationInstructionDataEncoder().encode(
      args as InitiateNegotiationInstructionDataArgs
    ),
  } as InitiateNegotiationInstruction<
    TProgramAddress,
    TAccountNegotiation,
    TAccountInitiator,
    TAccountCounterparty,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedInitiateNegotiationInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    negotiation: TAccountMetas[0];
    initiator: TAccountMetas[1];
    counterparty: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
  };
  data: InitiateNegotiationInstructionData;
};

export function parseInitiateNegotiationInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitiateNegotiationInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    throw new Error('[GHOSTSPEAK_MARKETPLACE_ERROR__INSUFFICIENT_ACCOUNTS] Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      negotiation: getNextAccount(),
      initiator: getNextAccount(),
      counterparty: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitiateNegotiationInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
