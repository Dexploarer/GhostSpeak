/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const MAKE_COUNTER_OFFER_DISCRIMINATOR = new Uint8Array([
  74, 8, 96, 55, 146, 85, 200, 152,
]);

export function getMakeCounterOfferDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    MAKE_COUNTER_OFFER_DISCRIMINATOR
  );
}

export type MakeCounterOfferInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountNegotiation extends string | IAccountMeta<string> = string,
  TAccountSender extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountNegotiation extends string
        ? WritableAccount<TAccountNegotiation>
        : TAccountNegotiation,
      TAccountSender extends string
        ? ReadonlySignerAccount<TAccountSender> &
            IAccountSignerMeta<TAccountSender>
        : TAccountSender,
      ...TRemainingAccounts,
    ]
  >;

export interface MakeCounterOfferInstructionData {
  discriminator: ReadonlyUint8Array;
  counterOffer: bigint;
  message: string;
}

export interface MakeCounterOfferInstructionDataArgs {
  counterOffer: number | bigint;
  message: string;
}

export function getMakeCounterOfferInstructionDataEncoder(): Encoder<MakeCounterOfferInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['counterOffer', getU64Encoder()],
      ['message', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ]),
    (value) => ({ ...value, discriminator: MAKE_COUNTER_OFFER_DISCRIMINATOR })
  );
}

export function getMakeCounterOfferInstructionDataDecoder(): Decoder<MakeCounterOfferInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['counterOffer', getU64Decoder()],
    ['message', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getMakeCounterOfferInstructionDataCodec(): Codec<
  MakeCounterOfferInstructionDataArgs,
  MakeCounterOfferInstructionData
> {
  return combineCodec(
    getMakeCounterOfferInstructionDataEncoder(),
    getMakeCounterOfferInstructionDataDecoder()
  );
}

export interface MakeCounterOfferInput<
  TAccountNegotiation extends string = string,
  TAccountSender extends string = string,
> {
  negotiation: Address<TAccountNegotiation>;
  sender: TransactionSigner<TAccountSender>;
  counterOffer: MakeCounterOfferInstructionDataArgs['counterOffer'];
  message: MakeCounterOfferInstructionDataArgs['message'];
}

export function getMakeCounterOfferInstruction<
  TAccountNegotiation extends string,
  TAccountSender extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: MakeCounterOfferInput<TAccountNegotiation, TAccountSender>,
  config?: { programAddress?: TProgramAddress }
): MakeCounterOfferInstruction<
  TProgramAddress,
  TAccountNegotiation,
  TAccountSender
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    negotiation: { value: input.negotiation ?? null, isWritable: true },
    sender: { value: input.sender ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.negotiation),
      getAccountMeta(accounts.sender),
    ],
    programAddress,
    data: getMakeCounterOfferInstructionDataEncoder().encode(
      args as MakeCounterOfferInstructionDataArgs
    ),
  } as MakeCounterOfferInstruction<
    TProgramAddress,
    TAccountNegotiation,
    TAccountSender
  >;

  return instruction;
}

export interface ParsedMakeCounterOfferInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    negotiation: TAccountMetas[0];
    sender: TAccountMetas[1];
  };
  data: MakeCounterOfferInstructionData;
}

export function parseMakeCounterOfferInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedMakeCounterOfferInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    throw new Error('Invalid number of accounts provided');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      negotiation: getNextAccount(),
      sender: getNextAccount(),
    },
    data: getMakeCounterOfferInstructionDataDecoder().decode(instruction.data),
  };
}
