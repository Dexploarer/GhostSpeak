/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import {
  GHOSTSPEAK_MARKETPLACE_ERROR__INSUFFICIENT_ACCOUNTS,
  GHOSTSPEAK_MARKETPLACE_ERROR__INVALID_INSTRUCTION_DATA,
  GHOSTSPEAK_MARKETPLACE_ERROR__MISSING_REQUIRED_ACCOUNT,
  GHOSTSPEAK_MARKETPLACE_ERROR__INVALID_ACCOUNT,
  GHOSTSPEAK_MARKETPLACE_ERROR__INSTRUCTION_PARSING_FAILED,
  isGhostspeakMarketplaceError,
} from '../errors';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const PLACE_DUTCH_AUCTION_BID_DISCRIMINATOR = new Uint8Array([
  209, 244, 155, 47, 62, 54, 119, 34,
]);

export function getPlaceDutchAuctionBidDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    PLACE_DUTCH_AUCTION_BID_DISCRIMINATOR
  );
}

export type PlaceDutchAuctionBidInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountAuction extends string | AccountMeta<string> = string,
  TAccountUserRegistry extends string | AccountMeta<string> = string,
  TAccountBidder extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountClock extends
    | string
    | AccountMeta<string> = 'SysvarC1ock11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAuction extends string
        ? WritableAccount<TAccountAuction>
        : TAccountAuction,
      TAccountUserRegistry extends string
        ? ReadonlyAccount<TAccountUserRegistry>
        : TAccountUserRegistry,
      TAccountBidder extends string
        ? WritableSignerAccount<TAccountBidder> &
            AccountSignerMeta<TAccountBidder>
        : TAccountBidder,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountClock extends string
        ? ReadonlyAccount<TAccountClock>
        : TAccountClock,
      ...TRemainingAccounts,
    ]
  >;

export type PlaceDutchAuctionBidInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type PlaceDutchAuctionBidInstructionDataArgs = {};

export function getPlaceDutchAuctionBidInstructionDataEncoder(): FixedSizeEncoder<PlaceDutchAuctionBidInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: PLACE_DUTCH_AUCTION_BID_DISCRIMINATOR,
    })
  );
}

export function getPlaceDutchAuctionBidInstructionDataDecoder(): FixedSizeDecoder<PlaceDutchAuctionBidInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getPlaceDutchAuctionBidInstructionDataCodec(): FixedSizeCodec<
  PlaceDutchAuctionBidInstructionDataArgs,
  PlaceDutchAuctionBidInstructionData
> {
  return combineCodec(
    getPlaceDutchAuctionBidInstructionDataEncoder(),
    getPlaceDutchAuctionBidInstructionDataDecoder()
  );
}

export type PlaceDutchAuctionBidInput<
  TAccountAuction extends string = string,
  TAccountUserRegistry extends string = string,
  TAccountBidder extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountClock extends string = string,
> = {
  /** Auction account with canonical bump validation */
  auction: Address<TAccountAuction>;
  /** User registry for rate limiting */
  userRegistry: Address<TAccountUserRegistry>;
  /** Enhanced bidder verification */
  bidder: TransactionSigner<TAccountBidder>;
  /** System program */
  systemProgram?: Address<TAccountSystemProgram>;
  /** Clock sysvar for price calculation */
  clock?: Address<TAccountClock>;
};

export function getPlaceDutchAuctionBidInstruction<
  TAccountAuction extends string,
  TAccountUserRegistry extends string,
  TAccountBidder extends string,
  TAccountSystemProgram extends string,
  TAccountClock extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: PlaceDutchAuctionBidInput<
    TAccountAuction,
    TAccountUserRegistry,
    TAccountBidder,
    TAccountSystemProgram,
    TAccountClock
  >,
  config?: { programAddress?: TProgramAddress }
): PlaceDutchAuctionBidInstruction<
  TProgramAddress,
  TAccountAuction,
  TAccountUserRegistry,
  TAccountBidder,
  TAccountSystemProgram,
  TAccountClock
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    auction: { value: input.auction ?? null, isWritable: true },
    userRegistry: { value: input.userRegistry ?? null, isWritable: false },
    bidder: { value: input.bidder ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    clock: { value: input.clock ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.auction),
      getAccountMeta(accounts.userRegistry),
      getAccountMeta(accounts.bidder),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.clock),
    ],
    programAddress,
    data: getPlaceDutchAuctionBidInstructionDataEncoder().encode({}),
  } as PlaceDutchAuctionBidInstruction<
    TProgramAddress,
    TAccountAuction,
    TAccountUserRegistry,
    TAccountBidder,
    TAccountSystemProgram,
    TAccountClock
  >;

  return instruction;
}

export type ParsedPlaceDutchAuctionBidInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Auction account with canonical bump validation */
    auction: TAccountMetas[0];
    /** User registry for rate limiting */
    userRegistry: TAccountMetas[1];
    /** Enhanced bidder verification */
    bidder: TAccountMetas[2];
    /** System program */
    systemProgram: TAccountMetas[3];
    /** Clock sysvar for price calculation */
    clock: TAccountMetas[4];
  };
  data: PlaceDutchAuctionBidInstructionData;
};

export function parsePlaceDutchAuctionBidInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedPlaceDutchAuctionBidInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    throw new Error('[GHOSTSPEAK_MARKETPLACE_ERROR__INSUFFICIENT_ACCOUNTS] Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      auction: getNextAccount(),
      userRegistry: getNextAccount(),
      bidder: getNextAccount(),
      systemProgram: getNextAccount(),
      clock: getNextAccount(),
    },
    data: getPlaceDutchAuctionBidInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
