/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const PROCESS_ESCROW_PAYMENT_DISCRIMINATOR = new Uint8Array([
  99, 206, 125, 26, 181, 158, 189, 238,
]);

export function getProcessEscrowPaymentDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    PROCESS_ESCROW_PAYMENT_DISCRIMINATOR
  );
}

export type ProcessEscrowPaymentInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountPayment extends string | AccountMeta<string> = string,
  TAccountEscrow extends string | AccountMeta<string> = string,
  TAccountReentrancyGuard extends string | AccountMeta<string> = string,
  TAccountEscrowTokenAccount extends string | AccountMeta<string> = string,
  TAccountRecipientTokenAccount extends string | AccountMeta<string> = string,
  TAccountRecipient extends string | AccountMeta<string> = string,
  TAccountPaymentToken extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPayment extends string
        ? WritableAccount<TAccountPayment>
        : TAccountPayment,
      TAccountEscrow extends string
        ? WritableAccount<TAccountEscrow>
        : TAccountEscrow,
      TAccountReentrancyGuard extends string
        ? WritableAccount<TAccountReentrancyGuard>
        : TAccountReentrancyGuard,
      TAccountEscrowTokenAccount extends string
        ? WritableAccount<TAccountEscrowTokenAccount>
        : TAccountEscrowTokenAccount,
      TAccountRecipientTokenAccount extends string
        ? WritableAccount<TAccountRecipientTokenAccount>
        : TAccountRecipientTokenAccount,
      TAccountRecipient extends string
        ? ReadonlyAccount<TAccountRecipient>
        : TAccountRecipient,
      TAccountPaymentToken extends string
        ? ReadonlyAccount<TAccountPaymentToken>
        : TAccountPaymentToken,
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ProcessEscrowPaymentInstructionData = {
  discriminator: ReadonlyUint8Array;
  workOrder: Address;
};

export type ProcessEscrowPaymentInstructionDataArgs = { workOrder: Address };

export function getProcessEscrowPaymentInstructionDataEncoder(): FixedSizeEncoder<ProcessEscrowPaymentInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['workOrder', getAddressEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: PROCESS_ESCROW_PAYMENT_DISCRIMINATOR,
    })
  );
}

export function getProcessEscrowPaymentInstructionDataDecoder(): FixedSizeDecoder<ProcessEscrowPaymentInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['workOrder', getAddressDecoder()],
  ]);
}

export function getProcessEscrowPaymentInstructionDataCodec(): FixedSizeCodec<
  ProcessEscrowPaymentInstructionDataArgs,
  ProcessEscrowPaymentInstructionData
> {
  return combineCodec(
    getProcessEscrowPaymentInstructionDataEncoder(),
    getProcessEscrowPaymentInstructionDataDecoder()
  );
}

export type ProcessEscrowPaymentAsyncInput<
  TAccountPayment extends string = string,
  TAccountEscrow extends string = string,
  TAccountReentrancyGuard extends string = string,
  TAccountEscrowTokenAccount extends string = string,
  TAccountRecipientTokenAccount extends string = string,
  TAccountRecipient extends string = string,
  TAccountPaymentToken extends string = string,
  TAccountAuthority extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  payment?: Address<TAccountPayment>;
  escrow: Address<TAccountEscrow>;
  reentrancyGuard?: Address<TAccountReentrancyGuard>;
  escrowTokenAccount?: Address<TAccountEscrowTokenAccount>;
  recipientTokenAccount?: Address<TAccountRecipientTokenAccount>;
  recipient: Address<TAccountRecipient>;
  paymentToken: Address<TAccountPaymentToken>;
  authority: TransactionSigner<TAccountAuthority>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  workOrder: ProcessEscrowPaymentInstructionDataArgs['workOrder'];
};

export async function getProcessEscrowPaymentInstructionAsync<
  TAccountPayment extends string,
  TAccountEscrow extends string,
  TAccountReentrancyGuard extends string,
  TAccountEscrowTokenAccount extends string,
  TAccountRecipientTokenAccount extends string,
  TAccountRecipient extends string,
  TAccountPaymentToken extends string,
  TAccountAuthority extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: ProcessEscrowPaymentAsyncInput<
    TAccountPayment,
    TAccountEscrow,
    TAccountReentrancyGuard,
    TAccountEscrowTokenAccount,
    TAccountRecipientTokenAccount,
    TAccountRecipient,
    TAccountPaymentToken,
    TAccountAuthority,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  ProcessEscrowPaymentInstruction<
    TProgramAddress,
    TAccountPayment,
    TAccountEscrow,
    TAccountReentrancyGuard,
    TAccountEscrowTokenAccount,
    TAccountRecipientTokenAccount,
    TAccountRecipient,
    TAccountPaymentToken,
    TAccountAuthority,
    TAccountTokenProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payment: { value: input.payment ?? null, isWritable: true },
    escrow: { value: input.escrow ?? null, isWritable: true },
    reentrancyGuard: { value: input.reentrancyGuard ?? null, isWritable: true },
    escrowTokenAccount: {
      value: input.escrowTokenAccount ?? null,
      isWritable: true,
    },
    recipientTokenAccount: {
      value: input.recipientTokenAccount ?? null,
      isWritable: true,
    },
    recipient: { value: input.recipient ?? null, isWritable: false },
    paymentToken: { value: input.paymentToken ?? null, isWritable: false },
    authority: { value: input.authority ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.payment.value) {
    accounts.payment.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([112, 97, 121, 109, 101, 110, 116])
        ),
        getAddressEncoder().encode(expectAddress(accounts.escrow.value)),
      ],
    });
  }
  if (!accounts.reentrancyGuard.value) {
    accounts.reentrancyGuard.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            114, 101, 101, 110, 116, 114, 97, 110, 99, 121, 95, 103, 117, 97,
            114, 100,
          ])
        ),
      ],
    });
  }
  if (!accounts.escrowTokenAccount.value) {
    accounts.escrowTokenAccount.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.escrow.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
            121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
            126, 255, 0, 169,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.paymentToken.value)),
      ],
    });
  }
  if (!accounts.recipientTokenAccount.value) {
    accounts.recipientTokenAccount.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.recipient.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
            121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
            126, 255, 0, 169,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.paymentToken.value)),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payment),
      getAccountMeta(accounts.escrow),
      getAccountMeta(accounts.reentrancyGuard),
      getAccountMeta(accounts.escrowTokenAccount),
      getAccountMeta(accounts.recipientTokenAccount),
      getAccountMeta(accounts.recipient),
      getAccountMeta(accounts.paymentToken),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getProcessEscrowPaymentInstructionDataEncoder().encode(
      args as ProcessEscrowPaymentInstructionDataArgs
    ),
  } as ProcessEscrowPaymentInstruction<
    TProgramAddress,
    TAccountPayment,
    TAccountEscrow,
    TAccountReentrancyGuard,
    TAccountEscrowTokenAccount,
    TAccountRecipientTokenAccount,
    TAccountRecipient,
    TAccountPaymentToken,
    TAccountAuthority,
    TAccountTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ProcessEscrowPaymentInput<
  TAccountPayment extends string = string,
  TAccountEscrow extends string = string,
  TAccountReentrancyGuard extends string = string,
  TAccountEscrowTokenAccount extends string = string,
  TAccountRecipientTokenAccount extends string = string,
  TAccountRecipient extends string = string,
  TAccountPaymentToken extends string = string,
  TAccountAuthority extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  payment: Address<TAccountPayment>;
  escrow: Address<TAccountEscrow>;
  reentrancyGuard: Address<TAccountReentrancyGuard>;
  escrowTokenAccount: Address<TAccountEscrowTokenAccount>;
  recipientTokenAccount: Address<TAccountRecipientTokenAccount>;
  recipient: Address<TAccountRecipient>;
  paymentToken: Address<TAccountPaymentToken>;
  authority: TransactionSigner<TAccountAuthority>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  workOrder: ProcessEscrowPaymentInstructionDataArgs['workOrder'];
};

export function getProcessEscrowPaymentInstruction<
  TAccountPayment extends string,
  TAccountEscrow extends string,
  TAccountReentrancyGuard extends string,
  TAccountEscrowTokenAccount extends string,
  TAccountRecipientTokenAccount extends string,
  TAccountRecipient extends string,
  TAccountPaymentToken extends string,
  TAccountAuthority extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: ProcessEscrowPaymentInput<
    TAccountPayment,
    TAccountEscrow,
    TAccountReentrancyGuard,
    TAccountEscrowTokenAccount,
    TAccountRecipientTokenAccount,
    TAccountRecipient,
    TAccountPaymentToken,
    TAccountAuthority,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ProcessEscrowPaymentInstruction<
  TProgramAddress,
  TAccountPayment,
  TAccountEscrow,
  TAccountReentrancyGuard,
  TAccountEscrowTokenAccount,
  TAccountRecipientTokenAccount,
  TAccountRecipient,
  TAccountPaymentToken,
  TAccountAuthority,
  TAccountTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payment: { value: input.payment ?? null, isWritable: true },
    escrow: { value: input.escrow ?? null, isWritable: true },
    reentrancyGuard: { value: input.reentrancyGuard ?? null, isWritable: true },
    escrowTokenAccount: {
      value: input.escrowTokenAccount ?? null,
      isWritable: true,
    },
    recipientTokenAccount: {
      value: input.recipientTokenAccount ?? null,
      isWritable: true,
    },
    recipient: { value: input.recipient ?? null, isWritable: false },
    paymentToken: { value: input.paymentToken ?? null, isWritable: false },
    authority: { value: input.authority ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payment),
      getAccountMeta(accounts.escrow),
      getAccountMeta(accounts.reentrancyGuard),
      getAccountMeta(accounts.escrowTokenAccount),
      getAccountMeta(accounts.recipientTokenAccount),
      getAccountMeta(accounts.recipient),
      getAccountMeta(accounts.paymentToken),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getProcessEscrowPaymentInstructionDataEncoder().encode(
      args as ProcessEscrowPaymentInstructionDataArgs
    ),
  } as ProcessEscrowPaymentInstruction<
    TProgramAddress,
    TAccountPayment,
    TAccountEscrow,
    TAccountReentrancyGuard,
    TAccountEscrowTokenAccount,
    TAccountRecipientTokenAccount,
    TAccountRecipient,
    TAccountPaymentToken,
    TAccountAuthority,
    TAccountTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedProcessEscrowPaymentInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payment: TAccountMetas[0];
    escrow: TAccountMetas[1];
    reentrancyGuard: TAccountMetas[2];
    escrowTokenAccount: TAccountMetas[3];
    recipientTokenAccount: TAccountMetas[4];
    recipient: TAccountMetas[5];
    paymentToken: TAccountMetas[6];
    authority: TAccountMetas[7];
    tokenProgram: TAccountMetas[8];
    systemProgram: TAccountMetas[9];
  };
  data: ProcessEscrowPaymentInstructionData;
};

export function parseProcessEscrowPaymentInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedProcessEscrowPaymentInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payment: getNextAccount(),
      escrow: getNextAccount(),
      reentrancyGuard: getNextAccount(),
      escrowTokenAccount: getNextAccount(),
      recipientTokenAccount: getNextAccount(),
      recipient: getNextAccount(),
      paymentToken: getNextAccount(),
      authority: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getProcessEscrowPaymentInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
