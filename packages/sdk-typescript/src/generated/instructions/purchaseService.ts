/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import {
  GHOSTSPEAK_MARKETPLACE_ERROR__INSUFFICIENT_ACCOUNTS,
  GHOSTSPEAK_MARKETPLACE_ERROR__INVALID_INSTRUCTION_DATA,
  GHOSTSPEAK_MARKETPLACE_ERROR__MISSING_REQUIRED_ACCOUNT,
  GHOSTSPEAK_MARKETPLACE_ERROR__INVALID_ACCOUNT,
  GHOSTSPEAK_MARKETPLACE_ERROR__INSTRUCTION_PARSING_FAILED,
  isGhostspeakMarketplaceError,
} from '../errors';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const PURCHASE_SERVICE_DISCRIMINATOR = new Uint8Array([
  197, 43, 201, 158, 119, 134, 66, 7,
]);

export function getPurchaseServiceDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    PURCHASE_SERVICE_DISCRIMINATOR
  );
}

export type PurchaseServiceInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountServicePurchase extends string | AccountMeta<string> = string,
  TAccountServiceListing extends string | AccountMeta<string> = string,
  TAccountBuyer extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountServicePurchase extends string
        ? WritableAccount<TAccountServicePurchase>
        : TAccountServicePurchase,
      TAccountServiceListing extends string
        ? WritableAccount<TAccountServiceListing>
        : TAccountServiceListing,
      TAccountBuyer extends string
        ? WritableSignerAccount<TAccountBuyer> &
            AccountSignerMeta<TAccountBuyer>
        : TAccountBuyer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type PurchaseServiceInstructionData = {
  discriminator: ReadonlyUint8Array;
  listingId: bigint;
  quantity: number;
  requirements: Array<string>;
  customInstructions: string;
  deadline: bigint;
};

export type PurchaseServiceInstructionDataArgs = {
  listingId: number | bigint;
  quantity: number;
  requirements: Array<string>;
  customInstructions: string;
  deadline: number | bigint;
};

export function getPurchaseServiceInstructionDataEncoder(): Encoder<PurchaseServiceInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['listingId', getU64Encoder()],
      ['quantity', getU32Encoder()],
      [
        'requirements',
        getArrayEncoder(
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())
        ),
      ],
      [
        'customInstructions',
        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
      ],
      ['deadline', getI64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: PURCHASE_SERVICE_DISCRIMINATOR })
  );
}

export function getPurchaseServiceInstructionDataDecoder(): Decoder<PurchaseServiceInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['listingId', getU64Decoder()],
    ['quantity', getU32Decoder()],
    [
      'requirements',
      getArrayDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
    [
      'customInstructions',
      addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder()),
    ],
    ['deadline', getI64Decoder()],
  ]);
}

export function getPurchaseServiceInstructionDataCodec(): Codec<
  PurchaseServiceInstructionDataArgs,
  PurchaseServiceInstructionData
> {
  return combineCodec(
    getPurchaseServiceInstructionDataEncoder(),
    getPurchaseServiceInstructionDataDecoder()
  );
}

export type PurchaseServiceAsyncInput<
  TAccountServicePurchase extends string = string,
  TAccountServiceListing extends string = string,
  TAccountBuyer extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  servicePurchase?: Address<TAccountServicePurchase>;
  serviceListing: Address<TAccountServiceListing>;
  buyer: TransactionSigner<TAccountBuyer>;
  systemProgram?: Address<TAccountSystemProgram>;
  listingId: PurchaseServiceInstructionDataArgs['listingId'];
  quantity: PurchaseServiceInstructionDataArgs['quantity'];
  requirements: PurchaseServiceInstructionDataArgs['requirements'];
  customInstructions: PurchaseServiceInstructionDataArgs['customInstructions'];
  deadline: PurchaseServiceInstructionDataArgs['deadline'];
};

export async function getPurchaseServiceInstructionAsync<
  TAccountServicePurchase extends string,
  TAccountServiceListing extends string,
  TAccountBuyer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: PurchaseServiceAsyncInput<
    TAccountServicePurchase,
    TAccountServiceListing,
    TAccountBuyer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  PurchaseServiceInstruction<
    TProgramAddress,
    TAccountServicePurchase,
    TAccountServiceListing,
    TAccountBuyer,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    servicePurchase: { value: input.servicePurchase ?? null, isWritable: true },
    serviceListing: { value: input.serviceListing ?? null, isWritable: true },
    buyer: { value: input.buyer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.servicePurchase.value) {
    accounts.servicePurchase.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            115, 101, 114, 118, 105, 99, 101, 95, 112, 117, 114, 99, 104, 97,
            115, 101,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.buyer.value)),
        getAddressEncoder().encode(
          expectAddress(accounts.serviceListing.value)
        ),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.servicePurchase),
      getAccountMeta(accounts.serviceListing),
      getAccountMeta(accounts.buyer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getPurchaseServiceInstructionDataEncoder().encode(
      args as PurchaseServiceInstructionDataArgs
    ),
  } as PurchaseServiceInstruction<
    TProgramAddress,
    TAccountServicePurchase,
    TAccountServiceListing,
    TAccountBuyer,
    TAccountSystemProgram
  >;

  return instruction;
}

export type PurchaseServiceInput<
  TAccountServicePurchase extends string = string,
  TAccountServiceListing extends string = string,
  TAccountBuyer extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  servicePurchase: Address<TAccountServicePurchase>;
  serviceListing: Address<TAccountServiceListing>;
  buyer: TransactionSigner<TAccountBuyer>;
  systemProgram?: Address<TAccountSystemProgram>;
  listingId: PurchaseServiceInstructionDataArgs['listingId'];
  quantity: PurchaseServiceInstructionDataArgs['quantity'];
  requirements: PurchaseServiceInstructionDataArgs['requirements'];
  customInstructions: PurchaseServiceInstructionDataArgs['customInstructions'];
  deadline: PurchaseServiceInstructionDataArgs['deadline'];
};

export function getPurchaseServiceInstruction<
  TAccountServicePurchase extends string,
  TAccountServiceListing extends string,
  TAccountBuyer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: PurchaseServiceInput<
    TAccountServicePurchase,
    TAccountServiceListing,
    TAccountBuyer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): PurchaseServiceInstruction<
  TProgramAddress,
  TAccountServicePurchase,
  TAccountServiceListing,
  TAccountBuyer,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    servicePurchase: { value: input.servicePurchase ?? null, isWritable: true },
    serviceListing: { value: input.serviceListing ?? null, isWritable: true },
    buyer: { value: input.buyer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.servicePurchase),
      getAccountMeta(accounts.serviceListing),
      getAccountMeta(accounts.buyer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getPurchaseServiceInstructionDataEncoder().encode(
      args as PurchaseServiceInstructionDataArgs
    ),
  } as PurchaseServiceInstruction<
    TProgramAddress,
    TAccountServicePurchase,
    TAccountServiceListing,
    TAccountBuyer,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedPurchaseServiceInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    servicePurchase: TAccountMetas[0];
    serviceListing: TAccountMetas[1];
    buyer: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
  };
  data: PurchaseServiceInstructionData;
};

export function parsePurchaseServiceInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedPurchaseServiceInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    throw new Error('[GHOSTSPEAK_MARKETPLACE_ERROR__INSUFFICIENT_ACCOUNTS] Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      servicePurchase: getNextAccount(),
      serviceListing: getNextAccount(),
      buyer: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getPurchaseServiceInstructionDataDecoder().decode(instruction.data),
  };
}
