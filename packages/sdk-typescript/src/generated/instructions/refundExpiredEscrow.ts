/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const REFUND_EXPIRED_ESCROW_DISCRIMINATOR = new Uint8Array([
  40, 9, 115, 148, 140, 7, 157, 160,
]);

export function getRefundExpiredEscrowDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REFUND_EXPIRED_ESCROW_DISCRIMINATOR
  );
}

export type RefundExpiredEscrowInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountEscrow extends string | AccountMeta<string> = string,
  TAccountReentrancyGuard extends string | AccountMeta<string> = string,
  TAccountEscrowTokenAccount extends string | AccountMeta<string> = string,
  TAccountClientRefundAccount extends string | AccountMeta<string> = string,
  TAccountPaymentToken extends string | AccountMeta<string> = string,
  TAccountCaller extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountEscrow extends string
        ? WritableAccount<TAccountEscrow>
        : TAccountEscrow,
      TAccountReentrancyGuard extends string
        ? WritableAccount<TAccountReentrancyGuard>
        : TAccountReentrancyGuard,
      TAccountEscrowTokenAccount extends string
        ? WritableAccount<TAccountEscrowTokenAccount>
        : TAccountEscrowTokenAccount,
      TAccountClientRefundAccount extends string
        ? WritableAccount<TAccountClientRefundAccount>
        : TAccountClientRefundAccount,
      TAccountPaymentToken extends string
        ? ReadonlyAccount<TAccountPaymentToken>
        : TAccountPaymentToken,
      TAccountCaller extends string
        ? WritableSignerAccount<TAccountCaller> &
            AccountSignerMeta<TAccountCaller>
        : TAccountCaller,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type RefundExpiredEscrowInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type RefundExpiredEscrowInstructionDataArgs = {};

export function getRefundExpiredEscrowInstructionDataEncoder(): FixedSizeEncoder<RefundExpiredEscrowInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: REFUND_EXPIRED_ESCROW_DISCRIMINATOR,
    })
  );
}

export function getRefundExpiredEscrowInstructionDataDecoder(): FixedSizeDecoder<RefundExpiredEscrowInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getRefundExpiredEscrowInstructionDataCodec(): FixedSizeCodec<
  RefundExpiredEscrowInstructionDataArgs,
  RefundExpiredEscrowInstructionData
> {
  return combineCodec(
    getRefundExpiredEscrowInstructionDataEncoder(),
    getRefundExpiredEscrowInstructionDataDecoder()
  );
}

export type RefundExpiredEscrowAsyncInput<
  TAccountEscrow extends string = string,
  TAccountReentrancyGuard extends string = string,
  TAccountEscrowTokenAccount extends string = string,
  TAccountClientRefundAccount extends string = string,
  TAccountPaymentToken extends string = string,
  TAccountCaller extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  escrow: Address<TAccountEscrow>;
  reentrancyGuard?: Address<TAccountReentrancyGuard>;
  escrowTokenAccount: Address<TAccountEscrowTokenAccount>;
  clientRefundAccount: Address<TAccountClientRefundAccount>;
  /** The token mint used for payments */
  paymentToken: Address<TAccountPaymentToken>;
  /** Can be called by anyone for expired escrows */
  caller: TransactionSigner<TAccountCaller>;
  tokenProgram?: Address<TAccountTokenProgram>;
};

export async function getRefundExpiredEscrowInstructionAsync<
  TAccountEscrow extends string,
  TAccountReentrancyGuard extends string,
  TAccountEscrowTokenAccount extends string,
  TAccountClientRefundAccount extends string,
  TAccountPaymentToken extends string,
  TAccountCaller extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: RefundExpiredEscrowAsyncInput<
    TAccountEscrow,
    TAccountReentrancyGuard,
    TAccountEscrowTokenAccount,
    TAccountClientRefundAccount,
    TAccountPaymentToken,
    TAccountCaller,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  RefundExpiredEscrowInstruction<
    TProgramAddress,
    TAccountEscrow,
    TAccountReentrancyGuard,
    TAccountEscrowTokenAccount,
    TAccountClientRefundAccount,
    TAccountPaymentToken,
    TAccountCaller,
    TAccountTokenProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    escrow: { value: input.escrow ?? null, isWritable: true },
    reentrancyGuard: { value: input.reentrancyGuard ?? null, isWritable: true },
    escrowTokenAccount: {
      value: input.escrowTokenAccount ?? null,
      isWritable: true,
    },
    clientRefundAccount: {
      value: input.clientRefundAccount ?? null,
      isWritable: true,
    },
    paymentToken: { value: input.paymentToken ?? null, isWritable: false },
    caller: { value: input.caller ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.reentrancyGuard.value) {
    accounts.reentrancyGuard.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            114, 101, 101, 110, 116, 114, 97, 110, 99, 121, 95, 103, 117, 97,
            114, 100,
          ])
        ),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.escrow),
      getAccountMeta(accounts.reentrancyGuard),
      getAccountMeta(accounts.escrowTokenAccount),
      getAccountMeta(accounts.clientRefundAccount),
      getAccountMeta(accounts.paymentToken),
      getAccountMeta(accounts.caller),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getRefundExpiredEscrowInstructionDataEncoder().encode({}),
  } as RefundExpiredEscrowInstruction<
    TProgramAddress,
    TAccountEscrow,
    TAccountReentrancyGuard,
    TAccountEscrowTokenAccount,
    TAccountClientRefundAccount,
    TAccountPaymentToken,
    TAccountCaller,
    TAccountTokenProgram
  >;

  return instruction;
}

export type RefundExpiredEscrowInput<
  TAccountEscrow extends string = string,
  TAccountReentrancyGuard extends string = string,
  TAccountEscrowTokenAccount extends string = string,
  TAccountClientRefundAccount extends string = string,
  TAccountPaymentToken extends string = string,
  TAccountCaller extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  escrow: Address<TAccountEscrow>;
  reentrancyGuard: Address<TAccountReentrancyGuard>;
  escrowTokenAccount: Address<TAccountEscrowTokenAccount>;
  clientRefundAccount: Address<TAccountClientRefundAccount>;
  /** The token mint used for payments */
  paymentToken: Address<TAccountPaymentToken>;
  /** Can be called by anyone for expired escrows */
  caller: TransactionSigner<TAccountCaller>;
  tokenProgram?: Address<TAccountTokenProgram>;
};

export function getRefundExpiredEscrowInstruction<
  TAccountEscrow extends string,
  TAccountReentrancyGuard extends string,
  TAccountEscrowTokenAccount extends string,
  TAccountClientRefundAccount extends string,
  TAccountPaymentToken extends string,
  TAccountCaller extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: RefundExpiredEscrowInput<
    TAccountEscrow,
    TAccountReentrancyGuard,
    TAccountEscrowTokenAccount,
    TAccountClientRefundAccount,
    TAccountPaymentToken,
    TAccountCaller,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): RefundExpiredEscrowInstruction<
  TProgramAddress,
  TAccountEscrow,
  TAccountReentrancyGuard,
  TAccountEscrowTokenAccount,
  TAccountClientRefundAccount,
  TAccountPaymentToken,
  TAccountCaller,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    escrow: { value: input.escrow ?? null, isWritable: true },
    reentrancyGuard: { value: input.reentrancyGuard ?? null, isWritable: true },
    escrowTokenAccount: {
      value: input.escrowTokenAccount ?? null,
      isWritable: true,
    },
    clientRefundAccount: {
      value: input.clientRefundAccount ?? null,
      isWritable: true,
    },
    paymentToken: { value: input.paymentToken ?? null, isWritable: false },
    caller: { value: input.caller ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.escrow),
      getAccountMeta(accounts.reentrancyGuard),
      getAccountMeta(accounts.escrowTokenAccount),
      getAccountMeta(accounts.clientRefundAccount),
      getAccountMeta(accounts.paymentToken),
      getAccountMeta(accounts.caller),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getRefundExpiredEscrowInstructionDataEncoder().encode({}),
  } as RefundExpiredEscrowInstruction<
    TProgramAddress,
    TAccountEscrow,
    TAccountReentrancyGuard,
    TAccountEscrowTokenAccount,
    TAccountClientRefundAccount,
    TAccountPaymentToken,
    TAccountCaller,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedRefundExpiredEscrowInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    escrow: TAccountMetas[0];
    reentrancyGuard: TAccountMetas[1];
    escrowTokenAccount: TAccountMetas[2];
    clientRefundAccount: TAccountMetas[3];
    /** The token mint used for payments */
    paymentToken: TAccountMetas[4];
    /** Can be called by anyone for expired escrows */
    caller: TAccountMetas[5];
    tokenProgram: TAccountMetas[6];
  };
  data: RefundExpiredEscrowInstructionData;
};

export function parseRefundExpiredEscrowInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedRefundExpiredEscrowInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      escrow: getNextAccount(),
      reentrancyGuard: getNextAccount(),
      escrowTokenAccount: getNextAccount(),
      clientRefundAccount: getNextAccount(),
      paymentToken: getNextAccount(),
      caller: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getRefundExpiredEscrowInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
