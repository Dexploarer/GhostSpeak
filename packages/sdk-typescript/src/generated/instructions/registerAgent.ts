/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const REGISTER_AGENT_DISCRIMINATOR = new Uint8Array([
  135, 157, 66, 195, 2, 113, 175, 30,
]);

export function getRegisterAgentDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REGISTER_AGENT_DISCRIMINATOR
  );
}

export type RegisterAgentInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountAgentAccount extends string | AccountMeta<string> = string,
  TAccountUserRegistry extends string | AccountMeta<string> = string,
  TAccountSigner extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountClock extends
    | string
    | AccountMeta<string> = 'SysvarC1ock11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAgentAccount extends string
        ? WritableAccount<TAccountAgentAccount>
        : TAccountAgentAccount,
      TAccountUserRegistry extends string
        ? WritableAccount<TAccountUserRegistry>
        : TAccountUserRegistry,
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            AccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountClock extends string
        ? ReadonlyAccount<TAccountClock>
        : TAccountClock,
      ...TRemainingAccounts,
    ]
  >;

export type RegisterAgentInstructionData = {
  discriminator: ReadonlyUint8Array;
  agentType: number;
  metadataUri: string;
  agentId: string;
};

export type RegisterAgentInstructionDataArgs = {
  agentType: number;
  metadataUri: string;
  agentId: string;
};

export function getRegisterAgentInstructionDataEncoder(): Encoder<RegisterAgentInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['agentType', getU8Encoder()],
      ['metadataUri', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['agentId', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ]),
    (value) => ({ ...value, discriminator: REGISTER_AGENT_DISCRIMINATOR })
  );
}

export function getRegisterAgentInstructionDataDecoder(): Decoder<RegisterAgentInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['agentType', getU8Decoder()],
    ['metadataUri', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['agentId', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getRegisterAgentInstructionDataCodec(): Codec<
  RegisterAgentInstructionDataArgs,
  RegisterAgentInstructionData
> {
  return combineCodec(
    getRegisterAgentInstructionDataEncoder(),
    getRegisterAgentInstructionDataDecoder()
  );
}

export type RegisterAgentAsyncInput<
  TAccountAgentAccount extends string = string,
  TAccountUserRegistry extends string = string,
  TAccountSigner extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountClock extends string = string,
> = {
  /** Agent account with enhanced 2025 PDA security */
  agentAccount?: Address<TAccountAgentAccount>;
  /** User registry with enhanced validation */
  userRegistry?: Address<TAccountUserRegistry>;
  /** Authority with enhanced verification */
  signer: TransactionSigner<TAccountSigner>;
  /** System program for account creation */
  systemProgram?: Address<TAccountSystemProgram>;
  /** Clock sysvar for timestamp validation */
  clock?: Address<TAccountClock>;
  agentType: RegisterAgentInstructionDataArgs['agentType'];
  metadataUri: RegisterAgentInstructionDataArgs['metadataUri'];
  agentId: RegisterAgentInstructionDataArgs['agentId'];
};

export async function getRegisterAgentInstructionAsync<
  TAccountAgentAccount extends string,
  TAccountUserRegistry extends string,
  TAccountSigner extends string,
  TAccountSystemProgram extends string,
  TAccountClock extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: RegisterAgentAsyncInput<
    TAccountAgentAccount,
    TAccountUserRegistry,
    TAccountSigner,
    TAccountSystemProgram,
    TAccountClock
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  RegisterAgentInstruction<
    TProgramAddress,
    TAccountAgentAccount,
    TAccountUserRegistry,
    TAccountSigner,
    TAccountSystemProgram,
    TAccountClock
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    agentAccount: { value: input.agentAccount ?? null, isWritable: true },
    userRegistry: { value: input.userRegistry ?? null, isWritable: true },
    signer: { value: input.signer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    clock: { value: input.clock ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.agentAccount.value) {
    accounts.agentAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([97, 103, 101, 110, 116])),
        getAddressEncoder().encode(expectAddress(accounts.signer.value)),
        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()).encode(
          expectSome(args.agentId)
        ),
      ],
    });
  }
  if (!accounts.userRegistry.value) {
    accounts.userRegistry.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            117, 115, 101, 114, 95, 114, 101, 103, 105, 115, 116, 114, 121,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.signer.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.agentAccount),
      getAccountMeta(accounts.userRegistry),
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.clock),
    ],
    programAddress,
    data: getRegisterAgentInstructionDataEncoder().encode(
      args as RegisterAgentInstructionDataArgs
    ),
  } as RegisterAgentInstruction<
    TProgramAddress,
    TAccountAgentAccount,
    TAccountUserRegistry,
    TAccountSigner,
    TAccountSystemProgram,
    TAccountClock
  >;

  return instruction;
}

export type RegisterAgentInput<
  TAccountAgentAccount extends string = string,
  TAccountUserRegistry extends string = string,
  TAccountSigner extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountClock extends string = string,
> = {
  /** Agent account with enhanced 2025 PDA security */
  agentAccount: Address<TAccountAgentAccount>;
  /** User registry with enhanced validation */
  userRegistry: Address<TAccountUserRegistry>;
  /** Authority with enhanced verification */
  signer: TransactionSigner<TAccountSigner>;
  /** System program for account creation */
  systemProgram?: Address<TAccountSystemProgram>;
  /** Clock sysvar for timestamp validation */
  clock?: Address<TAccountClock>;
  agentType: RegisterAgentInstructionDataArgs['agentType'];
  metadataUri: RegisterAgentInstructionDataArgs['metadataUri'];
  agentId: RegisterAgentInstructionDataArgs['agentId'];
};

export function getRegisterAgentInstruction<
  TAccountAgentAccount extends string,
  TAccountUserRegistry extends string,
  TAccountSigner extends string,
  TAccountSystemProgram extends string,
  TAccountClock extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: RegisterAgentInput<
    TAccountAgentAccount,
    TAccountUserRegistry,
    TAccountSigner,
    TAccountSystemProgram,
    TAccountClock
  >,
  config?: { programAddress?: TProgramAddress }
): RegisterAgentInstruction<
  TProgramAddress,
  TAccountAgentAccount,
  TAccountUserRegistry,
  TAccountSigner,
  TAccountSystemProgram,
  TAccountClock
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    agentAccount: { value: input.agentAccount ?? null, isWritable: true },
    userRegistry: { value: input.userRegistry ?? null, isWritable: true },
    signer: { value: input.signer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    clock: { value: input.clock ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.agentAccount),
      getAccountMeta(accounts.userRegistry),
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.clock),
    ],
    programAddress,
    data: getRegisterAgentInstructionDataEncoder().encode(
      args as RegisterAgentInstructionDataArgs
    ),
  } as RegisterAgentInstruction<
    TProgramAddress,
    TAccountAgentAccount,
    TAccountUserRegistry,
    TAccountSigner,
    TAccountSystemProgram,
    TAccountClock
  >;

  return instruction;
}

export type ParsedRegisterAgentInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Agent account with enhanced 2025 PDA security */
    agentAccount: TAccountMetas[0];
    /** User registry with enhanced validation */
    userRegistry: TAccountMetas[1];
    /** Authority with enhanced verification */
    signer: TAccountMetas[2];
    /** System program for account creation */
    systemProgram: TAccountMetas[3];
    /** Clock sysvar for timestamp validation */
    clock: TAccountMetas[4];
  };
  data: RegisterAgentInstructionData;
};

export function parseRegisterAgentInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedRegisterAgentInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      agentAccount: getNextAccount(),
      userRegistry: getNextAccount(),
      signer: getNextAccount(),
      systemProgram: getNextAccount(),
      clock: getNextAccount(),
    },
    data: getRegisterAgentInstructionDataDecoder().decode(instruction.data),
  };
}
