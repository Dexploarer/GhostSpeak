/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import {
  GHOSTSPEAK_MARKETPLACE_ERROR__INSUFFICIENT_ACCOUNTS,
  GHOSTSPEAK_MARKETPLACE_ERROR__INVALID_INSTRUCTION_DATA,
  GHOSTSPEAK_MARKETPLACE_ERROR__MISSING_REQUIRED_ACCOUNT,
  GHOSTSPEAK_MARKETPLACE_ERROR__INVALID_ACCOUNT,
  GHOSTSPEAK_MARKETPLACE_ERROR__INSTRUCTION_PARSING_FAILED,
  isGhostspeakMarketplaceError,
} from '../errors';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const REGISTER_AGENT_COMPRESSED_DISCRIMINATOR = new Uint8Array([
  15, 6, 94, 55, 65, 80, 123, 248,
]);

export function getRegisterAgentCompressedDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REGISTER_AGENT_COMPRESSED_DISCRIMINATOR
  );
}

export type RegisterAgentCompressedInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountTreeAuthority extends string | AccountMeta<string> = string,
  TAccountMerkleTree extends string | AccountMeta<string> = string,
  TAccountUserRegistry extends string | AccountMeta<string> = string,
  TAccountSigner extends string | AccountMeta<string> = string,
  TAccountCompressionProgram extends
    | string
    | AccountMeta<string> = 'cmtDvXumGCrqC1Age74AVPhSRVXJMd8PJS91L8KbNCK',
  TAccountLogWrapper extends
    | string
    | AccountMeta<string> = 'noopb9bkMVfRPU8AsbpTUg8AQkHtKwMYZiFUjNRtMmV',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountClock extends
    | string
    | AccountMeta<string> = 'SysvarC1ock11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountTreeAuthority extends string
        ? WritableAccount<TAccountTreeAuthority>
        : TAccountTreeAuthority,
      TAccountMerkleTree extends string
        ? WritableAccount<TAccountMerkleTree>
        : TAccountMerkleTree,
      TAccountUserRegistry extends string
        ? WritableAccount<TAccountUserRegistry>
        : TAccountUserRegistry,
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            AccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountCompressionProgram extends string
        ? ReadonlyAccount<TAccountCompressionProgram>
        : TAccountCompressionProgram,
      TAccountLogWrapper extends string
        ? ReadonlyAccount<TAccountLogWrapper>
        : TAccountLogWrapper,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountClock extends string
        ? ReadonlyAccount<TAccountClock>
        : TAccountClock,
      ...TRemainingAccounts,
    ]
  >;

export type RegisterAgentCompressedInstructionData = {
  discriminator: ReadonlyUint8Array;
  agentType: number;
  metadataUri: string;
  agentId: string;
};

export type RegisterAgentCompressedInstructionDataArgs = {
  agentType: number;
  metadataUri: string;
  agentId: string;
};

export function getRegisterAgentCompressedInstructionDataEncoder(): Encoder<RegisterAgentCompressedInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['agentType', getU8Encoder()],
      ['metadataUri', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['agentId', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: REGISTER_AGENT_COMPRESSED_DISCRIMINATOR,
    })
  );
}

export function getRegisterAgentCompressedInstructionDataDecoder(): Decoder<RegisterAgentCompressedInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['agentType', getU8Decoder()],
    ['metadataUri', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['agentId', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getRegisterAgentCompressedInstructionDataCodec(): Codec<
  RegisterAgentCompressedInstructionDataArgs,
  RegisterAgentCompressedInstructionData
> {
  return combineCodec(
    getRegisterAgentCompressedInstructionDataEncoder(),
    getRegisterAgentCompressedInstructionDataDecoder()
  );
}

export type RegisterAgentCompressedAsyncInput<
  TAccountTreeAuthority extends string = string,
  TAccountMerkleTree extends string = string,
  TAccountUserRegistry extends string = string,
  TAccountSigner extends string = string,
  TAccountCompressionProgram extends string = string,
  TAccountLogWrapper extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountClock extends string = string,
> = {
  /** Tree authority PDA that manages the compressed Agent tree */
  treeAuthority?: Address<TAccountTreeAuthority>;
  /** The Merkle tree account that stores compressed Agent data */
  merkleTree: Address<TAccountMerkleTree>;
  /** User registry with enhanced validation */
  userRegistry?: Address<TAccountUserRegistry>;
  /** Authority with enhanced verification */
  signer: TransactionSigner<TAccountSigner>;
  /** SPL Account Compression program */
  compressionProgram?: Address<TAccountCompressionProgram>;
  /** SPL Noop program for logging */
  logWrapper?: Address<TAccountLogWrapper>;
  /** System program for account creation */
  systemProgram?: Address<TAccountSystemProgram>;
  /** Clock sysvar for timestamps */
  clock?: Address<TAccountClock>;
  agentType: RegisterAgentCompressedInstructionDataArgs['agentType'];
  metadataUri: RegisterAgentCompressedInstructionDataArgs['metadataUri'];
  agentId: RegisterAgentCompressedInstructionDataArgs['agentId'];
};

export async function getRegisterAgentCompressedInstructionAsync<
  TAccountTreeAuthority extends string,
  TAccountMerkleTree extends string,
  TAccountUserRegistry extends string,
  TAccountSigner extends string,
  TAccountCompressionProgram extends string,
  TAccountLogWrapper extends string,
  TAccountSystemProgram extends string,
  TAccountClock extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: RegisterAgentCompressedAsyncInput<
    TAccountTreeAuthority,
    TAccountMerkleTree,
    TAccountUserRegistry,
    TAccountSigner,
    TAccountCompressionProgram,
    TAccountLogWrapper,
    TAccountSystemProgram,
    TAccountClock
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  RegisterAgentCompressedInstruction<
    TProgramAddress,
    TAccountTreeAuthority,
    TAccountMerkleTree,
    TAccountUserRegistry,
    TAccountSigner,
    TAccountCompressionProgram,
    TAccountLogWrapper,
    TAccountSystemProgram,
    TAccountClock
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    treeAuthority: { value: input.treeAuthority ?? null, isWritable: true },
    merkleTree: { value: input.merkleTree ?? null, isWritable: true },
    userRegistry: { value: input.userRegistry ?? null, isWritable: true },
    signer: { value: input.signer ?? null, isWritable: true },
    compressionProgram: {
      value: input.compressionProgram ?? null,
      isWritable: false,
    },
    logWrapper: { value: input.logWrapper ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    clock: { value: input.clock ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.treeAuthority.value) {
    accounts.treeAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            97, 103, 101, 110, 116, 95, 116, 114, 101, 101, 95, 99, 111, 110,
            102, 105, 103,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.signer.value)),
      ],
    });
  }
  if (!accounts.userRegistry.value) {
    accounts.userRegistry.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            117, 115, 101, 114, 95, 114, 101, 103, 105, 115, 116, 114, 121,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.signer.value)),
      ],
    });
  }
  if (!accounts.compressionProgram.value) {
    accounts.compressionProgram.value =
      'cmtDvXumGCrqC1Age74AVPhSRVXJMd8PJS91L8KbNCK' as Address<'cmtDvXumGCrqC1Age74AVPhSRVXJMd8PJS91L8KbNCK'>;
  }
  if (!accounts.logWrapper.value) {
    accounts.logWrapper.value =
      'noopb9bkMVfRPU8AsbpTUg8AQkHtKwMYZiFUjNRtMmV' as Address<'noopb9bkMVfRPU8AsbpTUg8AQkHtKwMYZiFUjNRtMmV'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.treeAuthority),
      getAccountMeta(accounts.merkleTree),
      getAccountMeta(accounts.userRegistry),
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.compressionProgram),
      getAccountMeta(accounts.logWrapper),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.clock),
    ],
    programAddress,
    data: getRegisterAgentCompressedInstructionDataEncoder().encode(
      args as RegisterAgentCompressedInstructionDataArgs
    ),
  } as RegisterAgentCompressedInstruction<
    TProgramAddress,
    TAccountTreeAuthority,
    TAccountMerkleTree,
    TAccountUserRegistry,
    TAccountSigner,
    TAccountCompressionProgram,
    TAccountLogWrapper,
    TAccountSystemProgram,
    TAccountClock
  >;

  return instruction;
}

export type RegisterAgentCompressedInput<
  TAccountTreeAuthority extends string = string,
  TAccountMerkleTree extends string = string,
  TAccountUserRegistry extends string = string,
  TAccountSigner extends string = string,
  TAccountCompressionProgram extends string = string,
  TAccountLogWrapper extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountClock extends string = string,
> = {
  /** Tree authority PDA that manages the compressed Agent tree */
  treeAuthority: Address<TAccountTreeAuthority>;
  /** The Merkle tree account that stores compressed Agent data */
  merkleTree: Address<TAccountMerkleTree>;
  /** User registry with enhanced validation */
  userRegistry: Address<TAccountUserRegistry>;
  /** Authority with enhanced verification */
  signer: TransactionSigner<TAccountSigner>;
  /** SPL Account Compression program */
  compressionProgram?: Address<TAccountCompressionProgram>;
  /** SPL Noop program for logging */
  logWrapper?: Address<TAccountLogWrapper>;
  /** System program for account creation */
  systemProgram?: Address<TAccountSystemProgram>;
  /** Clock sysvar for timestamps */
  clock?: Address<TAccountClock>;
  agentType: RegisterAgentCompressedInstructionDataArgs['agentType'];
  metadataUri: RegisterAgentCompressedInstructionDataArgs['metadataUri'];
  agentId: RegisterAgentCompressedInstructionDataArgs['agentId'];
};

export function getRegisterAgentCompressedInstruction<
  TAccountTreeAuthority extends string,
  TAccountMerkleTree extends string,
  TAccountUserRegistry extends string,
  TAccountSigner extends string,
  TAccountCompressionProgram extends string,
  TAccountLogWrapper extends string,
  TAccountSystemProgram extends string,
  TAccountClock extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: RegisterAgentCompressedInput<
    TAccountTreeAuthority,
    TAccountMerkleTree,
    TAccountUserRegistry,
    TAccountSigner,
    TAccountCompressionProgram,
    TAccountLogWrapper,
    TAccountSystemProgram,
    TAccountClock
  >,
  config?: { programAddress?: TProgramAddress }
): RegisterAgentCompressedInstruction<
  TProgramAddress,
  TAccountTreeAuthority,
  TAccountMerkleTree,
  TAccountUserRegistry,
  TAccountSigner,
  TAccountCompressionProgram,
  TAccountLogWrapper,
  TAccountSystemProgram,
  TAccountClock
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    treeAuthority: { value: input.treeAuthority ?? null, isWritable: true },
    merkleTree: { value: input.merkleTree ?? null, isWritable: true },
    userRegistry: { value: input.userRegistry ?? null, isWritable: true },
    signer: { value: input.signer ?? null, isWritable: true },
    compressionProgram: {
      value: input.compressionProgram ?? null,
      isWritable: false,
    },
    logWrapper: { value: input.logWrapper ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    clock: { value: input.clock ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.compressionProgram.value) {
    accounts.compressionProgram.value =
      'cmtDvXumGCrqC1Age74AVPhSRVXJMd8PJS91L8KbNCK' as Address<'cmtDvXumGCrqC1Age74AVPhSRVXJMd8PJS91L8KbNCK'>;
  }
  if (!accounts.logWrapper.value) {
    accounts.logWrapper.value =
      'noopb9bkMVfRPU8AsbpTUg8AQkHtKwMYZiFUjNRtMmV' as Address<'noopb9bkMVfRPU8AsbpTUg8AQkHtKwMYZiFUjNRtMmV'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.treeAuthority),
      getAccountMeta(accounts.merkleTree),
      getAccountMeta(accounts.userRegistry),
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.compressionProgram),
      getAccountMeta(accounts.logWrapper),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.clock),
    ],
    programAddress,
    data: getRegisterAgentCompressedInstructionDataEncoder().encode(
      args as RegisterAgentCompressedInstructionDataArgs
    ),
  } as RegisterAgentCompressedInstruction<
    TProgramAddress,
    TAccountTreeAuthority,
    TAccountMerkleTree,
    TAccountUserRegistry,
    TAccountSigner,
    TAccountCompressionProgram,
    TAccountLogWrapper,
    TAccountSystemProgram,
    TAccountClock
  >;

  return instruction;
}

export type ParsedRegisterAgentCompressedInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Tree authority PDA that manages the compressed Agent tree */
    treeAuthority: TAccountMetas[0];
    /** The Merkle tree account that stores compressed Agent data */
    merkleTree: TAccountMetas[1];
    /** User registry with enhanced validation */
    userRegistry: TAccountMetas[2];
    /** Authority with enhanced verification */
    signer: TAccountMetas[3];
    /** SPL Account Compression program */
    compressionProgram: TAccountMetas[4];
    /** SPL Noop program for logging */
    logWrapper: TAccountMetas[5];
    /** System program for account creation */
    systemProgram: TAccountMetas[6];
    /** Clock sysvar for timestamps */
    clock: TAccountMetas[7];
  };
  data: RegisterAgentCompressedInstructionData;
};

export function parseRegisterAgentCompressedInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedRegisterAgentCompressedInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    throw new Error('[GHOSTSPEAK_MARKETPLACE_ERROR__INSUFFICIENT_ACCOUNTS] Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      treeAuthority: getNextAccount(),
      merkleTree: getNextAccount(),
      userRegistry: getNextAccount(),
      signer: getNextAccount(),
      compressionProgram: getNextAccount(),
      logWrapper: getNextAccount(),
      systemProgram: getNextAccount(),
      clock: getNextAccount(),
    },
    data: getRegisterAgentCompressedInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
