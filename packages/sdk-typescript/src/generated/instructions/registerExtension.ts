/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getF64Decoder,
  getF64Encoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
import {
  getExtensionMetadataDecoder,
  getExtensionMetadataEncoder,
  type ExtensionMetadata,
  type ExtensionMetadataArgs,
} from '../types';

export const REGISTER_EXTENSION_DISCRIMINATOR = new Uint8Array([
  158, 205, 4, 17, 6, 106, 172, 148,
]);

export function getRegisterExtensionDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REGISTER_EXTENSION_DISCRIMINATOR
  );
}

export type RegisterExtensionInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountExtension extends string | IAccountMeta<string> = string,
  TAccountUserRegistry extends string | IAccountMeta<string> = string,
  TAccountDeveloper extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountClock extends
    | string
    | IAccountMeta<string> = 'SysvarC1ock11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountExtension extends string
        ? WritableAccount<TAccountExtension>
        : TAccountExtension,
      TAccountUserRegistry extends string
        ? WritableAccount<TAccountUserRegistry>
        : TAccountUserRegistry,
      TAccountDeveloper extends string
        ? WritableSignerAccount<TAccountDeveloper> &
            IAccountSignerMeta<TAccountDeveloper>
        : TAccountDeveloper,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountClock extends string
        ? ReadonlyAccount<TAccountClock>
        : TAccountClock,
      ...TRemainingAccounts,
    ]
  >;

export type RegisterExtensionInstructionData = {
  discriminator: ReadonlyUint8Array;
  metadata: ExtensionMetadata;
  codeHash: string;
  revenueShare: number;
};

export type RegisterExtensionInstructionDataArgs = {
  metadata: ExtensionMetadataArgs;
  codeHash: string;
  revenueShare: number;
};

export function getRegisterExtensionInstructionDataEncoder(): Encoder<RegisterExtensionInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['metadata', getExtensionMetadataEncoder()],
      ['codeHash', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['revenueShare', getF64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: REGISTER_EXTENSION_DISCRIMINATOR })
  );
}

export function getRegisterExtensionInstructionDataDecoder(): Decoder<RegisterExtensionInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['metadata', getExtensionMetadataDecoder()],
    ['codeHash', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['revenueShare', getF64Decoder()],
  ]);
}

export function getRegisterExtensionInstructionDataCodec(): Codec<
  RegisterExtensionInstructionDataArgs,
  RegisterExtensionInstructionData
> {
  return combineCodec(
    getRegisterExtensionInstructionDataEncoder(),
    getRegisterExtensionInstructionDataDecoder()
  );
}

export type RegisterExtensionAsyncInput<
  TAccountExtension extends string = string,
  TAccountUserRegistry extends string = string,
  TAccountDeveloper extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountClock extends string = string,
> = {
  /** Extension account with collision prevention */
  extension: Address<TAccountExtension>;
  /** User registry for rate limiting and spam prevention */
  userRegistry?: Address<TAccountUserRegistry>;
  /** Enhanced developer verification */
  developer: TransactionSigner<TAccountDeveloper>;
  /** System program for account creation */
  systemProgram?: Address<TAccountSystemProgram>;
  /** Clock sysvar for timestamp validation */
  clock?: Address<TAccountClock>;
  metadata: RegisterExtensionInstructionDataArgs['metadata'];
  codeHash: RegisterExtensionInstructionDataArgs['codeHash'];
  revenueShare: RegisterExtensionInstructionDataArgs['revenueShare'];
};

export async function getRegisterExtensionInstructionAsync<
  TAccountExtension extends string,
  TAccountUserRegistry extends string,
  TAccountDeveloper extends string,
  TAccountSystemProgram extends string,
  TAccountClock extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: RegisterExtensionAsyncInput<
    TAccountExtension,
    TAccountUserRegistry,
    TAccountDeveloper,
    TAccountSystemProgram,
    TAccountClock
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  RegisterExtensionInstruction<
    TProgramAddress,
    TAccountExtension,
    TAccountUserRegistry,
    TAccountDeveloper,
    TAccountSystemProgram,
    TAccountClock
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    extension: { value: input.extension ?? null, isWritable: true },
    userRegistry: { value: input.userRegistry ?? null, isWritable: true },
    developer: { value: input.developer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    clock: { value: input.clock ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.userRegistry.value) {
    accounts.userRegistry.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            117, 115, 101, 114, 95, 114, 101, 103, 105, 115, 116, 114, 121,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.developer.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.extension),
      getAccountMeta(accounts.userRegistry),
      getAccountMeta(accounts.developer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.clock),
    ],
    programAddress,
    data: getRegisterExtensionInstructionDataEncoder().encode(
      args as RegisterExtensionInstructionDataArgs
    ),
  } as RegisterExtensionInstruction<
    TProgramAddress,
    TAccountExtension,
    TAccountUserRegistry,
    TAccountDeveloper,
    TAccountSystemProgram,
    TAccountClock
  >;

  return instruction;
}

export type RegisterExtensionInput<
  TAccountExtension extends string = string,
  TAccountUserRegistry extends string = string,
  TAccountDeveloper extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountClock extends string = string,
> = {
  /** Extension account with collision prevention */
  extension: Address<TAccountExtension>;
  /** User registry for rate limiting and spam prevention */
  userRegistry: Address<TAccountUserRegistry>;
  /** Enhanced developer verification */
  developer: TransactionSigner<TAccountDeveloper>;
  /** System program for account creation */
  systemProgram?: Address<TAccountSystemProgram>;
  /** Clock sysvar for timestamp validation */
  clock?: Address<TAccountClock>;
  metadata: RegisterExtensionInstructionDataArgs['metadata'];
  codeHash: RegisterExtensionInstructionDataArgs['codeHash'];
  revenueShare: RegisterExtensionInstructionDataArgs['revenueShare'];
};

export function getRegisterExtensionInstruction<
  TAccountExtension extends string,
  TAccountUserRegistry extends string,
  TAccountDeveloper extends string,
  TAccountSystemProgram extends string,
  TAccountClock extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: RegisterExtensionInput<
    TAccountExtension,
    TAccountUserRegistry,
    TAccountDeveloper,
    TAccountSystemProgram,
    TAccountClock
  >,
  config?: { programAddress?: TProgramAddress }
): RegisterExtensionInstruction<
  TProgramAddress,
  TAccountExtension,
  TAccountUserRegistry,
  TAccountDeveloper,
  TAccountSystemProgram,
  TAccountClock
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    extension: { value: input.extension ?? null, isWritable: true },
    userRegistry: { value: input.userRegistry ?? null, isWritable: true },
    developer: { value: input.developer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    clock: { value: input.clock ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.extension),
      getAccountMeta(accounts.userRegistry),
      getAccountMeta(accounts.developer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.clock),
    ],
    programAddress,
    data: getRegisterExtensionInstructionDataEncoder().encode(
      args as RegisterExtensionInstructionDataArgs
    ),
  } as RegisterExtensionInstruction<
    TProgramAddress,
    TAccountExtension,
    TAccountUserRegistry,
    TAccountDeveloper,
    TAccountSystemProgram,
    TAccountClock
  >;

  return instruction;
}

export type ParsedRegisterExtensionInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Extension account with collision prevention */
    extension: TAccountMetas[0];
    /** User registry for rate limiting and spam prevention */
    userRegistry: TAccountMetas[1];
    /** Enhanced developer verification */
    developer: TAccountMetas[2];
    /** System program for account creation */
    systemProgram: TAccountMetas[3];
    /** Clock sysvar for timestamp validation */
    clock: TAccountMetas[4];
  };
  data: RegisterExtensionInstructionData;
};

export function parseRegisterExtensionInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedRegisterExtensionInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      extension: getNextAccount(),
      userRegistry: getNextAccount(),
      developer: getNextAccount(),
      systemProgram: getNextAccount(),
      clock: getNextAccount(),
    },
    data: getRegisterExtensionInstructionDataDecoder().decode(instruction.data),
  };
}
