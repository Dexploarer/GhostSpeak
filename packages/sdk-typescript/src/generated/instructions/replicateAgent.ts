/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import {
  GHOSTSPEAK_MARKETPLACE_ERROR__INSUFFICIENT_ACCOUNTS,
  GHOSTSPEAK_MARKETPLACE_ERROR__INVALID_INSTRUCTION_DATA,
  GHOSTSPEAK_MARKETPLACE_ERROR__MISSING_REQUIRED_ACCOUNT,
  GHOSTSPEAK_MARKETPLACE_ERROR__INVALID_ACCOUNT,
  GHOSTSPEAK_MARKETPLACE_ERROR__INSTRUCTION_PARSING_FAILED,
  isGhostspeakMarketplaceError,
} from '../errors';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
import {
  getAgentCustomizationDecoder,
  getAgentCustomizationEncoder,
  type AgentCustomization,
  type AgentCustomizationArgs,
} from '../types';

export const REPLICATE_AGENT_DISCRIMINATOR = new Uint8Array([
  252, 210, 89, 130, 31, 43, 39, 50,
]);

export function getReplicateAgentDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REPLICATE_AGENT_DISCRIMINATOR
  );
}

export type ReplicateAgentInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountReplicationTemplate extends string | AccountMeta<string> = string,
  TAccountNewAgent extends string | AccountMeta<string> = string,
  TAccountReplicationRecord extends string | AccountMeta<string> = string,
  TAccountRoyaltyStream extends string | AccountMeta<string> = string,
  TAccountBuyer extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountReplicationTemplate extends string
        ? WritableAccount<TAccountReplicationTemplate>
        : TAccountReplicationTemplate,
      TAccountNewAgent extends string
        ? WritableAccount<TAccountNewAgent>
        : TAccountNewAgent,
      TAccountReplicationRecord extends string
        ? WritableAccount<TAccountReplicationRecord>
        : TAccountReplicationRecord,
      TAccountRoyaltyStream extends string
        ? WritableAccount<TAccountRoyaltyStream>
        : TAccountRoyaltyStream,
      TAccountBuyer extends string
        ? WritableSignerAccount<TAccountBuyer> &
            AccountSignerMeta<TAccountBuyer>
        : TAccountBuyer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ReplicateAgentInstructionData = {
  discriminator: ReadonlyUint8Array;
  customization: AgentCustomization;
  royaltyPercentage: number;
};

export type ReplicateAgentInstructionDataArgs = {
  customization: AgentCustomizationArgs;
  royaltyPercentage: number;
};

export function getReplicateAgentInstructionDataEncoder(): Encoder<ReplicateAgentInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['customization', getAgentCustomizationEncoder()],
      ['royaltyPercentage', getU32Encoder()],
    ]),
    (value) => ({ ...value, discriminator: REPLICATE_AGENT_DISCRIMINATOR })
  );
}

export function getReplicateAgentInstructionDataDecoder(): Decoder<ReplicateAgentInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['customization', getAgentCustomizationDecoder()],
    ['royaltyPercentage', getU32Decoder()],
  ]);
}

export function getReplicateAgentInstructionDataCodec(): Codec<
  ReplicateAgentInstructionDataArgs,
  ReplicateAgentInstructionData
> {
  return combineCodec(
    getReplicateAgentInstructionDataEncoder(),
    getReplicateAgentInstructionDataDecoder()
  );
}

export type ReplicateAgentAsyncInput<
  TAccountReplicationTemplate extends string = string,
  TAccountNewAgent extends string = string,
  TAccountReplicationRecord extends string = string,
  TAccountRoyaltyStream extends string = string,
  TAccountBuyer extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  replicationTemplate: Address<TAccountReplicationTemplate>;
  newAgent?: Address<TAccountNewAgent>;
  replicationRecord?: Address<TAccountReplicationRecord>;
  royaltyStream?: Address<TAccountRoyaltyStream>;
  buyer: TransactionSigner<TAccountBuyer>;
  systemProgram?: Address<TAccountSystemProgram>;
  customization: ReplicateAgentInstructionDataArgs['customization'];
  royaltyPercentage: ReplicateAgentInstructionDataArgs['royaltyPercentage'];
};

export async function getReplicateAgentInstructionAsync<
  TAccountReplicationTemplate extends string,
  TAccountNewAgent extends string,
  TAccountReplicationRecord extends string,
  TAccountRoyaltyStream extends string,
  TAccountBuyer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: ReplicateAgentAsyncInput<
    TAccountReplicationTemplate,
    TAccountNewAgent,
    TAccountReplicationRecord,
    TAccountRoyaltyStream,
    TAccountBuyer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  ReplicateAgentInstruction<
    TProgramAddress,
    TAccountReplicationTemplate,
    TAccountNewAgent,
    TAccountReplicationRecord,
    TAccountRoyaltyStream,
    TAccountBuyer,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    replicationTemplate: {
      value: input.replicationTemplate ?? null,
      isWritable: true,
    },
    newAgent: { value: input.newAgent ?? null, isWritable: true },
    replicationRecord: {
      value: input.replicationRecord ?? null,
      isWritable: true,
    },
    royaltyStream: { value: input.royaltyStream ?? null, isWritable: true },
    buyer: { value: input.buyer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.newAgent.value) {
    accounts.newAgent.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([97, 103, 101, 110, 116])),
        getAddressEncoder().encode(expectAddress(accounts.buyer.value)),
      ],
    });
  }
  if (!accounts.replicationRecord.value) {
    accounts.replicationRecord.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            114, 101, 112, 108, 105, 99, 97, 116, 105, 111, 110, 95, 114, 101,
            99, 111, 114, 100,
          ])
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.replicationTemplate.value)
        ),
        getAddressEncoder().encode(expectAddress(accounts.buyer.value)),
      ],
    });
  }
  if (!accounts.royaltyStream.value) {
    accounts.royaltyStream.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            114, 111, 121, 97, 108, 116, 121, 95, 115, 116, 114, 101, 97, 109,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.newAgent.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.replicationTemplate),
      getAccountMeta(accounts.newAgent),
      getAccountMeta(accounts.replicationRecord),
      getAccountMeta(accounts.royaltyStream),
      getAccountMeta(accounts.buyer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getReplicateAgentInstructionDataEncoder().encode(
      args as ReplicateAgentInstructionDataArgs
    ),
  } as ReplicateAgentInstruction<
    TProgramAddress,
    TAccountReplicationTemplate,
    TAccountNewAgent,
    TAccountReplicationRecord,
    TAccountRoyaltyStream,
    TAccountBuyer,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ReplicateAgentInput<
  TAccountReplicationTemplate extends string = string,
  TAccountNewAgent extends string = string,
  TAccountReplicationRecord extends string = string,
  TAccountRoyaltyStream extends string = string,
  TAccountBuyer extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  replicationTemplate: Address<TAccountReplicationTemplate>;
  newAgent: Address<TAccountNewAgent>;
  replicationRecord: Address<TAccountReplicationRecord>;
  royaltyStream: Address<TAccountRoyaltyStream>;
  buyer: TransactionSigner<TAccountBuyer>;
  systemProgram?: Address<TAccountSystemProgram>;
  customization: ReplicateAgentInstructionDataArgs['customization'];
  royaltyPercentage: ReplicateAgentInstructionDataArgs['royaltyPercentage'];
};

export function getReplicateAgentInstruction<
  TAccountReplicationTemplate extends string,
  TAccountNewAgent extends string,
  TAccountReplicationRecord extends string,
  TAccountRoyaltyStream extends string,
  TAccountBuyer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: ReplicateAgentInput<
    TAccountReplicationTemplate,
    TAccountNewAgent,
    TAccountReplicationRecord,
    TAccountRoyaltyStream,
    TAccountBuyer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ReplicateAgentInstruction<
  TProgramAddress,
  TAccountReplicationTemplate,
  TAccountNewAgent,
  TAccountReplicationRecord,
  TAccountRoyaltyStream,
  TAccountBuyer,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    replicationTemplate: {
      value: input.replicationTemplate ?? null,
      isWritable: true,
    },
    newAgent: { value: input.newAgent ?? null, isWritable: true },
    replicationRecord: {
      value: input.replicationRecord ?? null,
      isWritable: true,
    },
    royaltyStream: { value: input.royaltyStream ?? null, isWritable: true },
    buyer: { value: input.buyer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.replicationTemplate),
      getAccountMeta(accounts.newAgent),
      getAccountMeta(accounts.replicationRecord),
      getAccountMeta(accounts.royaltyStream),
      getAccountMeta(accounts.buyer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getReplicateAgentInstructionDataEncoder().encode(
      args as ReplicateAgentInstructionDataArgs
    ),
  } as ReplicateAgentInstruction<
    TProgramAddress,
    TAccountReplicationTemplate,
    TAccountNewAgent,
    TAccountReplicationRecord,
    TAccountRoyaltyStream,
    TAccountBuyer,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedReplicateAgentInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    replicationTemplate: TAccountMetas[0];
    newAgent: TAccountMetas[1];
    replicationRecord: TAccountMetas[2];
    royaltyStream: TAccountMetas[3];
    buyer: TAccountMetas[4];
    systemProgram: TAccountMetas[5];
  };
  data: ReplicateAgentInstructionData;
};

export function parseReplicateAgentInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedReplicateAgentInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    throw new Error('[GHOSTSPEAK_MARKETPLACE_ERROR__INSUFFICIENT_ACCOUNTS] Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      replicationTemplate: getNextAccount(),
      newAgent: getNextAccount(),
      replicationRecord: getNextAccount(),
      royaltyStream: getNextAccount(),
      buyer: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getReplicateAgentInstructionDataDecoder().decode(instruction.data),
  };
}
