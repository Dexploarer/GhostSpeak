/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
import {
  getPricingModelDecoder,
  getPricingModelEncoder,
  type PricingModel,
  type PricingModelArgs,
} from '../types';

export const REPLICATE_AGENT_DISCRIMINATOR = new Uint8Array([
  252, 210, 89, 130, 31, 43, 39, 50,
]);

export function getReplicateAgentDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REPLICATE_AGENT_DISCRIMINATOR
  );
}

export type ReplicateAgentInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountReplicationTemplate extends string | IAccountMeta<string> = string,
  TAccountNewAgent extends string | IAccountMeta<string> = string,
  TAccountReplicationRecord extends string | IAccountMeta<string> = string,
  TAccountBuyer extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountReplicationTemplate extends string
        ? WritableAccount<TAccountReplicationTemplate>
        : TAccountReplicationTemplate,
      TAccountNewAgent extends string
        ? WritableAccount<TAccountNewAgent>
        : TAccountNewAgent,
      TAccountReplicationRecord extends string
        ? WritableAccount<TAccountReplicationRecord>
        : TAccountReplicationRecord,
      TAccountBuyer extends string
        ? WritableSignerAccount<TAccountBuyer> &
            IAccountSignerMeta<TAccountBuyer>
        : TAccountBuyer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface ReplicateAgentInstructionData {
  discriminator: ReadonlyUint8Array;
  name: string;
  description: Option<string>;
  additionalCapabilities: string[];
  pricingModel: PricingModel;
  isReplicable: boolean;
  replicationFee: Option<bigint>;
}

export interface ReplicateAgentInstructionDataArgs {
  name: string;
  description: OptionOrNullable<string>;
  additionalCapabilities: string[];
  pricingModel: PricingModelArgs;
  isReplicable: boolean;
  replicationFee: OptionOrNullable<number | bigint>;
}

export function getReplicateAgentInstructionDataEncoder(): Encoder<ReplicateAgentInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['name', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      [
        'description',
        getOptionEncoder(
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())
        ),
      ],
      [
        'additionalCapabilities',
        getArrayEncoder(
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())
        ),
      ],
      ['pricingModel', getPricingModelEncoder()],
      ['isReplicable', getBooleanEncoder()],
      ['replicationFee', getOptionEncoder(getU64Encoder())],
    ]),
    (value) => ({ ...value, discriminator: REPLICATE_AGENT_DISCRIMINATOR })
  );
}

export function getReplicateAgentInstructionDataDecoder(): Decoder<ReplicateAgentInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['name', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    [
      'description',
      getOptionDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
    [
      'additionalCapabilities',
      getArrayDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
    ['pricingModel', getPricingModelDecoder()],
    ['isReplicable', getBooleanDecoder()],
    ['replicationFee', getOptionDecoder(getU64Decoder())],
  ]);
}

export function getReplicateAgentInstructionDataCodec(): Codec<
  ReplicateAgentInstructionDataArgs,
  ReplicateAgentInstructionData
> {
  return combineCodec(
    getReplicateAgentInstructionDataEncoder(),
    getReplicateAgentInstructionDataDecoder()
  );
}

export interface ReplicateAgentAsyncInput<
  TAccountReplicationTemplate extends string = string,
  TAccountNewAgent extends string = string,
  TAccountReplicationRecord extends string = string,
  TAccountBuyer extends string = string,
  TAccountSystemProgram extends string = string,
> {
  replicationTemplate: Address<TAccountReplicationTemplate>;
  newAgent?: Address<TAccountNewAgent>;
  replicationRecord?: Address<TAccountReplicationRecord>;
  buyer: TransactionSigner<TAccountBuyer>;
  systemProgram?: Address<TAccountSystemProgram>;
  name: ReplicateAgentInstructionDataArgs['name'];
  description: ReplicateAgentInstructionDataArgs['description'];
  additionalCapabilities: ReplicateAgentInstructionDataArgs['additionalCapabilities'];
  pricingModel: ReplicateAgentInstructionDataArgs['pricingModel'];
  isReplicable: ReplicateAgentInstructionDataArgs['isReplicable'];
  replicationFee: ReplicateAgentInstructionDataArgs['replicationFee'];
}

export async function getReplicateAgentInstructionAsync<
  TAccountReplicationTemplate extends string,
  TAccountNewAgent extends string,
  TAccountReplicationRecord extends string,
  TAccountBuyer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: ReplicateAgentAsyncInput<
    TAccountReplicationTemplate,
    TAccountNewAgent,
    TAccountReplicationRecord,
    TAccountBuyer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  ReplicateAgentInstruction<
    TProgramAddress,
    TAccountReplicationTemplate,
    TAccountNewAgent,
    TAccountReplicationRecord,
    TAccountBuyer,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    replicationTemplate: {
      value: input.replicationTemplate ?? null,
      isWritable: true,
    },
    newAgent: { value: input.newAgent ?? null, isWritable: true },
    replicationRecord: {
      value: input.replicationRecord ?? null,
      isWritable: true,
    },
    buyer: { value: input.buyer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.newAgent.value) {
    accounts.newAgent.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([97, 103, 101, 110, 116])),
        getAddressEncoder().encode(expectAddress(accounts.buyer.value)),
      ],
    });
  }
  if (!accounts.replicationRecord.value) {
    accounts.replicationRecord.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            114, 101, 112, 108, 105, 99, 97, 116, 105, 111, 110, 95, 114, 101,
            99, 111, 114, 100,
          ])
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.replicationTemplate.value)
        ),
        getAddressEncoder().encode(expectAddress(accounts.buyer.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.replicationTemplate),
      getAccountMeta(accounts.newAgent),
      getAccountMeta(accounts.replicationRecord),
      getAccountMeta(accounts.buyer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getReplicateAgentInstructionDataEncoder().encode(
      args as ReplicateAgentInstructionDataArgs
    ),
  } as ReplicateAgentInstruction<
    TProgramAddress,
    TAccountReplicationTemplate,
    TAccountNewAgent,
    TAccountReplicationRecord,
    TAccountBuyer,
    TAccountSystemProgram
  >;

  return instruction;
}

export interface ReplicateAgentInput<
  TAccountReplicationTemplate extends string = string,
  TAccountNewAgent extends string = string,
  TAccountReplicationRecord extends string = string,
  TAccountBuyer extends string = string,
  TAccountSystemProgram extends string = string,
> {
  replicationTemplate: Address<TAccountReplicationTemplate>;
  newAgent: Address<TAccountNewAgent>;
  replicationRecord: Address<TAccountReplicationRecord>;
  buyer: TransactionSigner<TAccountBuyer>;
  systemProgram?: Address<TAccountSystemProgram>;
  name: ReplicateAgentInstructionDataArgs['name'];
  description: ReplicateAgentInstructionDataArgs['description'];
  additionalCapabilities: ReplicateAgentInstructionDataArgs['additionalCapabilities'];
  pricingModel: ReplicateAgentInstructionDataArgs['pricingModel'];
  isReplicable: ReplicateAgentInstructionDataArgs['isReplicable'];
  replicationFee: ReplicateAgentInstructionDataArgs['replicationFee'];
}

export function getReplicateAgentInstruction<
  TAccountReplicationTemplate extends string,
  TAccountNewAgent extends string,
  TAccountReplicationRecord extends string,
  TAccountBuyer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: ReplicateAgentInput<
    TAccountReplicationTemplate,
    TAccountNewAgent,
    TAccountReplicationRecord,
    TAccountBuyer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ReplicateAgentInstruction<
  TProgramAddress,
  TAccountReplicationTemplate,
  TAccountNewAgent,
  TAccountReplicationRecord,
  TAccountBuyer,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    replicationTemplate: {
      value: input.replicationTemplate ?? null,
      isWritable: true,
    },
    newAgent: { value: input.newAgent ?? null, isWritable: true },
    replicationRecord: {
      value: input.replicationRecord ?? null,
      isWritable: true,
    },
    buyer: { value: input.buyer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.replicationTemplate),
      getAccountMeta(accounts.newAgent),
      getAccountMeta(accounts.replicationRecord),
      getAccountMeta(accounts.buyer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getReplicateAgentInstructionDataEncoder().encode(
      args as ReplicateAgentInstructionDataArgs
    ),
  } as ReplicateAgentInstruction<
    TProgramAddress,
    TAccountReplicationTemplate,
    TAccountNewAgent,
    TAccountReplicationRecord,
    TAccountBuyer,
    TAccountSystemProgram
  >;

  return instruction;
}

export interface ParsedReplicateAgentInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    replicationTemplate: TAccountMetas[0];
    newAgent: TAccountMetas[1];
    replicationRecord: TAccountMetas[2];
    buyer: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
  };
  data: ReplicateAgentInstructionData;
}

export function parseReplicateAgentInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedReplicateAgentInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    throw new Error('Invalid number of accounts provided');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      replicationTemplate: getNextAccount(),
      newAgent: getNextAccount(),
      replicationRecord: getNextAccount(),
      buyer: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getReplicateAgentInstructionDataDecoder().decode(instruction.data),
  };
}
