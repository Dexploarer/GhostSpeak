/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const SEND_A2A_MESSAGE_DISCRIMINATOR = new Uint8Array([
  84, 12, 203, 77, 36, 199, 15, 83,
]);

export function getSendA2aMessageDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SEND_A2A_MESSAGE_DISCRIMINATOR
  );
}

export type SendA2aMessageInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMessage extends string | AccountMeta<string> = string,
  TAccountSession extends string | AccountMeta<string> = string,
  TAccountSender extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountMessage extends string
        ? WritableAccount<TAccountMessage>
        : TAccountMessage,
      TAccountSession extends string
        ? WritableAccount<TAccountSession>
        : TAccountSession,
      TAccountSender extends string
        ? WritableSignerAccount<TAccountSender> &
            AccountSignerMeta<TAccountSender>
        : TAccountSender,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type SendA2aMessageInstructionData = {
  discriminator: ReadonlyUint8Array;
  messageId: bigint;
  sessionId: bigint;
  sender: Address;
  content: string;
  messageType: string;
  timestamp: bigint;
};

export type SendA2aMessageInstructionDataArgs = {
  messageId: number | bigint;
  sessionId: number | bigint;
  sender: Address;
  content: string;
  messageType: string;
  timestamp: number | bigint;
};

export function getSendA2aMessageInstructionDataEncoder(): Encoder<SendA2aMessageInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['messageId', getU64Encoder()],
      ['sessionId', getU64Encoder()],
      ['sender', getAddressEncoder()],
      ['content', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['messageType', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['timestamp', getI64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: SEND_A2A_MESSAGE_DISCRIMINATOR })
  );
}

export function getSendA2aMessageInstructionDataDecoder(): Decoder<SendA2aMessageInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['messageId', getU64Decoder()],
    ['sessionId', getU64Decoder()],
    ['sender', getAddressDecoder()],
    ['content', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['messageType', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['timestamp', getI64Decoder()],
  ]);
}

export function getSendA2aMessageInstructionDataCodec(): Codec<
  SendA2aMessageInstructionDataArgs,
  SendA2aMessageInstructionData
> {
  return combineCodec(
    getSendA2aMessageInstructionDataEncoder(),
    getSendA2aMessageInstructionDataDecoder()
  );
}

export type SendA2aMessageInput<
  TAccountMessage extends string = string,
  TAccountSession extends string = string,
  TAccountSender extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  message: Address<TAccountMessage>;
  session: Address<TAccountSession>;
  sender: TransactionSigner<TAccountSender>;
  systemProgram?: Address<TAccountSystemProgram>;
  messageId: SendA2aMessageInstructionDataArgs['messageId'];
  sessionId: SendA2aMessageInstructionDataArgs['sessionId'];
  senderArg: SendA2aMessageInstructionDataArgs['sender'];
  content: SendA2aMessageInstructionDataArgs['content'];
  messageType: SendA2aMessageInstructionDataArgs['messageType'];
  timestamp: SendA2aMessageInstructionDataArgs['timestamp'];
};

export function getSendA2aMessageInstruction<
  TAccountMessage extends string,
  TAccountSession extends string,
  TAccountSender extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: SendA2aMessageInput<
    TAccountMessage,
    TAccountSession,
    TAccountSender,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): SendA2aMessageInstruction<
  TProgramAddress,
  TAccountMessage,
  TAccountSession,
  TAccountSender,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    message: { value: input.message ?? null, isWritable: true },
    session: { value: input.session ?? null, isWritable: true },
    sender: { value: input.sender ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input, sender: input.senderArg };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.message),
      getAccountMeta(accounts.session),
      getAccountMeta(accounts.sender),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getSendA2aMessageInstructionDataEncoder().encode(
      args as SendA2aMessageInstructionDataArgs
    ),
  } as SendA2aMessageInstruction<
    TProgramAddress,
    TAccountMessage,
    TAccountSession,
    TAccountSender,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedSendA2aMessageInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    message: TAccountMetas[0];
    session: TAccountMetas[1];
    sender: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
  };
  data: SendA2aMessageInstructionData;
};

export function parseSendA2aMessageInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedSendA2aMessageInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      message: getNextAccount(),
      session: getNextAccount(),
      sender: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getSendA2aMessageInstructionDataDecoder().decode(instruction.data),
  };
}
