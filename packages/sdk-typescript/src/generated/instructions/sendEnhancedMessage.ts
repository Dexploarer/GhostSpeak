/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import {
  GHOSTSPEAK_MARKETPLACE_ERROR__INSUFFICIENT_ACCOUNTS,
  GHOSTSPEAK_MARKETPLACE_ERROR__INVALID_INSTRUCTION_DATA,
  GHOSTSPEAK_MARKETPLACE_ERROR__MISSING_REQUIRED_ACCOUNT,
  GHOSTSPEAK_MARKETPLACE_ERROR__INVALID_ACCOUNT,
  GHOSTSPEAK_MARKETPLACE_ERROR__INSTRUCTION_PARSING_FAILED,
  isGhostspeakMarketplaceError,
} from '../errors';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
import {
  getMessageMetadataDecoder,
  getMessageMetadataEncoder,
  getMessageTypeDecoder,
  getMessageTypeEncoder,
  type MessageMetadata,
  type MessageMetadataArgs,
  type MessageType,
  type MessageTypeArgs,
} from '../types';

export const SEND_ENHANCED_MESSAGE_DISCRIMINATOR = new Uint8Array([
  157, 174, 222, 205, 233, 240, 244, 136,
]);

export function getSendEnhancedMessageDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SEND_ENHANCED_MESSAGE_DISCRIMINATOR
  );
}

export type SendEnhancedMessageInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMessage extends string | AccountMeta<string> = string,
  TAccountChannel extends string | AccountMeta<string> = string,
  TAccountReentrancyGuard extends string | AccountMeta<string> = string,
  TAccountSender extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountMessage extends string
        ? WritableAccount<TAccountMessage>
        : TAccountMessage,
      TAccountChannel extends string
        ? WritableAccount<TAccountChannel>
        : TAccountChannel,
      TAccountReentrancyGuard extends string
        ? WritableAccount<TAccountReentrancyGuard>
        : TAccountReentrancyGuard,
      TAccountSender extends string
        ? WritableSignerAccount<TAccountSender> &
            AccountSignerMeta<TAccountSender>
        : TAccountSender,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type SendEnhancedMessageInstructionData = {
  discriminator: ReadonlyUint8Array;
  messageId: string;
  content: string;
  messageType: MessageType;
  metadata: MessageMetadata;
  isEncrypted: boolean;
};

export type SendEnhancedMessageInstructionDataArgs = {
  messageId: string;
  content: string;
  messageType: MessageTypeArgs;
  metadata: MessageMetadataArgs;
  isEncrypted: boolean;
};

export function getSendEnhancedMessageInstructionDataEncoder(): Encoder<SendEnhancedMessageInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['messageId', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['content', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['messageType', getMessageTypeEncoder()],
      ['metadata', getMessageMetadataEncoder()],
      ['isEncrypted', getBooleanEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: SEND_ENHANCED_MESSAGE_DISCRIMINATOR,
    })
  );
}

export function getSendEnhancedMessageInstructionDataDecoder(): Decoder<SendEnhancedMessageInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['messageId', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['content', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['messageType', getMessageTypeDecoder()],
    ['metadata', getMessageMetadataDecoder()],
    ['isEncrypted', getBooleanDecoder()],
  ]);
}

export function getSendEnhancedMessageInstructionDataCodec(): Codec<
  SendEnhancedMessageInstructionDataArgs,
  SendEnhancedMessageInstructionData
> {
  return combineCodec(
    getSendEnhancedMessageInstructionDataEncoder(),
    getSendEnhancedMessageInstructionDataDecoder()
  );
}

export type SendEnhancedMessageAsyncInput<
  TAccountMessage extends string = string,
  TAccountChannel extends string = string,
  TAccountReentrancyGuard extends string = string,
  TAccountSender extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  message?: Address<TAccountMessage>;
  channel: Address<TAccountChannel>;
  reentrancyGuard?: Address<TAccountReentrancyGuard>;
  sender: TransactionSigner<TAccountSender>;
  systemProgram?: Address<TAccountSystemProgram>;
  messageId: SendEnhancedMessageInstructionDataArgs['messageId'];
  content: SendEnhancedMessageInstructionDataArgs['content'];
  messageType: SendEnhancedMessageInstructionDataArgs['messageType'];
  metadata: SendEnhancedMessageInstructionDataArgs['metadata'];
  isEncrypted: SendEnhancedMessageInstructionDataArgs['isEncrypted'];
};

export async function getSendEnhancedMessageInstructionAsync<
  TAccountMessage extends string,
  TAccountChannel extends string,
  TAccountReentrancyGuard extends string,
  TAccountSender extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: SendEnhancedMessageAsyncInput<
    TAccountMessage,
    TAccountChannel,
    TAccountReentrancyGuard,
    TAccountSender,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  SendEnhancedMessageInstruction<
    TProgramAddress,
    TAccountMessage,
    TAccountChannel,
    TAccountReentrancyGuard,
    TAccountSender,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    message: { value: input.message ?? null, isWritable: true },
    channel: { value: input.channel ?? null, isWritable: true },
    reentrancyGuard: { value: input.reentrancyGuard ?? null, isWritable: true },
    sender: { value: input.sender ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.message.value) {
    accounts.message.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([109, 101, 115, 115, 97, 103, 101])
        ),
        getAddressEncoder().encode(expectAddress(accounts.channel.value)),
        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()).encode(
          expectSome(args.messageId)
        ),
      ],
    });
  }
  if (!accounts.reentrancyGuard.value) {
    accounts.reentrancyGuard.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            114, 101, 101, 110, 116, 114, 97, 110, 99, 121, 95, 103, 117, 97,
            114, 100,
          ])
        ),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.message),
      getAccountMeta(accounts.channel),
      getAccountMeta(accounts.reentrancyGuard),
      getAccountMeta(accounts.sender),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getSendEnhancedMessageInstructionDataEncoder().encode(
      args as SendEnhancedMessageInstructionDataArgs
    ),
  } as SendEnhancedMessageInstruction<
    TProgramAddress,
    TAccountMessage,
    TAccountChannel,
    TAccountReentrancyGuard,
    TAccountSender,
    TAccountSystemProgram
  >;

  return instruction;
}

export type SendEnhancedMessageInput<
  TAccountMessage extends string = string,
  TAccountChannel extends string = string,
  TAccountReentrancyGuard extends string = string,
  TAccountSender extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  message: Address<TAccountMessage>;
  channel: Address<TAccountChannel>;
  reentrancyGuard: Address<TAccountReentrancyGuard>;
  sender: TransactionSigner<TAccountSender>;
  systemProgram?: Address<TAccountSystemProgram>;
  messageId: SendEnhancedMessageInstructionDataArgs['messageId'];
  content: SendEnhancedMessageInstructionDataArgs['content'];
  messageType: SendEnhancedMessageInstructionDataArgs['messageType'];
  metadata: SendEnhancedMessageInstructionDataArgs['metadata'];
  isEncrypted: SendEnhancedMessageInstructionDataArgs['isEncrypted'];
};

export function getSendEnhancedMessageInstruction<
  TAccountMessage extends string,
  TAccountChannel extends string,
  TAccountReentrancyGuard extends string,
  TAccountSender extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: SendEnhancedMessageInput<
    TAccountMessage,
    TAccountChannel,
    TAccountReentrancyGuard,
    TAccountSender,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): SendEnhancedMessageInstruction<
  TProgramAddress,
  TAccountMessage,
  TAccountChannel,
  TAccountReentrancyGuard,
  TAccountSender,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    message: { value: input.message ?? null, isWritable: true },
    channel: { value: input.channel ?? null, isWritable: true },
    reentrancyGuard: { value: input.reentrancyGuard ?? null, isWritable: true },
    sender: { value: input.sender ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.message),
      getAccountMeta(accounts.channel),
      getAccountMeta(accounts.reentrancyGuard),
      getAccountMeta(accounts.sender),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getSendEnhancedMessageInstructionDataEncoder().encode(
      args as SendEnhancedMessageInstructionDataArgs
    ),
  } as SendEnhancedMessageInstruction<
    TProgramAddress,
    TAccountMessage,
    TAccountChannel,
    TAccountReentrancyGuard,
    TAccountSender,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedSendEnhancedMessageInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    message: TAccountMetas[0];
    channel: TAccountMetas[1];
    reentrancyGuard: TAccountMetas[2];
    sender: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
  };
  data: SendEnhancedMessageInstructionData;
};

export function parseSendEnhancedMessageInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedSendEnhancedMessageInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    throw new Error('[GHOSTSPEAK_MARKETPLACE_ERROR__INSUFFICIENT_ACCOUNTS] Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      message: getNextAccount(),
      channel: getNextAccount(),
      reentrancyGuard: getNextAccount(),
      sender: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getSendEnhancedMessageInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
