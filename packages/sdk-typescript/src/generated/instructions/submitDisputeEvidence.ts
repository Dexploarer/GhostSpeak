import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  transformEncoder,
  type Codec,
  type Decoder,
  type Encoder,
  type ReadonlyUint8Array
} from '@solana/codecs-core';
import {
  getUtf8Decoder,
  getUtf8Encoder
} from '@solana/codecs-strings';
import {
  getU32Decoder,
  getU32Encoder
} from '@solana/codecs-numbers';
import {
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder
} from '@solana/codecs-data-structures';
import {
  getAddressEncoder,
  getProgramDerivedAddress,
  type Address
} from '@solana/addresses';
import {
  type IInstruction,
  type IInstructionWithData
} from '@solana/instructions';
import { AccountRole } from '@solana/instructions';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

export const SUBMIT_DISPUTE_EVIDENCE_DISCRIMINATOR = new Uint8Array([
  177, 174, 100, 125, 106, 213, 241, 22,
]);

export function getSubmitDisputeEvidenceDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SUBMIT_DISPUTE_EVIDENCE_DISCRIMINATOR
  );
}

export type SubmitDisputeEvidenceInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly any[] = readonly any[],
> = {
  programAddress: Address<TProgram>;
  data: Uint8Array;
  accounts: TAccountMetas;
};

export type SubmitDisputeEvidenceInstructionData = {
  discriminator: ReadonlyUint8Array;
  evidenceType: string;
  evidenceData: string;
};

export type SubmitDisputeEvidenceInstructionDataArgs = {
  evidenceType: string;
  evidenceData: string;
};

export function getSubmitDisputeEvidenceInstructionDataEncoder(): Encoder<SubmitDisputeEvidenceInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['evidenceType', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['evidenceData', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: SUBMIT_DISPUTE_EVIDENCE_DISCRIMINATOR,
    })
  );
}

export function getSubmitDisputeEvidenceInstructionDataDecoder(): Decoder<SubmitDisputeEvidenceInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['evidenceType', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['evidenceData', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getSubmitDisputeEvidenceInstructionDataCodec(): Codec<
  SubmitDisputeEvidenceInstructionDataArgs,
  SubmitDisputeEvidenceInstructionData
> {
  return combineCodec(
    getSubmitDisputeEvidenceInstructionDataEncoder(),
    getSubmitDisputeEvidenceInstructionDataDecoder()
  );
}

export type SubmitDisputeEvidenceAsyncInput<
  TAccountDispute extends string = string,
  TAccountUserRegistry extends string = string,
  TAccountSubmitter extends string = string,
  TAccountClock extends string = string,
> = {
  /** Dispute account with canonical bump validation */
  dispute: Address<TAccountDispute>;
  /** User registry for rate limiting */
  userRegistry?: Address<TAccountUserRegistry>;
  /** Enhanced submitter verification */
  submitter: any;
  /** Clock sysvar for rate limiting and timing validation */
  clock?: Address<TAccountClock>;
  evidenceType: SubmitDisputeEvidenceInstructionDataArgs['evidenceType'];
  evidenceData: SubmitDisputeEvidenceInstructionDataArgs['evidenceData'];
};

export async function getSubmitDisputeEvidenceInstructionAsync<
  TAccountDispute extends string,
  TAccountUserRegistry extends string,
  TAccountSubmitter extends string,
  TAccountClock extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: SubmitDisputeEvidenceAsyncInput<
    TAccountDispute,
    TAccountUserRegistry,
    TAccountSubmitter,
    TAccountClock
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<SubmitDisputeEvidenceInstruction<TProgramAddress, any[]>> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    dispute: { value: input.dispute ?? null, isWritable: true },
    userRegistry: { value: input.userRegistry ?? null, isWritable: true },
    submitter: { value: input.submitter ?? null, isWritable: false },
    clock: { value: input.clock ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.userRegistry.value) {
    accounts.userRegistry.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            117, 115, 101, 114, 95, 114, 101, 103, 105, 115, 116, 114, 121,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.submitter.value)),
      ],
    });
  }
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.dispute),
      getAccountMeta(accounts.userRegistry),
      getAccountMeta(accounts.submitter),
      getAccountMeta(accounts.clock),
    ],
    programAddress,
    data: getSubmitDisputeEvidenceInstructionDataEncoder().encode(
      args as SubmitDisputeEvidenceInstructionDataArgs
    ),
  } as SubmitDisputeEvidenceInstruction<TProgramAddress, any[]>;

  return instruction;
}

export type SubmitDisputeEvidenceInput<
  TAccountDispute extends string = string,
  TAccountUserRegistry extends string = string,
  TAccountSubmitter extends string = string,
  TAccountClock extends string = string,
> = {
  /** Dispute account with canonical bump validation */
  dispute: Address<TAccountDispute>;
  /** User registry for rate limiting */
  userRegistry: Address<TAccountUserRegistry>;
  /** Enhanced submitter verification */
  submitter: any;
  /** Clock sysvar for rate limiting and timing validation */
  clock?: Address<TAccountClock>;
  evidenceType: SubmitDisputeEvidenceInstructionDataArgs['evidenceType'];
  evidenceData: SubmitDisputeEvidenceInstructionDataArgs['evidenceData'];
};

export function getSubmitDisputeEvidenceInstruction<
  TAccountDispute extends string,
  TAccountUserRegistry extends string,
  TAccountSubmitter extends string,
  TAccountClock extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: SubmitDisputeEvidenceInput<
    TAccountDispute,
    TAccountUserRegistry,
    TAccountSubmitter,
    TAccountClock
  >,
  config?: { programAddress?: TProgramAddress }
): SubmitDisputeEvidenceInstruction<TProgramAddress, any[]> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    dispute: { value: input.dispute ?? null, isWritable: true },
    userRegistry: { value: input.userRegistry ?? null, isWritable: true },
    submitter: { value: input.submitter ?? null, isWritable: false },
    clock: { value: input.clock ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.dispute),
      getAccountMeta(accounts.userRegistry),
      getAccountMeta(accounts.submitter),
      getAccountMeta(accounts.clock),
    ],
    programAddress,
    data: getSubmitDisputeEvidenceInstructionDataEncoder().encode(
      args as SubmitDisputeEvidenceInstructionDataArgs
    ),
  } as SubmitDisputeEvidenceInstruction<TProgramAddress, any[]>;

  return instruction;
}

export type ParsedSubmitDisputeEvidenceInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly { address: Address; role: AccountRole }[] = readonly { address: Address; role: AccountRole }[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Dispute account with canonical bump validation */
    dispute: TAccountMetas[0];
    /** User registry for rate limiting */
    userRegistry: TAccountMetas[1];
    /** Enhanced submitter verification */
    submitter: TAccountMetas[2];
    /** Clock sysvar for rate limiting and timing validation */
    clock: TAccountMetas[3];
  };
  data: SubmitDisputeEvidenceInstructionData;
};

export function parseSubmitDisputeEvidenceInstruction<
  TProgram extends string,
  TAccountMetas extends readonly { address: Address; role: AccountRole }[],
>(
  instruction: { programAddress: TProgram } &
    { accounts: TAccountMetas } &
    { data: Uint8Array }
): ParsedSubmitDisputeEvidenceInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress as Address<TProgram>,
    accounts: {
      dispute: getNextAccount(),
      userRegistry: getNextAccount(),
      submitter: getNextAccount(),
      clock: getNextAccount(),
    },
    data: getSubmitDisputeEvidenceInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
