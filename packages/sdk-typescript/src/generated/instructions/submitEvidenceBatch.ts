/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import {
  GHOSTSPEAK_MARKETPLACE_ERROR__INSUFFICIENT_ACCOUNTS,
  GHOSTSPEAK_MARKETPLACE_ERROR__INVALID_INSTRUCTION_DATA,
  GHOSTSPEAK_MARKETPLACE_ERROR__MISSING_REQUIRED_ACCOUNT,
  GHOSTSPEAK_MARKETPLACE_ERROR__INVALID_ACCOUNT,
  GHOSTSPEAK_MARKETPLACE_ERROR__INSTRUCTION_PARSING_FAILED,
  isGhostspeakMarketplaceError,
} from '../errors';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
import {
  getEvidenceBatchItemDecoder,
  getEvidenceBatchItemEncoder,
  type EvidenceBatchItem,
  type EvidenceBatchItemArgs,
} from '../types';

export const SUBMIT_EVIDENCE_BATCH_DISCRIMINATOR = new Uint8Array([
  168, 150, 145, 75, 38, 203, 43, 9,
]);

export function getSubmitEvidenceBatchDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SUBMIT_EVIDENCE_BATCH_DISCRIMINATOR
  );
}

export type SubmitEvidenceBatchInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountDispute extends string | AccountMeta<string> = string,
  TAccountUserRegistry extends string | AccountMeta<string> = string,
  TAccountSubmitter extends string | AccountMeta<string> = string,
  TAccountClock extends
    | string
    | AccountMeta<string> = 'SysvarC1ock11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountDispute extends string
        ? WritableAccount<TAccountDispute>
        : TAccountDispute,
      TAccountUserRegistry extends string
        ? WritableAccount<TAccountUserRegistry>
        : TAccountUserRegistry,
      TAccountSubmitter extends string
        ? ReadonlySignerAccount<TAccountSubmitter> &
            AccountSignerMeta<TAccountSubmitter>
        : TAccountSubmitter,
      TAccountClock extends string
        ? ReadonlyAccount<TAccountClock>
        : TAccountClock,
      ...TRemainingAccounts,
    ]
  >;

export type SubmitEvidenceBatchInstructionData = {
  discriminator: ReadonlyUint8Array;
  evidenceBatch: Array<EvidenceBatchItem>;
};

export type SubmitEvidenceBatchInstructionDataArgs = {
  evidenceBatch: Array<EvidenceBatchItemArgs>;
};

export function getSubmitEvidenceBatchInstructionDataEncoder(): Encoder<SubmitEvidenceBatchInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['evidenceBatch', getArrayEncoder(getEvidenceBatchItemEncoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: SUBMIT_EVIDENCE_BATCH_DISCRIMINATOR,
    })
  );
}

export function getSubmitEvidenceBatchInstructionDataDecoder(): Decoder<SubmitEvidenceBatchInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['evidenceBatch', getArrayDecoder(getEvidenceBatchItemDecoder())],
  ]);
}

export function getSubmitEvidenceBatchInstructionDataCodec(): Codec<
  SubmitEvidenceBatchInstructionDataArgs,
  SubmitEvidenceBatchInstructionData
> {
  return combineCodec(
    getSubmitEvidenceBatchInstructionDataEncoder(),
    getSubmitEvidenceBatchInstructionDataDecoder()
  );
}

export type SubmitEvidenceBatchAsyncInput<
  TAccountDispute extends string = string,
  TAccountUserRegistry extends string = string,
  TAccountSubmitter extends string = string,
  TAccountClock extends string = string,
> = {
  /** Dispute account with canonical bump validation */
  dispute: Address<TAccountDispute>;
  /** User registry for rate limiting */
  userRegistry?: Address<TAccountUserRegistry>;
  /** Enhanced submitter verification */
  submitter: TransactionSigner<TAccountSubmitter>;
  /** Clock sysvar for rate limiting and timing validation */
  clock?: Address<TAccountClock>;
  evidenceBatch: SubmitEvidenceBatchInstructionDataArgs['evidenceBatch'];
};

export async function getSubmitEvidenceBatchInstructionAsync<
  TAccountDispute extends string,
  TAccountUserRegistry extends string,
  TAccountSubmitter extends string,
  TAccountClock extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: SubmitEvidenceBatchAsyncInput<
    TAccountDispute,
    TAccountUserRegistry,
    TAccountSubmitter,
    TAccountClock
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  SubmitEvidenceBatchInstruction<
    TProgramAddress,
    TAccountDispute,
    TAccountUserRegistry,
    TAccountSubmitter,
    TAccountClock
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    dispute: { value: input.dispute ?? null, isWritable: true },
    userRegistry: { value: input.userRegistry ?? null, isWritable: true },
    submitter: { value: input.submitter ?? null, isWritable: false },
    clock: { value: input.clock ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.userRegistry.value) {
    accounts.userRegistry.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            117, 115, 101, 114, 95, 114, 101, 103, 105, 115, 116, 114, 121,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.submitter.value)),
      ],
    });
  }
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.dispute),
      getAccountMeta(accounts.userRegistry),
      getAccountMeta(accounts.submitter),
      getAccountMeta(accounts.clock),
    ],
    programAddress,
    data: getSubmitEvidenceBatchInstructionDataEncoder().encode(
      args as SubmitEvidenceBatchInstructionDataArgs
    ),
  } as SubmitEvidenceBatchInstruction<
    TProgramAddress,
    TAccountDispute,
    TAccountUserRegistry,
    TAccountSubmitter,
    TAccountClock
  >;

  return instruction;
}

export type SubmitEvidenceBatchInput<
  TAccountDispute extends string = string,
  TAccountUserRegistry extends string = string,
  TAccountSubmitter extends string = string,
  TAccountClock extends string = string,
> = {
  /** Dispute account with canonical bump validation */
  dispute: Address<TAccountDispute>;
  /** User registry for rate limiting */
  userRegistry: Address<TAccountUserRegistry>;
  /** Enhanced submitter verification */
  submitter: TransactionSigner<TAccountSubmitter>;
  /** Clock sysvar for rate limiting and timing validation */
  clock?: Address<TAccountClock>;
  evidenceBatch: SubmitEvidenceBatchInstructionDataArgs['evidenceBatch'];
};

export function getSubmitEvidenceBatchInstruction<
  TAccountDispute extends string,
  TAccountUserRegistry extends string,
  TAccountSubmitter extends string,
  TAccountClock extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: SubmitEvidenceBatchInput<
    TAccountDispute,
    TAccountUserRegistry,
    TAccountSubmitter,
    TAccountClock
  >,
  config?: { programAddress?: TProgramAddress }
): SubmitEvidenceBatchInstruction<
  TProgramAddress,
  TAccountDispute,
  TAccountUserRegistry,
  TAccountSubmitter,
  TAccountClock
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    dispute: { value: input.dispute ?? null, isWritable: true },
    userRegistry: { value: input.userRegistry ?? null, isWritable: true },
    submitter: { value: input.submitter ?? null, isWritable: false },
    clock: { value: input.clock ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.dispute),
      getAccountMeta(accounts.userRegistry),
      getAccountMeta(accounts.submitter),
      getAccountMeta(accounts.clock),
    ],
    programAddress,
    data: getSubmitEvidenceBatchInstructionDataEncoder().encode(
      args as SubmitEvidenceBatchInstructionDataArgs
    ),
  } as SubmitEvidenceBatchInstruction<
    TProgramAddress,
    TAccountDispute,
    TAccountUserRegistry,
    TAccountSubmitter,
    TAccountClock
  >;

  return instruction;
}

export type ParsedSubmitEvidenceBatchInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Dispute account with canonical bump validation */
    dispute: TAccountMetas[0];
    /** User registry for rate limiting */
    userRegistry: TAccountMetas[1];
    /** Enhanced submitter verification */
    submitter: TAccountMetas[2];
    /** Clock sysvar for rate limiting and timing validation */
    clock: TAccountMetas[3];
  };
  data: SubmitEvidenceBatchInstructionData;
};

export function parseSubmitEvidenceBatchInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedSubmitEvidenceBatchInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    throw new Error('[GHOSTSPEAK_MARKETPLACE_ERROR__INSUFFICIENT_ACCOUNTS] Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      dispute: getNextAccount(),
      userRegistry: getNextAccount(),
      submitter: getNextAccount(),
      clock: getNextAccount(),
    },
    data: getSubmitEvidenceBatchInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
