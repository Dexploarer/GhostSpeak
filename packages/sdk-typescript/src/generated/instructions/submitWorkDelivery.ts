/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
import {
  getDeliverableDecoder,
  getDeliverableEncoder,
  type Deliverable,
  type DeliverableArgs,
} from '../types';

export const SUBMIT_WORK_DELIVERY_DISCRIMINATOR = new Uint8Array([
  151, 198, 209, 252, 41, 69, 106, 93,
]);

export function getSubmitWorkDeliveryDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SUBMIT_WORK_DELIVERY_DISCRIMINATOR
  );
}

export type SubmitWorkDeliveryInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountWorkDelivery extends string | IAccountMeta<string> = string,
  TAccountWorkOrder extends string | IAccountMeta<string> = string,
  TAccountProvider extends string | IAccountMeta<string> = string,
  TAccountClock extends
    | string
    | IAccountMeta<string> = 'SysvarC1ock11111111111111111111111111111111',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountWorkDelivery extends string
        ? WritableAccount<TAccountWorkDelivery>
        : TAccountWorkDelivery,
      TAccountWorkOrder extends string
        ? WritableAccount<TAccountWorkOrder>
        : TAccountWorkOrder,
      TAccountProvider extends string
        ? WritableSignerAccount<TAccountProvider> &
            IAccountSignerMeta<TAccountProvider>
        : TAccountProvider,
      TAccountClock extends string
        ? ReadonlyAccount<TAccountClock>
        : TAccountClock,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface SubmitWorkDeliveryInstructionData {
  discriminator: ReadonlyUint8Array;
  deliverables: Deliverable[];
  ipfsHash: string;
  metadataUri: string;
}

export interface SubmitWorkDeliveryInstructionDataArgs {
  deliverables: DeliverableArgs[];
  ipfsHash: string;
  metadataUri: string;
}

export function getSubmitWorkDeliveryInstructionDataEncoder(): Encoder<SubmitWorkDeliveryInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['deliverables', getArrayEncoder(getDeliverableEncoder())],
      ['ipfsHash', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['metadataUri', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ]),
    (value) => ({ ...value, discriminator: SUBMIT_WORK_DELIVERY_DISCRIMINATOR })
  );
}

export function getSubmitWorkDeliveryInstructionDataDecoder(): Decoder<SubmitWorkDeliveryInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['deliverables', getArrayDecoder(getDeliverableDecoder())],
    ['ipfsHash', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['metadataUri', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getSubmitWorkDeliveryInstructionDataCodec(): Codec<
  SubmitWorkDeliveryInstructionDataArgs,
  SubmitWorkDeliveryInstructionData
> {
  return combineCodec(
    getSubmitWorkDeliveryInstructionDataEncoder(),
    getSubmitWorkDeliveryInstructionDataDecoder()
  );
}

export interface SubmitWorkDeliveryAsyncInput<
  TAccountWorkDelivery extends string = string,
  TAccountWorkOrder extends string = string,
  TAccountProvider extends string = string,
  TAccountClock extends string = string,
  TAccountSystemProgram extends string = string,
> {
  workDelivery?: Address<TAccountWorkDelivery>;
  workOrder: Address<TAccountWorkOrder>;
  provider: TransactionSigner<TAccountProvider>;
  clock?: Address<TAccountClock>;
  systemProgram?: Address<TAccountSystemProgram>;
  deliverables: SubmitWorkDeliveryInstructionDataArgs['deliverables'];
  ipfsHash: SubmitWorkDeliveryInstructionDataArgs['ipfsHash'];
  metadataUri: SubmitWorkDeliveryInstructionDataArgs['metadataUri'];
}

export async function getSubmitWorkDeliveryInstructionAsync<
  TAccountWorkDelivery extends string,
  TAccountWorkOrder extends string,
  TAccountProvider extends string,
  TAccountClock extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: SubmitWorkDeliveryAsyncInput<
    TAccountWorkDelivery,
    TAccountWorkOrder,
    TAccountProvider,
    TAccountClock,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  SubmitWorkDeliveryInstruction<
    TProgramAddress,
    TAccountWorkDelivery,
    TAccountWorkOrder,
    TAccountProvider,
    TAccountClock,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    workDelivery: { value: input.workDelivery ?? null, isWritable: true },
    workOrder: { value: input.workOrder ?? null, isWritable: true },
    provider: { value: input.provider ?? null, isWritable: true },
    clock: { value: input.clock ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.workDelivery.value) {
    accounts.workDelivery.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            119, 111, 114, 107, 95, 100, 101, 108, 105, 118, 101, 114, 121,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.workOrder.value)),
      ],
    });
  }
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.workDelivery),
      getAccountMeta(accounts.workOrder),
      getAccountMeta(accounts.provider),
      getAccountMeta(accounts.clock),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getSubmitWorkDeliveryInstructionDataEncoder().encode(
      args as SubmitWorkDeliveryInstructionDataArgs
    ),
  } as SubmitWorkDeliveryInstruction<
    TProgramAddress,
    TAccountWorkDelivery,
    TAccountWorkOrder,
    TAccountProvider,
    TAccountClock,
    TAccountSystemProgram
  >;

  return instruction;
}

export interface SubmitWorkDeliveryInput<
  TAccountWorkDelivery extends string = string,
  TAccountWorkOrder extends string = string,
  TAccountProvider extends string = string,
  TAccountClock extends string = string,
  TAccountSystemProgram extends string = string,
> {
  workDelivery: Address<TAccountWorkDelivery>;
  workOrder: Address<TAccountWorkOrder>;
  provider: TransactionSigner<TAccountProvider>;
  clock?: Address<TAccountClock>;
  systemProgram?: Address<TAccountSystemProgram>;
  deliverables: SubmitWorkDeliveryInstructionDataArgs['deliverables'];
  ipfsHash: SubmitWorkDeliveryInstructionDataArgs['ipfsHash'];
  metadataUri: SubmitWorkDeliveryInstructionDataArgs['metadataUri'];
}

export function getSubmitWorkDeliveryInstruction<
  TAccountWorkDelivery extends string,
  TAccountWorkOrder extends string,
  TAccountProvider extends string,
  TAccountClock extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: SubmitWorkDeliveryInput<
    TAccountWorkDelivery,
    TAccountWorkOrder,
    TAccountProvider,
    TAccountClock,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): SubmitWorkDeliveryInstruction<
  TProgramAddress,
  TAccountWorkDelivery,
  TAccountWorkOrder,
  TAccountProvider,
  TAccountClock,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    workDelivery: { value: input.workDelivery ?? null, isWritable: true },
    workOrder: { value: input.workOrder ?? null, isWritable: true },
    provider: { value: input.provider ?? null, isWritable: true },
    clock: { value: input.clock ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.workDelivery),
      getAccountMeta(accounts.workOrder),
      getAccountMeta(accounts.provider),
      getAccountMeta(accounts.clock),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getSubmitWorkDeliveryInstructionDataEncoder().encode(
      args as SubmitWorkDeliveryInstructionDataArgs
    ),
  } as SubmitWorkDeliveryInstruction<
    TProgramAddress,
    TAccountWorkDelivery,
    TAccountWorkOrder,
    TAccountProvider,
    TAccountClock,
    TAccountSystemProgram
  >;

  return instruction;
}

export interface ParsedSubmitWorkDeliveryInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    workDelivery: TAccountMetas[0];
    workOrder: TAccountMetas[1];
    provider: TAccountMetas[2];
    clock: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
  };
  data: SubmitWorkDeliveryInstructionData;
}

export function parseSubmitWorkDeliveryInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedSubmitWorkDeliveryInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      workDelivery: getNextAccount(),
      workOrder: getNextAccount(),
      provider: getNextAccount(),
      clock: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getSubmitWorkDeliveryInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
