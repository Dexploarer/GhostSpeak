/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import {
  GHOSTSPEAK_MARKETPLACE_ERROR__INSUFFICIENT_ACCOUNTS,
  GHOSTSPEAK_MARKETPLACE_ERROR__INVALID_INSTRUCTION_DATA,
  GHOSTSPEAK_MARKETPLACE_ERROR__MISSING_REQUIRED_ACCOUNT,
  GHOSTSPEAK_MARKETPLACE_ERROR__INVALID_ACCOUNT,
  GHOSTSPEAK_MARKETPLACE_ERROR__INSTRUCTION_PARSING_FAILED,
  isGhostspeakMarketplaceError,
} from '../errors';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const TALLY_VOTES_DISCRIMINATOR = new Uint8Array([
  144, 82, 0, 72, 160, 132, 35, 121,
]);

export function getTallyVotesDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(TALLY_VOTES_DISCRIMINATOR);
}

export type TallyVotesInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountProposal extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountProposal extends string
        ? WritableAccount<TAccountProposal>
        : TAccountProposal,
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      ...TRemainingAccounts,
    ]
  >;

export type TallyVotesInstructionData = { discriminator: ReadonlyUint8Array };

export type TallyVotesInstructionDataArgs = {};

export function getTallyVotesInstructionDataEncoder(): FixedSizeEncoder<TallyVotesInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: TALLY_VOTES_DISCRIMINATOR })
  );
}

export function getTallyVotesInstructionDataDecoder(): FixedSizeDecoder<TallyVotesInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getTallyVotesInstructionDataCodec(): FixedSizeCodec<
  TallyVotesInstructionDataArgs,
  TallyVotesInstructionData
> {
  return combineCodec(
    getTallyVotesInstructionDataEncoder(),
    getTallyVotesInstructionDataDecoder()
  );
}

export type TallyVotesInput<
  TAccountProposal extends string = string,
  TAccountAuthority extends string = string,
> = {
  proposal: Address<TAccountProposal>;
  authority: TransactionSigner<TAccountAuthority>;
};

export function getTallyVotesInstruction<
  TAccountProposal extends string,
  TAccountAuthority extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: TallyVotesInput<TAccountProposal, TAccountAuthority>,
  config?: { programAddress?: TProgramAddress }
): TallyVotesInstruction<TProgramAddress, TAccountProposal, TAccountAuthority> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    proposal: { value: input.proposal ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.proposal),
      getAccountMeta(accounts.authority),
    ],
    programAddress,
    data: getTallyVotesInstructionDataEncoder().encode({}),
  } as TallyVotesInstruction<
    TProgramAddress,
    TAccountProposal,
    TAccountAuthority
  >;

  return instruction;
}

export type ParsedTallyVotesInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    proposal: TAccountMetas[0];
    authority: TAccountMetas[1];
  };
  data: TallyVotesInstructionData;
};

export function parseTallyVotesInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedTallyVotesInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    throw new Error('[GHOSTSPEAK_MARKETPLACE_ERROR__INSUFFICIENT_ACCOUNTS] Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      proposal: getNextAccount(),
      authority: getNextAccount(),
    },
    data: getTallyVotesInstructionDataDecoder().decode(instruction.data),
  };
}
