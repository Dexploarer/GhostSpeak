/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import {
  GHOSTSPEAK_MARKETPLACE_ERROR__INSUFFICIENT_ACCOUNTS,
  GHOSTSPEAK_MARKETPLACE_ERROR__INVALID_INSTRUCTION_DATA,
  GHOSTSPEAK_MARKETPLACE_ERROR__MISSING_REQUIRED_ACCOUNT,
  GHOSTSPEAK_MARKETPLACE_ERROR__INVALID_ACCOUNT,
  GHOSTSPEAK_MARKETPLACE_ERROR__INSTRUCTION_PARSING_FAILED,
  isGhostspeakMarketplaceError,
} from '../errors';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const UPDATE_A2A_STATUS_DISCRIMINATOR = new Uint8Array([
  10, 122, 84, 103, 225, 186, 125, 183,
]);

export function getUpdateA2aStatusDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    UPDATE_A2A_STATUS_DISCRIMINATOR
  );
}

export type UpdateA2aStatusInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountStatus extends string | AccountMeta<string> = string,
  TAccountSession extends string | AccountMeta<string> = string,
  TAccountUpdater extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountStatus extends string
        ? WritableAccount<TAccountStatus>
        : TAccountStatus,
      TAccountSession extends string
        ? ReadonlyAccount<TAccountSession>
        : TAccountSession,
      TAccountUpdater extends string
        ? WritableSignerAccount<TAccountUpdater> &
            AccountSignerMeta<TAccountUpdater>
        : TAccountUpdater,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type UpdateA2aStatusInstructionData = {
  discriminator: ReadonlyUint8Array;
  statusId: bigint;
  agent: Address;
  status: string;
  capabilities: Array<string>;
  availability: boolean;
  lastUpdated: bigint;
};

export type UpdateA2aStatusInstructionDataArgs = {
  statusId: number | bigint;
  agent: Address;
  status: string;
  capabilities: Array<string>;
  availability: boolean;
  lastUpdated: number | bigint;
};

export function getUpdateA2aStatusInstructionDataEncoder(): Encoder<UpdateA2aStatusInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['statusId', getU64Encoder()],
      ['agent', getAddressEncoder()],
      ['status', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      [
        'capabilities',
        getArrayEncoder(
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())
        ),
      ],
      ['availability', getBooleanEncoder()],
      ['lastUpdated', getI64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: UPDATE_A2A_STATUS_DISCRIMINATOR })
  );
}

export function getUpdateA2aStatusInstructionDataDecoder(): Decoder<UpdateA2aStatusInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['statusId', getU64Decoder()],
    ['agent', getAddressDecoder()],
    ['status', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    [
      'capabilities',
      getArrayDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
    ['availability', getBooleanDecoder()],
    ['lastUpdated', getI64Decoder()],
  ]);
}

export function getUpdateA2aStatusInstructionDataCodec(): Codec<
  UpdateA2aStatusInstructionDataArgs,
  UpdateA2aStatusInstructionData
> {
  return combineCodec(
    getUpdateA2aStatusInstructionDataEncoder(),
    getUpdateA2aStatusInstructionDataDecoder()
  );
}

export type UpdateA2aStatusAsyncInput<
  TAccountStatus extends string = string,
  TAccountSession extends string = string,
  TAccountUpdater extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  status?: Address<TAccountStatus>;
  session: Address<TAccountSession>;
  updater: TransactionSigner<TAccountUpdater>;
  systemProgram?: Address<TAccountSystemProgram>;
  statusId: UpdateA2aStatusInstructionDataArgs['statusId'];
  agent: UpdateA2aStatusInstructionDataArgs['agent'];
  statusArg: UpdateA2aStatusInstructionDataArgs['status'];
  capabilities: UpdateA2aStatusInstructionDataArgs['capabilities'];
  availability: UpdateA2aStatusInstructionDataArgs['availability'];
  lastUpdated: UpdateA2aStatusInstructionDataArgs['lastUpdated'];
};

export async function getUpdateA2aStatusInstructionAsync<
  TAccountStatus extends string,
  TAccountSession extends string,
  TAccountUpdater extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: UpdateA2aStatusAsyncInput<
    TAccountStatus,
    TAccountSession,
    TAccountUpdater,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  UpdateA2aStatusInstruction<
    TProgramAddress,
    TAccountStatus,
    TAccountSession,
    TAccountUpdater,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    status: { value: input.status ?? null, isWritable: true },
    session: { value: input.session ?? null, isWritable: false },
    updater: { value: input.updater ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input, status: input.statusArg };

  // Resolve default values.
  if (!accounts.status.value) {
    accounts.status.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([97, 50, 97, 95, 115, 116, 97, 116, 117, 115])
        ),
        getAddressEncoder().encode(expectAddress(accounts.session.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.status),
      getAccountMeta(accounts.session),
      getAccountMeta(accounts.updater),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getUpdateA2aStatusInstructionDataEncoder().encode(
      args as UpdateA2aStatusInstructionDataArgs
    ),
  } as UpdateA2aStatusInstruction<
    TProgramAddress,
    TAccountStatus,
    TAccountSession,
    TAccountUpdater,
    TAccountSystemProgram
  >;

  return instruction;
}

export type UpdateA2aStatusInput<
  TAccountStatus extends string = string,
  TAccountSession extends string = string,
  TAccountUpdater extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  status: Address<TAccountStatus>;
  session: Address<TAccountSession>;
  updater: TransactionSigner<TAccountUpdater>;
  systemProgram?: Address<TAccountSystemProgram>;
  statusId: UpdateA2aStatusInstructionDataArgs['statusId'];
  agent: UpdateA2aStatusInstructionDataArgs['agent'];
  statusArg: UpdateA2aStatusInstructionDataArgs['status'];
  capabilities: UpdateA2aStatusInstructionDataArgs['capabilities'];
  availability: UpdateA2aStatusInstructionDataArgs['availability'];
  lastUpdated: UpdateA2aStatusInstructionDataArgs['lastUpdated'];
};

export function getUpdateA2aStatusInstruction<
  TAccountStatus extends string,
  TAccountSession extends string,
  TAccountUpdater extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: UpdateA2aStatusInput<
    TAccountStatus,
    TAccountSession,
    TAccountUpdater,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): UpdateA2aStatusInstruction<
  TProgramAddress,
  TAccountStatus,
  TAccountSession,
  TAccountUpdater,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    status: { value: input.status ?? null, isWritable: true },
    session: { value: input.session ?? null, isWritable: false },
    updater: { value: input.updater ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input, status: input.statusArg };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.status),
      getAccountMeta(accounts.session),
      getAccountMeta(accounts.updater),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getUpdateA2aStatusInstructionDataEncoder().encode(
      args as UpdateA2aStatusInstructionDataArgs
    ),
  } as UpdateA2aStatusInstruction<
    TProgramAddress,
    TAccountStatus,
    TAccountSession,
    TAccountUpdater,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedUpdateA2aStatusInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    status: TAccountMetas[0];
    session: TAccountMetas[1];
    updater: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
  };
  data: UpdateA2aStatusInstructionData;
};

export function parseUpdateA2aStatusInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedUpdateA2aStatusInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    throw new Error('[GHOSTSPEAK_MARKETPLACE_ERROR__INSUFFICIENT_ACCOUNTS] Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      status: getNextAccount(),
      session: getNextAccount(),
      updater: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getUpdateA2aStatusInstructionDataDecoder().decode(instruction.data),
  };
}
