import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  transformEncoder,
  type Codec,
  type Decoder,
  type Encoder,
  type ReadonlyUint8Array
} from '@solana/codecs-core';
import {
  getUtf8Decoder,
  getUtf8Encoder
} from '@solana/codecs-strings';
import {
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder
} from '@solana/codecs-numbers';
import {
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder
} from '@solana/codecs-data-structures';
import {
  getAddressEncoder,
  getProgramDerivedAddress,
  type Address
} from '@solana/addresses';
import {
  type IInstruction,
  type IInstructionWithData
} from '@solana/instructions';
import { AccountRole } from '@solana/instructions';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

export const UPDATE_AGENT_DISCRIMINATOR = new Uint8Array([
  85, 2, 178, 9, 119, 139, 102, 164,
]);

export function getUpdateAgentDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    UPDATE_AGENT_DISCRIMINATOR
  );
}

export type UpdateAgentInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly any[] = readonly any[],
> = {
  programAddress: Address<TProgram>;
  data: Uint8Array;
  accounts: TAccountMetas;
};

export type UpdateAgentInstructionData = {
  discriminator: ReadonlyUint8Array;
  agentType: number;
  metadataUri: string;
  agentId: string;
};

export type UpdateAgentInstructionDataArgs = {
  agentType: number;
  metadataUri: string;
  agentId: string;
};

export function getUpdateAgentInstructionDataEncoder(): Encoder<UpdateAgentInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['agentType', getU8Encoder()],
      ['metadataUri', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['agentId', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ]),
    (value) => ({ ...value, discriminator: UPDATE_AGENT_DISCRIMINATOR })
  );
}

export function getUpdateAgentInstructionDataDecoder(): Decoder<UpdateAgentInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['agentType', getU8Decoder()],
    ['metadataUri', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['agentId', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getUpdateAgentInstructionDataCodec(): Codec<
  UpdateAgentInstructionDataArgs,
  UpdateAgentInstructionData
> {
  return combineCodec(
    getUpdateAgentInstructionDataEncoder(),
    getUpdateAgentInstructionDataDecoder()
  );
}

export type UpdateAgentAsyncInput<
  TAccountAgentAccount extends string = string,
  TAccountSigner extends string = string,
  TAccountClock extends string = string,
> = {
  /** Agent account with canonical PDA validation */
  agentAccount?: Address<TAccountAgentAccount>;
  /** Enhanced authority verification */
  signer: any;
  /** Clock sysvar for rate limiting */
  clock?: Address<TAccountClock>;
  agentType: UpdateAgentInstructionDataArgs['agentType'];
  metadataUri: UpdateAgentInstructionDataArgs['metadataUri'];
  agentId: UpdateAgentInstructionDataArgs['agentId'];
};

export async function getUpdateAgentInstructionAsync<
  TAccountAgentAccount extends string,
  TAccountSigner extends string,
  TAccountClock extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: UpdateAgentAsyncInput<
    TAccountAgentAccount,
    TAccountSigner,
    TAccountClock
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<UpdateAgentInstruction<TProgramAddress, any[]>> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    agentAccount: { value: input.agentAccount ?? null, isWritable: true },
    signer: { value: input.signer ?? null, isWritable: true },
    clock: { value: input.clock ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.agentAccount.value) {
    accounts.agentAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([97, 103, 101, 110, 116])),
        getAddressEncoder().encode(expectAddress(accounts.signer.value)),
        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()).encode(
          expectSome(args.agentId)
        ),
      ],
    });
  }
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.agentAccount),
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.clock),
    ],
    programAddress,
    data: getUpdateAgentInstructionDataEncoder().encode(
      args as UpdateAgentInstructionDataArgs
    ),
  } as UpdateAgentInstruction<TProgramAddress, any[]>;

  return instruction;
}

export type UpdateAgentInput<
  TAccountAgentAccount extends string = string,
  TAccountSigner extends string = string,
  TAccountClock extends string = string,
> = {
  /** Agent account with canonical PDA validation */
  agentAccount: Address<TAccountAgentAccount>;
  /** Enhanced authority verification */
  signer: any;
  /** Clock sysvar for rate limiting */
  clock?: Address<TAccountClock>;
  agentType: UpdateAgentInstructionDataArgs['agentType'];
  metadataUri: UpdateAgentInstructionDataArgs['metadataUri'];
  agentId: UpdateAgentInstructionDataArgs['agentId'];
};

export function getUpdateAgentInstruction<
  TAccountAgentAccount extends string,
  TAccountSigner extends string,
  TAccountClock extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: UpdateAgentInput<TAccountAgentAccount, TAccountSigner, TAccountClock>,
  config?: { programAddress?: TProgramAddress }
): UpdateAgentInstruction<TProgramAddress, any[]> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    agentAccount: { value: input.agentAccount ?? null, isWritable: true },
    signer: { value: input.signer ?? null, isWritable: true },
    clock: { value: input.clock ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.agentAccount),
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.clock),
    ],
    programAddress,
    data: getUpdateAgentInstructionDataEncoder().encode(
      args as UpdateAgentInstructionDataArgs
    ),
  } as UpdateAgentInstruction<TProgramAddress, any[]>;

  return instruction;
}

export type ParsedUpdateAgentInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly { address: Address; role: AccountRole }[] = readonly { address: Address; role: AccountRole }[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Agent account with canonical PDA validation */
    agentAccount: TAccountMetas[0];
    /** Enhanced authority verification */
    signer: TAccountMetas[1];
    /** Clock sysvar for rate limiting */
    clock: TAccountMetas[2];
  };
  data: UpdateAgentInstructionData;
};

export function parseUpdateAgentInstruction<
  TProgram extends string,
  TAccountMetas extends readonly { address: Address; role: AccountRole }[],
>(
  instruction: { programAddress: TProgram } &
    { accounts: TAccountMetas } &
    { data: Uint8Array }
): ParsedUpdateAgentInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress as Address<TProgram>,
    accounts: {
      agentAccount: getNextAccount(),
      signer: getNextAccount(),
      clock: getNextAccount(),
    },
    data: getUpdateAgentInstructionDataDecoder().decode(instruction.data),
  };
}
