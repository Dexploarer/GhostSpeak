/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getOptionDecoder,
  getOptionEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const UPDATE_AGENT_SERVICE_DISCRIMINATOR = new Uint8Array([
  87, 146, 181, 198, 252, 68, 243, 102,
]);

export function getUpdateAgentServiceDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    UPDATE_AGENT_SERVICE_DISCRIMINATOR
  );
}

export type UpdateAgentServiceInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountAgent extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAgent extends string
        ? WritableAccount<TAccountAgent>
        : TAccountAgent,
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> &
            IAccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export interface UpdateAgentServiceInstructionData {
  discriminator: ReadonlyUint8Array;
  /** Agent's public key for verification (must match PDA derivation) */
  agentPubkey: Address;
  /** Service endpoint URL (validated for length and format) */
  serviceEndpoint: string;
  /** Agent availability status for work orders */
  isActive: boolean;
  /** Timestamp for tracking updates (Unix timestamp) */
  lastUpdated: bigint;
  /** Optional metadata URI for extended agent information */
  metadataUri: Option<string>;
  /** Service capability tags for filtering */
  capabilities: string[];
}

export interface UpdateAgentServiceInstructionDataArgs {
  /** Agent's public key for verification (must match PDA derivation) */
  agentPubkey: Address;
  /** Service endpoint URL (validated for length and format) */
  serviceEndpoint: string;
  /** Agent availability status for work orders */
  isActive: boolean;
  /** Timestamp for tracking updates (Unix timestamp) */
  lastUpdated: number | bigint;
  /** Optional metadata URI for extended agent information */
  metadataUri: OptionOrNullable<string>;
  /** Service capability tags for filtering */
  capabilities: string[];
}

export function getUpdateAgentServiceInstructionDataEncoder(): Encoder<UpdateAgentServiceInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['agentPubkey', getAddressEncoder()],
      [
        'serviceEndpoint',
        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
      ],
      ['isActive', getBooleanEncoder()],
      ['lastUpdated', getI64Encoder()],
      [
        'metadataUri',
        getOptionEncoder(
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())
        ),
      ],
      [
        'capabilities',
        getArrayEncoder(
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())
        ),
      ],
    ]),
    (value) => ({ ...value, discriminator: UPDATE_AGENT_SERVICE_DISCRIMINATOR })
  );
}

export function getUpdateAgentServiceInstructionDataDecoder(): Decoder<UpdateAgentServiceInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['agentPubkey', getAddressDecoder()],
    [
      'serviceEndpoint',
      addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder()),
    ],
    ['isActive', getBooleanDecoder()],
    ['lastUpdated', getI64Decoder()],
    [
      'metadataUri',
      getOptionDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
    [
      'capabilities',
      getArrayDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
  ]);
}

export function getUpdateAgentServiceInstructionDataCodec(): Codec<
  UpdateAgentServiceInstructionDataArgs,
  UpdateAgentServiceInstructionData
> {
  return combineCodec(
    getUpdateAgentServiceInstructionDataEncoder(),
    getUpdateAgentServiceInstructionDataDecoder()
  );
}

export interface UpdateAgentServiceAsyncInput<
  TAccountAgent extends string = string,
  TAccountOwner extends string = string,
  TAccountSystemProgram extends string = string,
> {
  /** Agent account with enhanced 2025 security patterns */
  agent?: Address<TAccountAgent>;
  /** Owner must be signer for security (2025 pattern) */
  owner: TransactionSigner<TAccountOwner>;
  /** System program for account operations */
  systemProgram?: Address<TAccountSystemProgram>;
  agentPubkey: UpdateAgentServiceInstructionDataArgs['agentPubkey'];
  serviceEndpoint: UpdateAgentServiceInstructionDataArgs['serviceEndpoint'];
  isActive: UpdateAgentServiceInstructionDataArgs['isActive'];
  lastUpdated: UpdateAgentServiceInstructionDataArgs['lastUpdated'];
  metadataUri: UpdateAgentServiceInstructionDataArgs['metadataUri'];
  capabilities: UpdateAgentServiceInstructionDataArgs['capabilities'];
}

export async function getUpdateAgentServiceInstructionAsync<
  TAccountAgent extends string,
  TAccountOwner extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: UpdateAgentServiceAsyncInput<
    TAccountAgent,
    TAccountOwner,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  UpdateAgentServiceInstruction<
    TProgramAddress,
    TAccountAgent,
    TAccountOwner,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    agent: { value: input.agent ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.agent.value) {
    accounts.agent.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([97, 103, 101, 110, 116])),
        getAddressEncoder().encode(expectAddress(accounts.owner.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.agent),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getUpdateAgentServiceInstructionDataEncoder().encode(
      args as UpdateAgentServiceInstructionDataArgs
    ),
  } as UpdateAgentServiceInstruction<
    TProgramAddress,
    TAccountAgent,
    TAccountOwner,
    TAccountSystemProgram
  >;

  return instruction;
}

export interface UpdateAgentServiceInput<
  TAccountAgent extends string = string,
  TAccountOwner extends string = string,
  TAccountSystemProgram extends string = string,
> {
  /** Agent account with enhanced 2025 security patterns */
  agent: Address<TAccountAgent>;
  /** Owner must be signer for security (2025 pattern) */
  owner: TransactionSigner<TAccountOwner>;
  /** System program for account operations */
  systemProgram?: Address<TAccountSystemProgram>;
  agentPubkey: UpdateAgentServiceInstructionDataArgs['agentPubkey'];
  serviceEndpoint: UpdateAgentServiceInstructionDataArgs['serviceEndpoint'];
  isActive: UpdateAgentServiceInstructionDataArgs['isActive'];
  lastUpdated: UpdateAgentServiceInstructionDataArgs['lastUpdated'];
  metadataUri: UpdateAgentServiceInstructionDataArgs['metadataUri'];
  capabilities: UpdateAgentServiceInstructionDataArgs['capabilities'];
}

export function getUpdateAgentServiceInstruction<
  TAccountAgent extends string,
  TAccountOwner extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: UpdateAgentServiceInput<
    TAccountAgent,
    TAccountOwner,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): UpdateAgentServiceInstruction<
  TProgramAddress,
  TAccountAgent,
  TAccountOwner,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    agent: { value: input.agent ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.agent),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getUpdateAgentServiceInstructionDataEncoder().encode(
      args as UpdateAgentServiceInstructionDataArgs
    ),
  } as UpdateAgentServiceInstruction<
    TProgramAddress,
    TAccountAgent,
    TAccountOwner,
    TAccountSystemProgram
  >;

  return instruction;
}

export interface ParsedUpdateAgentServiceInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    /** Agent account with enhanced 2025 security patterns */
    agent: TAccountMetas[0];
    /** Owner must be signer for security (2025 pattern) */
    owner: TAccountMetas[1];
    /** System program for account operations */
    systemProgram: TAccountMetas[2];
  };
  data: UpdateAgentServiceInstructionData;
}

export function parseUpdateAgentServiceInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedUpdateAgentServiceInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      agent: getNextAccount(),
      owner: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getUpdateAgentServiceInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
