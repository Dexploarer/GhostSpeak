/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const UPDATE_ANALYTICS_DASHBOARD_DISCRIMINATOR = new Uint8Array([
  184, 35, 106, 114, 27, 86, 233, 32,
]);

export function getUpdateAnalyticsDashboardDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    UPDATE_ANALYTICS_DASHBOARD_DISCRIMINATOR
  );
}

export type UpdateAnalyticsDashboardInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountDashboard extends string | IAccountMeta<string> = string,
  TAccountUserRegistry extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountClock extends
    | string
    | IAccountMeta<string> = 'SysvarC1ock11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountDashboard extends string
        ? WritableAccount<TAccountDashboard>
        : TAccountDashboard,
      TAccountUserRegistry extends string
        ? WritableAccount<TAccountUserRegistry>
        : TAccountUserRegistry,
      TAccountOwner extends string
        ? ReadonlySignerAccount<TAccountOwner> &
            IAccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountClock extends string
        ? ReadonlyAccount<TAccountClock>
        : TAccountClock,
      ...TRemainingAccounts,
    ]
  >;

export interface UpdateAnalyticsDashboardInstructionData {
  discriminator: ReadonlyUint8Array;
  newMetrics: string;
}

export interface UpdateAnalyticsDashboardInstructionDataArgs {
  newMetrics: string;
}

export function getUpdateAnalyticsDashboardInstructionDataEncoder(): Encoder<UpdateAnalyticsDashboardInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['newMetrics', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: UPDATE_ANALYTICS_DASHBOARD_DISCRIMINATOR,
    })
  );
}

export function getUpdateAnalyticsDashboardInstructionDataDecoder(): Decoder<UpdateAnalyticsDashboardInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['newMetrics', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getUpdateAnalyticsDashboardInstructionDataCodec(): Codec<
  UpdateAnalyticsDashboardInstructionDataArgs,
  UpdateAnalyticsDashboardInstructionData
> {
  return combineCodec(
    getUpdateAnalyticsDashboardInstructionDataEncoder(),
    getUpdateAnalyticsDashboardInstructionDataDecoder()
  );
}

export interface UpdateAnalyticsDashboardAsyncInput<
  TAccountDashboard extends string = string,
  TAccountUserRegistry extends string = string,
  TAccountOwner extends string = string,
  TAccountClock extends string = string,
> {
  /** Dashboard account with canonical validation */
  dashboard: Address<TAccountDashboard>;
  /** User registry for rate limiting */
  userRegistry?: Address<TAccountUserRegistry>;
  /** Enhanced owner verification */
  owner: TransactionSigner<TAccountOwner>;
  /** Clock sysvar for rate limiting */
  clock?: Address<TAccountClock>;
  newMetrics: UpdateAnalyticsDashboardInstructionDataArgs['newMetrics'];
}

export async function getUpdateAnalyticsDashboardInstructionAsync<
  TAccountDashboard extends string,
  TAccountUserRegistry extends string,
  TAccountOwner extends string,
  TAccountClock extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: UpdateAnalyticsDashboardAsyncInput<
    TAccountDashboard,
    TAccountUserRegistry,
    TAccountOwner,
    TAccountClock
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  UpdateAnalyticsDashboardInstruction<
    TProgramAddress,
    TAccountDashboard,
    TAccountUserRegistry,
    TAccountOwner,
    TAccountClock
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    dashboard: { value: input.dashboard ?? null, isWritable: true },
    userRegistry: { value: input.userRegistry ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: false },
    clock: { value: input.clock ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.userRegistry.value) {
    accounts.userRegistry.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            117, 115, 101, 114, 95, 114, 101, 103, 105, 115, 116, 114, 121,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.owner.value)),
      ],
    });
  }
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.dashboard),
      getAccountMeta(accounts.userRegistry),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.clock),
    ],
    programAddress,
    data: getUpdateAnalyticsDashboardInstructionDataEncoder().encode(
      args as UpdateAnalyticsDashboardInstructionDataArgs
    ),
  } as UpdateAnalyticsDashboardInstruction<
    TProgramAddress,
    TAccountDashboard,
    TAccountUserRegistry,
    TAccountOwner,
    TAccountClock
  >;

  return instruction;
}

export interface UpdateAnalyticsDashboardInput<
  TAccountDashboard extends string = string,
  TAccountUserRegistry extends string = string,
  TAccountOwner extends string = string,
  TAccountClock extends string = string,
> {
  /** Dashboard account with canonical validation */
  dashboard: Address<TAccountDashboard>;
  /** User registry for rate limiting */
  userRegistry: Address<TAccountUserRegistry>;
  /** Enhanced owner verification */
  owner: TransactionSigner<TAccountOwner>;
  /** Clock sysvar for rate limiting */
  clock?: Address<TAccountClock>;
  newMetrics: UpdateAnalyticsDashboardInstructionDataArgs['newMetrics'];
}

export function getUpdateAnalyticsDashboardInstruction<
  TAccountDashboard extends string,
  TAccountUserRegistry extends string,
  TAccountOwner extends string,
  TAccountClock extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: UpdateAnalyticsDashboardInput<
    TAccountDashboard,
    TAccountUserRegistry,
    TAccountOwner,
    TAccountClock
  >,
  config?: { programAddress?: TProgramAddress }
): UpdateAnalyticsDashboardInstruction<
  TProgramAddress,
  TAccountDashboard,
  TAccountUserRegistry,
  TAccountOwner,
  TAccountClock
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    dashboard: { value: input.dashboard ?? null, isWritable: true },
    userRegistry: { value: input.userRegistry ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: false },
    clock: { value: input.clock ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.dashboard),
      getAccountMeta(accounts.userRegistry),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.clock),
    ],
    programAddress,
    data: getUpdateAnalyticsDashboardInstructionDataEncoder().encode(
      args as UpdateAnalyticsDashboardInstructionDataArgs
    ),
  } as UpdateAnalyticsDashboardInstruction<
    TProgramAddress,
    TAccountDashboard,
    TAccountUserRegistry,
    TAccountOwner,
    TAccountClock
  >;

  return instruction;
}

export interface ParsedUpdateAnalyticsDashboardInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> {
  programAddress: Address<TProgram>;
  accounts: {
    /** Dashboard account with canonical validation */
    dashboard: TAccountMetas[0];
    /** User registry for rate limiting */
    userRegistry: TAccountMetas[1];
    /** Enhanced owner verification */
    owner: TAccountMetas[2];
    /** Clock sysvar for rate limiting */
    clock: TAccountMetas[3];
  };
  data: UpdateAnalyticsDashboardInstructionData;
}

export function parseUpdateAnalyticsDashboardInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedUpdateAnalyticsDashboardInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    throw new Error('Invalid number of accounts provided');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      dashboard: getNextAccount(),
      userRegistry: getNextAccount(),
      owner: getNextAccount(),
      clock: getNextAccount(),
    },
    data: getUpdateAnalyticsDashboardInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
