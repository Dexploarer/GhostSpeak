/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import {
  GHOSTSPEAK_MARKETPLACE_ERROR__INSUFFICIENT_ACCOUNTS,
  GHOSTSPEAK_MARKETPLACE_ERROR__INVALID_INSTRUCTION_DATA,
  GHOSTSPEAK_MARKETPLACE_ERROR__MISSING_REQUIRED_ACCOUNT,
  GHOSTSPEAK_MARKETPLACE_ERROR__INVALID_ACCOUNT,
  GHOSTSPEAK_MARKETPLACE_ERROR__INSTRUCTION_PARSING_FAILED,
  isGhostspeakMarketplaceError,
} from '../errors';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const UPDATE_AUCTION_RESERVE_PRICE_DISCRIMINATOR = new Uint8Array([
  97, 2, 209, 24, 27, 236, 50, 174,
]);

export function getUpdateAuctionReservePriceDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    UPDATE_AUCTION_RESERVE_PRICE_DISCRIMINATOR
  );
}

export type UpdateAuctionReservePriceInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountAuction extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountClock extends
    | string
    | AccountMeta<string> = 'SysvarC1ock11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAuction extends string
        ? WritableAccount<TAccountAuction>
        : TAccountAuction,
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountClock extends string
        ? ReadonlyAccount<TAccountClock>
        : TAccountClock,
      ...TRemainingAccounts,
    ]
  >;

export type UpdateAuctionReservePriceInstructionData = {
  discriminator: ReadonlyUint8Array;
  newReservePrice: bigint;
  revealHidden: boolean;
};

export type UpdateAuctionReservePriceInstructionDataArgs = {
  newReservePrice: number | bigint;
  revealHidden: boolean;
};

export function getUpdateAuctionReservePriceInstructionDataEncoder(): FixedSizeEncoder<UpdateAuctionReservePriceInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['newReservePrice', getU64Encoder()],
      ['revealHidden', getBooleanEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: UPDATE_AUCTION_RESERVE_PRICE_DISCRIMINATOR,
    })
  );
}

export function getUpdateAuctionReservePriceInstructionDataDecoder(): FixedSizeDecoder<UpdateAuctionReservePriceInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['newReservePrice', getU64Decoder()],
    ['revealHidden', getBooleanDecoder()],
  ]);
}

export function getUpdateAuctionReservePriceInstructionDataCodec(): FixedSizeCodec<
  UpdateAuctionReservePriceInstructionDataArgs,
  UpdateAuctionReservePriceInstructionData
> {
  return combineCodec(
    getUpdateAuctionReservePriceInstructionDataEncoder(),
    getUpdateAuctionReservePriceInstructionDataDecoder()
  );
}

export type UpdateAuctionReservePriceInput<
  TAccountAuction extends string = string,
  TAccountAuthority extends string = string,
  TAccountClock extends string = string,
> = {
  /** Auction account with canonical validation */
  auction: Address<TAccountAuction>;
  /** Enhanced authority verification - only creator can update reserve */
  authority: TransactionSigner<TAccountAuthority>;
  /** Clock sysvar for timestamp validation */
  clock?: Address<TAccountClock>;
  newReservePrice: UpdateAuctionReservePriceInstructionDataArgs['newReservePrice'];
  revealHidden: UpdateAuctionReservePriceInstructionDataArgs['revealHidden'];
};

export function getUpdateAuctionReservePriceInstruction<
  TAccountAuction extends string,
  TAccountAuthority extends string,
  TAccountClock extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: UpdateAuctionReservePriceInput<
    TAccountAuction,
    TAccountAuthority,
    TAccountClock
  >,
  config?: { programAddress?: TProgramAddress }
): UpdateAuctionReservePriceInstruction<
  TProgramAddress,
  TAccountAuction,
  TAccountAuthority,
  TAccountClock
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    auction: { value: input.auction ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: true },
    clock: { value: input.clock ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.auction),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.clock),
    ],
    programAddress,
    data: getUpdateAuctionReservePriceInstructionDataEncoder().encode(
      args as UpdateAuctionReservePriceInstructionDataArgs
    ),
  } as UpdateAuctionReservePriceInstruction<
    TProgramAddress,
    TAccountAuction,
    TAccountAuthority,
    TAccountClock
  >;

  return instruction;
}

export type ParsedUpdateAuctionReservePriceInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Auction account with canonical validation */
    auction: TAccountMetas[0];
    /** Enhanced authority verification - only creator can update reserve */
    authority: TAccountMetas[1];
    /** Clock sysvar for timestamp validation */
    clock: TAccountMetas[2];
  };
  data: UpdateAuctionReservePriceInstructionData;
};

export function parseUpdateAuctionReservePriceInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedUpdateAuctionReservePriceInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    throw new Error('[GHOSTSPEAK_MARKETPLACE_ERROR__INSUFFICIENT_ACCOUNTS] Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      auction: getNextAccount(),
      authority: getNextAccount(),
      clock: getNextAccount(),
    },
    data: getUpdateAuctionReservePriceInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
