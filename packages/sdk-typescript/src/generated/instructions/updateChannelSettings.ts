/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getChannelMetadataDecoder,
  getChannelMetadataEncoder,
  type ChannelMetadata,
  type ChannelMetadataArgs,
} from '../types';

export const UPDATE_CHANNEL_SETTINGS_DISCRIMINATOR = new Uint8Array([
  149, 67, 63, 108, 132, 122, 95, 128,
]);

export function getUpdateChannelSettingsDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    UPDATE_CHANNEL_SETTINGS_DISCRIMINATOR
  );
}

export type UpdateChannelSettingsInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountChannel extends string | AccountMeta<string> = string,
  TAccountReentrancyGuard extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountChannel extends string
        ? WritableAccount<TAccountChannel>
        : TAccountChannel,
      TAccountReentrancyGuard extends string
        ? WritableAccount<TAccountReentrancyGuard>
        : TAccountReentrancyGuard,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      ...TRemainingAccounts,
    ]
  >;

export type UpdateChannelSettingsInstructionData = {
  discriminator: ReadonlyUint8Array;
  newMetadata: ChannelMetadata;
};

export type UpdateChannelSettingsInstructionDataArgs = {
  newMetadata: ChannelMetadataArgs;
};

export function getUpdateChannelSettingsInstructionDataEncoder(): Encoder<UpdateChannelSettingsInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['newMetadata', getChannelMetadataEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: UPDATE_CHANNEL_SETTINGS_DISCRIMINATOR,
    })
  );
}

export function getUpdateChannelSettingsInstructionDataDecoder(): Decoder<UpdateChannelSettingsInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['newMetadata', getChannelMetadataDecoder()],
  ]);
}

export function getUpdateChannelSettingsInstructionDataCodec(): Codec<
  UpdateChannelSettingsInstructionDataArgs,
  UpdateChannelSettingsInstructionData
> {
  return combineCodec(
    getUpdateChannelSettingsInstructionDataEncoder(),
    getUpdateChannelSettingsInstructionDataDecoder()
  );
}

export type UpdateChannelSettingsAsyncInput<
  TAccountChannel extends string = string,
  TAccountReentrancyGuard extends string = string,
  TAccountAuthority extends string = string,
> = {
  channel: Address<TAccountChannel>;
  reentrancyGuard?: Address<TAccountReentrancyGuard>;
  authority: TransactionSigner<TAccountAuthority>;
  newMetadata: UpdateChannelSettingsInstructionDataArgs['newMetadata'];
};

export async function getUpdateChannelSettingsInstructionAsync<
  TAccountChannel extends string,
  TAccountReentrancyGuard extends string,
  TAccountAuthority extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: UpdateChannelSettingsAsyncInput<
    TAccountChannel,
    TAccountReentrancyGuard,
    TAccountAuthority
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  UpdateChannelSettingsInstruction<
    TProgramAddress,
    TAccountChannel,
    TAccountReentrancyGuard,
    TAccountAuthority
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    channel: { value: input.channel ?? null, isWritable: true },
    reentrancyGuard: { value: input.reentrancyGuard ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.reentrancyGuard.value) {
    accounts.reentrancyGuard.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            114, 101, 101, 110, 116, 114, 97, 110, 99, 121, 95, 103, 117, 97,
            114, 100,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.channel),
      getAccountMeta(accounts.reentrancyGuard),
      getAccountMeta(accounts.authority),
    ],
    programAddress,
    data: getUpdateChannelSettingsInstructionDataEncoder().encode(
      args as UpdateChannelSettingsInstructionDataArgs
    ),
  } as UpdateChannelSettingsInstruction<
    TProgramAddress,
    TAccountChannel,
    TAccountReentrancyGuard,
    TAccountAuthority
  >;

  return instruction;
}

export type UpdateChannelSettingsInput<
  TAccountChannel extends string = string,
  TAccountReentrancyGuard extends string = string,
  TAccountAuthority extends string = string,
> = {
  channel: Address<TAccountChannel>;
  reentrancyGuard: Address<TAccountReentrancyGuard>;
  authority: TransactionSigner<TAccountAuthority>;
  newMetadata: UpdateChannelSettingsInstructionDataArgs['newMetadata'];
};

export function getUpdateChannelSettingsInstruction<
  TAccountChannel extends string,
  TAccountReentrancyGuard extends string,
  TAccountAuthority extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: UpdateChannelSettingsInput<
    TAccountChannel,
    TAccountReentrancyGuard,
    TAccountAuthority
  >,
  config?: { programAddress?: TProgramAddress }
): UpdateChannelSettingsInstruction<
  TProgramAddress,
  TAccountChannel,
  TAccountReentrancyGuard,
  TAccountAuthority
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    channel: { value: input.channel ?? null, isWritable: true },
    reentrancyGuard: { value: input.reentrancyGuard ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.channel),
      getAccountMeta(accounts.reentrancyGuard),
      getAccountMeta(accounts.authority),
    ],
    programAddress,
    data: getUpdateChannelSettingsInstructionDataEncoder().encode(
      args as UpdateChannelSettingsInstructionDataArgs
    ),
  } as UpdateChannelSettingsInstruction<
    TProgramAddress,
    TAccountChannel,
    TAccountReentrancyGuard,
    TAccountAuthority
  >;

  return instruction;
}

export type ParsedUpdateChannelSettingsInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    channel: TAccountMetas[0];
    reentrancyGuard: TAccountMetas[1];
    authority: TAccountMetas[2];
  };
  data: UpdateChannelSettingsInstructionData;
};

export function parseUpdateChannelSettingsInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedUpdateChannelSettingsInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      channel: getNextAccount(),
      reentrancyGuard: getNextAccount(),
      authority: getNextAccount(),
    },
    data: getUpdateChannelSettingsInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
