/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getI32Decoder,
  getI32Encoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import {
  GHOSTSPEAK_MARKETPLACE_ERROR__INSUFFICIENT_ACCOUNTS,
  GHOSTSPEAK_MARKETPLACE_ERROR__INVALID_INSTRUCTION_DATA,
  GHOSTSPEAK_MARKETPLACE_ERROR__MISSING_REQUIRED_ACCOUNT,
  GHOSTSPEAK_MARKETPLACE_ERROR__INVALID_ACCOUNT,
  GHOSTSPEAK_MARKETPLACE_ERROR__INSTRUCTION_PARSING_FAILED,
  isGhostspeakMarketplaceError,
} from '../errors';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const UPDATE_DYNAMIC_PRICING_DISCRIMINATOR = new Uint8Array([
  22, 97, 198, 34, 14, 133, 83, 168,
]);

export function getUpdateDynamicPricingDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    UPDATE_DYNAMIC_PRICING_DISCRIMINATOR
  );
}

export type UpdateDynamicPricingInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountEngine extends string | AccountMeta<string> = string,
  TAccountUpdater extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountEngine extends string
        ? WritableAccount<TAccountEngine>
        : TAccountEngine,
      TAccountUpdater extends string
        ? ReadonlySignerAccount<TAccountUpdater> &
            AccountSignerMeta<TAccountUpdater>
        : TAccountUpdater,
      ...TRemainingAccounts,
    ]
  >;

export type UpdateDynamicPricingInstructionData = {
  discriminator: ReadonlyUint8Array;
  currentDemand: bigint;
  peakDemand: bigint;
  averageDemand: bigint;
  demandTrend: number;
  demandVolatility: number;
  lastUpdated: bigint;
};

export type UpdateDynamicPricingInstructionDataArgs = {
  currentDemand: number | bigint;
  peakDemand: number | bigint;
  averageDemand: number | bigint;
  demandTrend: number;
  demandVolatility: number;
  lastUpdated: number | bigint;
};

export function getUpdateDynamicPricingInstructionDataEncoder(): FixedSizeEncoder<UpdateDynamicPricingInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['currentDemand', getU64Encoder()],
      ['peakDemand', getU64Encoder()],
      ['averageDemand', getU64Encoder()],
      ['demandTrend', getI32Encoder()],
      ['demandVolatility', getU32Encoder()],
      ['lastUpdated', getI64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: UPDATE_DYNAMIC_PRICING_DISCRIMINATOR,
    })
  );
}

export function getUpdateDynamicPricingInstructionDataDecoder(): FixedSizeDecoder<UpdateDynamicPricingInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['currentDemand', getU64Decoder()],
    ['peakDemand', getU64Decoder()],
    ['averageDemand', getU64Decoder()],
    ['demandTrend', getI32Decoder()],
    ['demandVolatility', getU32Decoder()],
    ['lastUpdated', getI64Decoder()],
  ]);
}

export function getUpdateDynamicPricingInstructionDataCodec(): FixedSizeCodec<
  UpdateDynamicPricingInstructionDataArgs,
  UpdateDynamicPricingInstructionData
> {
  return combineCodec(
    getUpdateDynamicPricingInstructionDataEncoder(),
    getUpdateDynamicPricingInstructionDataDecoder()
  );
}

export type UpdateDynamicPricingInput<
  TAccountEngine extends string = string,
  TAccountUpdater extends string = string,
> = {
  engine: Address<TAccountEngine>;
  updater: TransactionSigner<TAccountUpdater>;
  currentDemand: UpdateDynamicPricingInstructionDataArgs['currentDemand'];
  peakDemand: UpdateDynamicPricingInstructionDataArgs['peakDemand'];
  averageDemand: UpdateDynamicPricingInstructionDataArgs['averageDemand'];
  demandTrend: UpdateDynamicPricingInstructionDataArgs['demandTrend'];
  demandVolatility: UpdateDynamicPricingInstructionDataArgs['demandVolatility'];
  lastUpdated: UpdateDynamicPricingInstructionDataArgs['lastUpdated'];
};

export function getUpdateDynamicPricingInstruction<
  TAccountEngine extends string,
  TAccountUpdater extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: UpdateDynamicPricingInput<TAccountEngine, TAccountUpdater>,
  config?: { programAddress?: TProgramAddress }
): UpdateDynamicPricingInstruction<
  TProgramAddress,
  TAccountEngine,
  TAccountUpdater
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    engine: { value: input.engine ?? null, isWritable: true },
    updater: { value: input.updater ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.engine),
      getAccountMeta(accounts.updater),
    ],
    programAddress,
    data: getUpdateDynamicPricingInstructionDataEncoder().encode(
      args as UpdateDynamicPricingInstructionDataArgs
    ),
  } as UpdateDynamicPricingInstruction<
    TProgramAddress,
    TAccountEngine,
    TAccountUpdater
  >;

  return instruction;
}

export type ParsedUpdateDynamicPricingInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    engine: TAccountMetas[0];
    updater: TAccountMetas[1];
  };
  data: UpdateDynamicPricingInstructionData;
};

export function parseUpdateDynamicPricingInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedUpdateDynamicPricingInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    throw new Error('[GHOSTSPEAK_MARKETPLACE_ERROR__INSUFFICIENT_ACCOUNTS] Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      engine: getNextAccount(),
      updater: getNextAccount(),
    },
    data: getUpdateDynamicPricingInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
