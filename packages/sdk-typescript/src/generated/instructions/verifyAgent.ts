/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import {
  GHOSTSPEAK_MARKETPLACE_ERROR__INSUFFICIENT_ACCOUNTS,
  GHOSTSPEAK_MARKETPLACE_ERROR__INVALID_INSTRUCTION_DATA,
  GHOSTSPEAK_MARKETPLACE_ERROR__MISSING_REQUIRED_ACCOUNT,
  GHOSTSPEAK_MARKETPLACE_ERROR__INVALID_ACCOUNT,
  GHOSTSPEAK_MARKETPLACE_ERROR__INSTRUCTION_PARSING_FAILED,
  isGhostspeakMarketplaceError,
} from '../errors';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const VERIFY_AGENT_DISCRIMINATOR = new Uint8Array([
  206, 212, 108, 12, 105, 61, 100, 66,
]);

export function getVerifyAgentDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    VERIFY_AGENT_DISCRIMINATOR
  );
}

export type VerifyAgentInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountAgentVerification extends string | AccountMeta<string> = string,
  TAccountAgent extends string | AccountMeta<string> = string,
  TAccountVerifier extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountClock extends
    | string
    | AccountMeta<string> = 'SysvarC1ock11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAgentVerification extends string
        ? WritableAccount<TAccountAgentVerification>
        : TAccountAgentVerification,
      TAccountAgent extends string
        ? ReadonlyAccount<TAccountAgent>
        : TAccountAgent,
      TAccountVerifier extends string
        ? WritableSignerAccount<TAccountVerifier> &
            AccountSignerMeta<TAccountVerifier>
        : TAccountVerifier,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountClock extends string
        ? ReadonlyAccount<TAccountClock>
        : TAccountClock,
      ...TRemainingAccounts,
    ]
  >;

export type VerifyAgentInstructionData = {
  discriminator: ReadonlyUint8Array;
  agentPubkey: Address;
  serviceEndpoint: string;
  supportedCapabilities: Array<bigint>;
  verifiedAt: bigint;
};

export type VerifyAgentInstructionDataArgs = {
  agentPubkey: Address;
  serviceEndpoint: string;
  supportedCapabilities: Array<number | bigint>;
  verifiedAt: number | bigint;
};

export function getVerifyAgentInstructionDataEncoder(): Encoder<VerifyAgentInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['agentPubkey', getAddressEncoder()],
      [
        'serviceEndpoint',
        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
      ],
      ['supportedCapabilities', getArrayEncoder(getU64Encoder())],
      ['verifiedAt', getI64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: VERIFY_AGENT_DISCRIMINATOR })
  );
}

export function getVerifyAgentInstructionDataDecoder(): Decoder<VerifyAgentInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['agentPubkey', getAddressDecoder()],
    [
      'serviceEndpoint',
      addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder()),
    ],
    ['supportedCapabilities', getArrayDecoder(getU64Decoder())],
    ['verifiedAt', getI64Decoder()],
  ]);
}

export function getVerifyAgentInstructionDataCodec(): Codec<
  VerifyAgentInstructionDataArgs,
  VerifyAgentInstructionData
> {
  return combineCodec(
    getVerifyAgentInstructionDataEncoder(),
    getVerifyAgentInstructionDataDecoder()
  );
}

export type VerifyAgentAsyncInput<
  TAccountAgentVerification extends string = string,
  TAccountAgent extends string = string,
  TAccountVerifier extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountClock extends string = string,
> = {
  /** Verification account with enhanced PDA security */
  agentVerification?: Address<TAccountAgentVerification>;
  /** Agent account being verified (enhanced validation) */
  agent: Address<TAccountAgent>;
  /** Verifier authority with enhanced permissions */
  verifier: TransactionSigner<TAccountVerifier>;
  /** System program for account operations */
  systemProgram?: Address<TAccountSystemProgram>;
  /** Clock sysvar for timestamp validation */
  clock?: Address<TAccountClock>;
  agentPubkey: VerifyAgentInstructionDataArgs['agentPubkey'];
  serviceEndpoint: VerifyAgentInstructionDataArgs['serviceEndpoint'];
  supportedCapabilities: VerifyAgentInstructionDataArgs['supportedCapabilities'];
  verifiedAt: VerifyAgentInstructionDataArgs['verifiedAt'];
};

export async function getVerifyAgentInstructionAsync<
  TAccountAgentVerification extends string,
  TAccountAgent extends string,
  TAccountVerifier extends string,
  TAccountSystemProgram extends string,
  TAccountClock extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: VerifyAgentAsyncInput<
    TAccountAgentVerification,
    TAccountAgent,
    TAccountVerifier,
    TAccountSystemProgram,
    TAccountClock
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  VerifyAgentInstruction<
    TProgramAddress,
    TAccountAgentVerification,
    TAccountAgent,
    TAccountVerifier,
    TAccountSystemProgram,
    TAccountClock
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    agentVerification: {
      value: input.agentVerification ?? null,
      isWritable: true,
    },
    agent: { value: input.agent ?? null, isWritable: false },
    verifier: { value: input.verifier ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    clock: { value: input.clock ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.agentVerification.value) {
    accounts.agentVerification.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            97, 103, 101, 110, 116, 95, 118, 101, 114, 105, 102, 105, 99, 97,
            116, 105, 111, 110,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.agent.value)),
        getAddressEncoder().encode(expectAddress(accounts.verifier.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.agentVerification),
      getAccountMeta(accounts.agent),
      getAccountMeta(accounts.verifier),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.clock),
    ],
    programAddress,
    data: getVerifyAgentInstructionDataEncoder().encode(
      args as VerifyAgentInstructionDataArgs
    ),
  } as VerifyAgentInstruction<
    TProgramAddress,
    TAccountAgentVerification,
    TAccountAgent,
    TAccountVerifier,
    TAccountSystemProgram,
    TAccountClock
  >;

  return instruction;
}

export type VerifyAgentInput<
  TAccountAgentVerification extends string = string,
  TAccountAgent extends string = string,
  TAccountVerifier extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountClock extends string = string,
> = {
  /** Verification account with enhanced PDA security */
  agentVerification: Address<TAccountAgentVerification>;
  /** Agent account being verified (enhanced validation) */
  agent: Address<TAccountAgent>;
  /** Verifier authority with enhanced permissions */
  verifier: TransactionSigner<TAccountVerifier>;
  /** System program for account operations */
  systemProgram?: Address<TAccountSystemProgram>;
  /** Clock sysvar for timestamp validation */
  clock?: Address<TAccountClock>;
  agentPubkey: VerifyAgentInstructionDataArgs['agentPubkey'];
  serviceEndpoint: VerifyAgentInstructionDataArgs['serviceEndpoint'];
  supportedCapabilities: VerifyAgentInstructionDataArgs['supportedCapabilities'];
  verifiedAt: VerifyAgentInstructionDataArgs['verifiedAt'];
};

export function getVerifyAgentInstruction<
  TAccountAgentVerification extends string,
  TAccountAgent extends string,
  TAccountVerifier extends string,
  TAccountSystemProgram extends string,
  TAccountClock extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: VerifyAgentInput<
    TAccountAgentVerification,
    TAccountAgent,
    TAccountVerifier,
    TAccountSystemProgram,
    TAccountClock
  >,
  config?: { programAddress?: TProgramAddress }
): VerifyAgentInstruction<
  TProgramAddress,
  TAccountAgentVerification,
  TAccountAgent,
  TAccountVerifier,
  TAccountSystemProgram,
  TAccountClock
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    agentVerification: {
      value: input.agentVerification ?? null,
      isWritable: true,
    },
    agent: { value: input.agent ?? null, isWritable: false },
    verifier: { value: input.verifier ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    clock: { value: input.clock ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.agentVerification),
      getAccountMeta(accounts.agent),
      getAccountMeta(accounts.verifier),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.clock),
    ],
    programAddress,
    data: getVerifyAgentInstructionDataEncoder().encode(
      args as VerifyAgentInstructionDataArgs
    ),
  } as VerifyAgentInstruction<
    TProgramAddress,
    TAccountAgentVerification,
    TAccountAgent,
    TAccountVerifier,
    TAccountSystemProgram,
    TAccountClock
  >;

  return instruction;
}

export type ParsedVerifyAgentInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Verification account with enhanced PDA security */
    agentVerification: TAccountMetas[0];
    /** Agent account being verified (enhanced validation) */
    agent: TAccountMetas[1];
    /** Verifier authority with enhanced permissions */
    verifier: TAccountMetas[2];
    /** System program for account operations */
    systemProgram: TAccountMetas[3];
    /** Clock sysvar for timestamp validation */
    clock: TAccountMetas[4];
  };
  data: VerifyAgentInstructionData;
};

export function parseVerifyAgentInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedVerifyAgentInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    throw new Error('[GHOSTSPEAK_MARKETPLACE_ERROR__INSUFFICIENT_ACCOUNTS] Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      agentVerification: getNextAccount(),
      agent: getNextAccount(),
      verifier: getNextAccount(),
      systemProgram: getNextAccount(),
      clock: getNextAccount(),
    },
    data: getVerifyAgentInstructionDataDecoder().decode(instruction.data),
  };
}
