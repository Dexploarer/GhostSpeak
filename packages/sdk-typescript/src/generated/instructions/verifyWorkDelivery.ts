/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const VERIFY_WORK_DELIVERY_DISCRIMINATOR = new Uint8Array([
  51, 21, 40, 11, 225, 15, 184, 230,
]);

export function getVerifyWorkDeliveryDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    VERIFY_WORK_DELIVERY_DISCRIMINATOR
  );
}

export type VerifyWorkDeliveryInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountWorkOrder extends string | AccountMeta<string> = string,
  TAccountWorkDelivery extends string | AccountMeta<string> = string,
  TAccountClient extends string | AccountMeta<string> = string,
  TAccountClock extends
    | string
    | AccountMeta<string> = 'SysvarC1ock11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountWorkOrder extends string
        ? WritableAccount<TAccountWorkOrder>
        : TAccountWorkOrder,
      TAccountWorkDelivery extends string
        ? ReadonlyAccount<TAccountWorkDelivery>
        : TAccountWorkDelivery,
      TAccountClient extends string
        ? WritableSignerAccount<TAccountClient> &
            AccountSignerMeta<TAccountClient>
        : TAccountClient,
      TAccountClock extends string
        ? ReadonlyAccount<TAccountClock>
        : TAccountClock,
      ...TRemainingAccounts,
    ]
  >;

export type VerifyWorkDeliveryInstructionData = {
  discriminator: ReadonlyUint8Array;
  verificationNotes: Option<string>;
};

export type VerifyWorkDeliveryInstructionDataArgs = {
  verificationNotes: OptionOrNullable<string>;
};

export function getVerifyWorkDeliveryInstructionDataEncoder(): Encoder<VerifyWorkDeliveryInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      [
        'verificationNotes',
        getOptionEncoder(
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())
        ),
      ],
    ]),
    (value) => ({ ...value, discriminator: VERIFY_WORK_DELIVERY_DISCRIMINATOR })
  );
}

export function getVerifyWorkDeliveryInstructionDataDecoder(): Decoder<VerifyWorkDeliveryInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    [
      'verificationNotes',
      getOptionDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
  ]);
}

export function getVerifyWorkDeliveryInstructionDataCodec(): Codec<
  VerifyWorkDeliveryInstructionDataArgs,
  VerifyWorkDeliveryInstructionData
> {
  return combineCodec(
    getVerifyWorkDeliveryInstructionDataEncoder(),
    getVerifyWorkDeliveryInstructionDataDecoder()
  );
}

export type VerifyWorkDeliveryInput<
  TAccountWorkOrder extends string = string,
  TAccountWorkDelivery extends string = string,
  TAccountClient extends string = string,
  TAccountClock extends string = string,
> = {
  workOrder: Address<TAccountWorkOrder>;
  workDelivery: Address<TAccountWorkDelivery>;
  client: TransactionSigner<TAccountClient>;
  clock?: Address<TAccountClock>;
  verificationNotes: VerifyWorkDeliveryInstructionDataArgs['verificationNotes'];
};

export function getVerifyWorkDeliveryInstruction<
  TAccountWorkOrder extends string,
  TAccountWorkDelivery extends string,
  TAccountClient extends string,
  TAccountClock extends string,
  TProgramAddress extends
    Address = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: VerifyWorkDeliveryInput<
    TAccountWorkOrder,
    TAccountWorkDelivery,
    TAccountClient,
    TAccountClock
  >,
  config?: { programAddress?: TProgramAddress }
): VerifyWorkDeliveryInstruction<
  TProgramAddress,
  TAccountWorkOrder,
  TAccountWorkDelivery,
  TAccountClient,
  TAccountClock
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    workOrder: { value: input.workOrder ?? null, isWritable: true },
    workDelivery: { value: input.workDelivery ?? null, isWritable: false },
    client: { value: input.client ?? null, isWritable: true },
    clock: { value: input.clock ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.workOrder),
      getAccountMeta(accounts.workDelivery),
      getAccountMeta(accounts.client),
      getAccountMeta(accounts.clock),
    ],
    programAddress,
    data: getVerifyWorkDeliveryInstructionDataEncoder().encode(
      args as VerifyWorkDeliveryInstructionDataArgs
    ),
  } as VerifyWorkDeliveryInstruction<
    TProgramAddress,
    TAccountWorkOrder,
    TAccountWorkDelivery,
    TAccountClient,
    TAccountClock
  >;

  return instruction;
}

export type ParsedVerifyWorkDeliveryInstruction<
  TProgram extends string = typeof GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    workOrder: TAccountMetas[0];
    workDelivery: TAccountMetas[1];
    client: TAccountMetas[2];
    clock: TAccountMetas[3];
  };
  data: VerifyWorkDeliveryInstructionData;
};

export function parseVerifyWorkDeliveryInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedVerifyWorkDeliveryInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      workOrder: getNextAccount(),
      workDelivery: getNextAccount(),
      client: getNextAccount(),
      clock: getNextAccount(),
    },
    data: getVerifyWorkDeliveryInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
