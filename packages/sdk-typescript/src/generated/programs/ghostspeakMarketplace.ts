/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedAcceptJobApplicationInstruction,
  type ParsedActivateAgentInstruction,
  type ParsedAddMessageReactionInstruction,
  type ParsedAddTopAgentInstruction,
  type ParsedApplyToJobInstruction,
  type ParsedApproveExtensionInstruction,
  type ParsedAssignArbitratorInstruction,
  type ParsedBatchReplicateAgentsInstruction,
  type ParsedCancelEscrowInstruction,
  type ParsedCastVoteInstruction,
  type ParsedCompleteEscrowInstruction,
  type ParsedCreateA2aSessionInstruction,
  type ParsedCreateAnalyticsDashboardInstruction,
  type ParsedCreateBulkDealInstruction,
  type ParsedCreateChannelInstruction,
  type ParsedCreateDynamicPricingEngineInstruction,
  type ParsedCreateEnhancedChannelInstruction,
  type ParsedCreateEscrowInstruction,
  type ParsedCreateIncentiveProgramInstruction,
  type ParsedCreateJobPostingInstruction,
  type ParsedCreateMarketAnalyticsInstruction,
  type ParsedCreateMultisigInstruction,
  type ParsedCreateReplicationTemplateInstruction,
  type ParsedCreateRoyaltyStreamInstruction,
  type ParsedCreateServiceAuctionInstruction,
  type ParsedCreateServiceListingInstruction,
  type ParsedCreateToken2022MintInstruction,
  type ParsedCreateWorkOrderInstruction,
  type ParsedDeactivateAgentInstruction,
  type ParsedDelegateVoteInstruction,
  type ParsedDisputeEscrowInstruction,
  type ParsedDistributeIncentivesInstruction,
  type ParsedExecuteBulkDealBatchInstruction,
  type ParsedExecuteProposalInstruction,
  type ParsedExportActionInstruction,
  type ParsedExportAuditContextInstruction,
  type ParsedExportBiometricQualityInstruction,
  type ParsedExportComplianceStatusInstruction,
  type ParsedExportDynamicPricingConfigInstruction,
  type ParsedExportMultisigConfigInstruction,
  type ParsedExportReportEntryInstruction,
  type ParsedExportResourceConstraintsInstruction,
  type ParsedExportRuleConditionInstruction,
  type ParsedExtendAuctionForReserveInstruction,
  type ParsedFileDisputeInstruction,
  type ParsedFinalizeAuctionInstruction,
  type ParsedGenerateComplianceReportInstruction,
  type ParsedInitializeAuditTrailInstruction,
  type ParsedInitializeConfidentialTransferMintInstruction,
  type ParsedInitializeDefaultAccountStateInstruction,
  type ParsedInitializeGovernanceProposalInstruction,
  type ParsedInitializeInterestBearingConfigInstruction,
  type ParsedInitializeMintCloseAuthorityInstruction,
  type ParsedInitializeRbacConfigInstruction,
  type ParsedInitializeTransferFeeConfigInstruction,
  type ParsedInitiateNegotiationInstruction,
  type ParsedJoinChannelInstruction,
  type ParsedLeaveChannelInstruction,
  type ParsedListAgentForResaleInstruction,
  type ParsedMakeCounterOfferInstruction,
  type ParsedManageAgentStatusInstruction,
  type ParsedPlaceAuctionBidInstruction,
  type ParsedPlaceDutchAuctionBidInstruction,
  type ParsedProcessEscrowPaymentInstruction,
  type ParsedProcessPartialRefundInstruction,
  type ParsedProcessPaymentInstruction,
  type ParsedPurchaseServiceInstruction,
  type ParsedRefundExpiredEscrowInstruction,
  type ParsedRegisterAgentCompressedInstruction,
  type ParsedRegisterAgentInstruction,
  type ParsedRegisterExtensionInstruction,
  type ParsedRejectWorkDeliveryInstruction,
  type ParsedReplicateAgentInstruction,
  type ParsedResolveDisputeInstruction,
  type ParsedSendA2aMessageInstruction,
  type ParsedSendEnhancedMessageInstruction,
  type ParsedSendMessageInstruction,
  type ParsedSubmitDisputeEvidenceInstruction,
  type ParsedSubmitEvidenceBatchInstruction,
  type ParsedSubmitWorkDeliveryInstruction,
  type ParsedTallyVotesInstruction,
  type ParsedUpdateA2aStatusInstruction,
  type ParsedUpdateAgentInstruction,
  type ParsedUpdateAgentReputationInstruction,
  type ParsedUpdateAgentServiceInstruction,
  type ParsedUpdateAnalyticsDashboardInstruction,
  type ParsedUpdateAuctionReservePriceInstruction,
  type ParsedUpdateChannelSettingsInstruction,
  type ParsedUpdateDynamicPricingInstruction,
  type ParsedUpdateMarketAnalyticsInstruction,
  type ParsedVerifyAgentInstruction,
  type ParsedVerifyWorkDeliveryInstruction,
} from '../instructions';

export const GHOSTSPEAK_MARKETPLACE_PROGRAM_ADDRESS =
  'CBpmFUfm5GBgdtx2G2exCQqMANhwa64S56kD8Wa3Ugv4' as Address<'CBpmFUfm5GBgdtx2G2exCQqMANhwa64S56kD8Wa3Ugv4'>;

export enum GhostspeakMarketplaceAccount {
  A2AMessage,
  A2ASession,
  A2AStatus,
  Agent,
  AgentIncentives,
  AgentTreeConfig,
  AgentVerification,
  AnalyticsDashboard,
  ArbitratorRegistry,
  AuctionMarketplace,
  AuditTrail,
  BulkDeal,
  Channel,
  ComplianceReport,
  DisputeCase,
  DynamicPricingEngine,
  Escrow,
  Extension,
  GovernanceProposal,
  IncentiveProgram,
  JobApplication,
  JobContract,
  JobPosting,
  MarketAnalytics,
  Message,
  Multisig,
  NegotiationChatbot,
  Payment,
  RbacConfig,
  ReentrancyGuard,
  ReplicationRecord,
  ReplicationTemplate,
  ResaleMarket,
  RoyaltyStream,
  ServiceListing,
  ServicePurchase,
  UserRegistry,
  WorkDelivery,
  WorkOrder,
}

export function identifyGhostspeakMarketplaceAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): GhostspeakMarketplaceAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([174, 118, 140, 42, 3, 207, 16, 145])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceAccount.A2AMessage;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([35, 65, 251, 143, 132, 134, 104, 33])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceAccount.A2ASession;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([253, 113, 10, 35, 24, 155, 227, 28])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceAccount.A2AStatus;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([47, 166, 112, 147, 155, 197, 86, 7])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceAccount.Agent;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([167, 87, 249, 0, 146, 197, 209, 158])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceAccount.AgentIncentives;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([145, 145, 156, 0, 197, 232, 130, 245])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceAccount.AgentTreeConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([128, 155, 95, 241, 66, 207, 166, 59])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceAccount.AgentVerification;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([50, 162, 197, 10, 93, 40, 12, 147])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceAccount.AnalyticsDashboard;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([252, 241, 152, 150, 74, 0, 119, 175])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceAccount.ArbitratorRegistry;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([163, 174, 175, 5, 237, 55, 21, 230])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceAccount.AuctionMarketplace;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([171, 223, 253, 181, 134, 88, 66, 26])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceAccount.AuditTrail;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([80, 240, 220, 203, 97, 75, 125, 183])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceAccount.BulkDeal;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([49, 159, 99, 106, 220, 87, 219, 88])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceAccount.Channel;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([75, 146, 78, 26, 130, 240, 228, 35])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceAccount.ComplianceReport;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([164, 200, 54, 239, 94, 76, 51, 130])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceAccount.DisputeCase;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([213, 106, 173, 92, 14, 72, 162, 175])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceAccount.DynamicPricingEngine;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([31, 213, 123, 187, 186, 22, 218, 155])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceAccount.Escrow;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([141, 183, 126, 42, 23, 237, 11, 5])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceAccount.Extension;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([53, 107, 240, 190, 43, 73, 65, 143])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceAccount.GovernanceProposal;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([148, 35, 75, 198, 179, 216, 77, 84])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceAccount.IncentiveProgram;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([114, 250, 212, 242, 162, 108, 58, 20])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceAccount.JobApplication;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([147, 204, 137, 108, 97, 90, 113, 28])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceAccount.JobContract;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([204, 119, 64, 204, 100, 12, 26, 127])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceAccount.JobPosting;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([198, 187, 239, 13, 141, 42, 92, 67])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceAccount.MarketAnalytics;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([110, 151, 23, 110, 198, 6, 125, 181])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceAccount.Message;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([224, 116, 121, 186, 68, 161, 79, 236])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceAccount.Multisig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([236, 199, 221, 210, 158, 112, 204, 255])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceAccount.NegotiationChatbot;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([227, 231, 51, 26, 244, 88, 4, 148])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceAccount.Payment;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([177, 94, 184, 202, 221, 112, 110, 38])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceAccount.RbacConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([207, 227, 141, 11, 194, 21, 193, 32])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceAccount.ReentrancyGuard;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([243, 98, 232, 67, 71, 49, 173, 6])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceAccount.ReplicationRecord;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([219, 78, 120, 167, 202, 67, 57, 204])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceAccount.ReplicationTemplate;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([33, 30, 12, 55, 106, 90, 225, 166])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceAccount.ResaleMarket;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([73, 53, 156, 242, 157, 5, 183, 44])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceAccount.RoyaltyStream;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([117, 173, 54, 52, 146, 147, 124, 211])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceAccount.ServiceListing;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([84, 229, 182, 61, 144, 151, 103, 149])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceAccount.ServicePurchase;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([37, 84, 98, 14, 130, 63, 210, 138])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceAccount.UserRegistry;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([135, 198, 137, 54, 172, 172, 212, 84])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceAccount.WorkDelivery;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([67, 109, 86, 157, 94, 117, 205, 9])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceAccount.WorkOrder;
  }
  throw new Error(
    'The provided account could not be identified as a ghostspeakMarketplace account.'
  );
}

export enum GhostspeakMarketplaceInstruction {
  ExportAction,
  ExportAuditContext,
  ExportBiometricQuality,
  ExportComplianceStatus,
  ExportDynamicPricingConfig,
  ExportMultisigConfig,
  ExportReportEntry,
  ExportResourceConstraints,
  ExportRuleCondition,
  AcceptJobApplication,
  ActivateAgent,
  AddMessageReaction,
  AddTopAgent,
  ApplyToJob,
  ApproveExtension,
  AssignArbitrator,
  BatchReplicateAgents,
  CancelEscrow,
  CastVote,
  CompleteEscrow,
  CreateA2aSession,
  CreateAnalyticsDashboard,
  CreateBulkDeal,
  CreateChannel,
  CreateDynamicPricingEngine,
  CreateEnhancedChannel,
  CreateEscrow,
  CreateIncentiveProgram,
  CreateJobPosting,
  CreateMarketAnalytics,
  CreateMultisig,
  CreateReplicationTemplate,
  CreateRoyaltyStream,
  CreateServiceAuction,
  CreateServiceListing,
  CreateToken2022Mint,
  CreateWorkOrder,
  DeactivateAgent,
  DelegateVote,
  DisputeEscrow,
  DistributeIncentives,
  ExecuteBulkDealBatch,
  ExecuteProposal,
  ExtendAuctionForReserve,
  FileDispute,
  FinalizeAuction,
  GenerateComplianceReport,
  InitializeAuditTrail,
  InitializeConfidentialTransferMint,
  InitializeDefaultAccountState,
  InitializeGovernanceProposal,
  InitializeInterestBearingConfig,
  InitializeMintCloseAuthority,
  InitializeRbacConfig,
  InitializeTransferFeeConfig,
  InitiateNegotiation,
  JoinChannel,
  LeaveChannel,
  ListAgentForResale,
  MakeCounterOffer,
  ManageAgentStatus,
  PlaceAuctionBid,
  PlaceDutchAuctionBid,
  ProcessEscrowPayment,
  ProcessPartialRefund,
  ProcessPayment,
  PurchaseService,
  RefundExpiredEscrow,
  RegisterAgent,
  RegisterAgentCompressed,
  RegisterExtension,
  RejectWorkDelivery,
  ReplicateAgent,
  ResolveDispute,
  SendA2aMessage,
  SendEnhancedMessage,
  SendMessage,
  SubmitDisputeEvidence,
  SubmitEvidenceBatch,
  SubmitWorkDelivery,
  TallyVotes,
  UpdateA2aStatus,
  UpdateAgent,
  UpdateAgentReputation,
  UpdateAgentService,
  UpdateAnalyticsDashboard,
  UpdateAuctionReservePrice,
  UpdateChannelSettings,
  UpdateDynamicPricing,
  UpdateMarketAnalytics,
  VerifyAgent,
  VerifyWorkDelivery,
}

export function identifyGhostspeakMarketplaceInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): GhostspeakMarketplaceInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([206, 39, 235, 232, 29, 98, 124, 4])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.ExportAction;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([146, 64, 145, 33, 190, 17, 82, 70])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.ExportAuditContext;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([30, 229, 117, 69, 175, 246, 7, 143])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.ExportBiometricQuality;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([25, 78, 239, 255, 21, 9, 170, 98])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.ExportComplianceStatus;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([212, 219, 242, 67, 179, 18, 238, 104])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.ExportDynamicPricingConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([100, 100, 216, 86, 42, 163, 37, 64])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.ExportMultisigConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([34, 42, 234, 113, 80, 201, 15, 95])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.ExportReportEntry;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([250, 43, 164, 121, 205, 210, 124, 127])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.ExportResourceConstraints;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([87, 78, 249, 236, 50, 103, 49, 173])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.ExportRuleCondition;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([191, 161, 93, 207, 225, 58, 71, 16])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.AcceptJobApplication;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([252, 139, 87, 21, 195, 152, 29, 217])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.ActivateAgent;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([82, 29, 134, 149, 255, 74, 248, 210])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.AddMessageReaction;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([9, 96, 62, 59, 180, 205, 102, 11])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.AddTopAgent;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([0, 252, 167, 244, 145, 90, 227, 29])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.ApplyToJob;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([202, 138, 100, 241, 89, 154, 3, 53])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.ApproveExtension;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([227, 183, 153, 251, 4, 55, 13, 56])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.AssignArbitrator;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([224, 241, 221, 158, 57, 55, 110, 180])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.BatchReplicateAgents;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([156, 203, 54, 179, 38, 72, 33, 21])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.CancelEscrow;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([20, 212, 15, 189, 69, 180, 69, 151])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.CastVote;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([158, 211, 102, 36, 244, 24, 103, 163])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.CompleteEscrow;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([22, 57, 77, 239, 115, 215, 61, 131])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.CreateA2aSession;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([160, 237, 52, 23, 118, 243, 100, 75])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.CreateAnalyticsDashboard;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([133, 143, 169, 255, 188, 189, 104, 216])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.CreateBulkDeal;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([37, 105, 253, 99, 87, 46, 223, 20])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.CreateChannel;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([251, 20, 25, 4, 140, 172, 5, 167])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.CreateDynamicPricingEngine;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([28, 188, 236, 214, 244, 184, 198, 219])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.CreateEnhancedChannel;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([253, 215, 165, 116, 36, 108, 68, 80])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.CreateEscrow;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([115, 222, 207, 231, 169, 56, 125, 153])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.CreateIncentiveProgram;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([71, 93, 23, 166, 103, 210, 218, 105])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.CreateJobPosting;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([72, 76, 122, 193, 232, 239, 106, 81])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.CreateMarketAnalytics;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([148, 146, 240, 10, 226, 215, 167, 174])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.CreateMultisig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([58, 37, 131, 238, 116, 165, 200, 193])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.CreateReplicationTemplate;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([139, 213, 158, 201, 140, 251, 236, 89])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.CreateRoyaltyStream;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([236, 178, 59, 67, 226, 82, 27, 209])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.CreateServiceAuction;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([91, 37, 216, 26, 93, 146, 13, 182])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.CreateServiceListing;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([4, 45, 127, 74, 240, 104, 83, 178])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.CreateToken2022Mint;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([143, 17, 248, 200, 217, 85, 10, 175])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.CreateWorkOrder;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([205, 171, 239, 225, 82, 126, 96, 166])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.DeactivateAgent;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([12, 116, 204, 68, 87, 205, 40, 205])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.DelegateVote;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([198, 174, 139, 70, 87, 79, 181, 139])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.DisputeEscrow;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([172, 97, 184, 220, 51, 131, 45, 160])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.DistributeIncentives;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([236, 222, 159, 76, 52, 79, 235, 109])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.ExecuteBulkDealBatch;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([186, 60, 116, 133, 108, 128, 111, 28])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.ExecuteProposal;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([99, 201, 28, 182, 134, 0, 55, 181])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.ExtendAuctionForReserve;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([210, 63, 221, 114, 212, 97, 195, 156])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.FileDispute;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([220, 209, 175, 193, 57, 132, 241, 168])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.FinalizeAuction;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([213, 97, 79, 234, 22, 228, 14, 32])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.GenerateComplianceReport;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([145, 182, 236, 249, 212, 17, 175, 161])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.InitializeAuditTrail;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([154, 47, 116, 20, 167, 57, 114, 41])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.InitializeConfidentialTransferMint;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([175, 89, 119, 112, 150, 203, 202, 198])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.InitializeDefaultAccountState;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([137, 84, 234, 206, 17, 58, 54, 215])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.InitializeGovernanceProposal;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([59, 39, 17, 210, 123, 130, 101, 67])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.InitializeInterestBearingConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([117, 167, 56, 158, 201, 160, 209, 109])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.InitializeMintCloseAuthority;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([215, 68, 129, 228, 237, 165, 0, 240])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.InitializeRbacConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([189, 189, 171, 33, 115, 17, 231, 2])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.InitializeTransferFeeConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([170, 46, 176, 41, 191, 255, 104, 205])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.InitiateNegotiation;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([124, 39, 115, 89, 217, 26, 38, 29])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.JoinChannel;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([104, 0, 75, 134, 95, 80, 68, 186])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.LeaveChannel;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([3, 233, 3, 123, 241, 61, 231, 238])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.ListAgentForResale;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([74, 8, 96, 55, 146, 85, 200, 152])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.MakeCounterOffer;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([164, 219, 91, 38, 45, 31, 33, 47])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.ManageAgentStatus;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([38, 170, 233, 87, 52, 65, 23, 128])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.PlaceAuctionBid;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([209, 244, 155, 47, 62, 54, 119, 34])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.PlaceDutchAuctionBid;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([99, 206, 125, 26, 181, 158, 189, 238])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.ProcessEscrowPayment;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([91, 2, 45, 239, 179, 132, 197, 213])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.ProcessPartialRefund;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([189, 81, 30, 198, 139, 186, 115, 23])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.ProcessPayment;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([197, 43, 201, 158, 119, 134, 66, 7])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.PurchaseService;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([40, 9, 115, 148, 140, 7, 157, 160])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.RefundExpiredEscrow;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([135, 157, 66, 195, 2, 113, 175, 30])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.RegisterAgent;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([15, 6, 94, 55, 65, 80, 123, 248])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.RegisterAgentCompressed;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([158, 205, 4, 17, 6, 106, 172, 148])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.RegisterExtension;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([123, 7, 32, 171, 41, 109, 58, 250])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.RejectWorkDelivery;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([252, 210, 89, 130, 31, 43, 39, 50])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.ReplicateAgent;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([231, 6, 202, 6, 96, 103, 12, 230])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.ResolveDispute;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([84, 12, 203, 77, 36, 199, 15, 83])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.SendA2aMessage;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([157, 174, 222, 205, 233, 240, 244, 136])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.SendEnhancedMessage;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([57, 40, 34, 178, 189, 10, 65, 26])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.SendMessage;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([177, 174, 100, 125, 106, 213, 241, 22])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.SubmitDisputeEvidence;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([168, 150, 145, 75, 38, 203, 43, 9])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.SubmitEvidenceBatch;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([151, 198, 209, 252, 41, 69, 106, 93])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.SubmitWorkDelivery;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([144, 82, 0, 72, 160, 132, 35, 121])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.TallyVotes;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([10, 122, 84, 103, 225, 186, 125, 183])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.UpdateA2aStatus;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([85, 2, 178, 9, 119, 139, 102, 164])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.UpdateAgent;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([80, 227, 92, 245, 231, 37, 99, 180])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.UpdateAgentReputation;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([87, 146, 181, 198, 252, 68, 243, 102])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.UpdateAgentService;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([184, 35, 106, 114, 27, 86, 233, 32])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.UpdateAnalyticsDashboard;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([97, 2, 209, 24, 27, 236, 50, 174])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.UpdateAuctionReservePrice;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([149, 67, 63, 108, 132, 122, 95, 128])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.UpdateChannelSettings;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([22, 97, 198, 34, 14, 133, 83, 168])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.UpdateDynamicPricing;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([156, 13, 81, 78, 11, 3, 54, 178])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.UpdateMarketAnalytics;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([206, 212, 108, 12, 105, 61, 100, 66])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.VerifyAgent;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([51, 21, 40, 11, 225, 15, 184, 230])
      ),
      0
    )
  ) {
    return GhostspeakMarketplaceInstruction.VerifyWorkDelivery;
  }
  throw new Error(
    'The provided instruction could not be identified as a ghostspeakMarketplace instruction.'
  );
}

export type ParsedGhostspeakMarketplaceInstruction<
  TProgram extends string = 'CBpmFUfm5GBgdtx2G2exCQqMANhwa64S56kD8Wa3Ugv4',
> =
  | ({
      instructionType: GhostspeakMarketplaceInstruction.ExportAction;
    } & ParsedExportActionInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.ExportAuditContext;
    } & ParsedExportAuditContextInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.ExportBiometricQuality;
    } & ParsedExportBiometricQualityInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.ExportComplianceStatus;
    } & ParsedExportComplianceStatusInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.ExportDynamicPricingConfig;
    } & ParsedExportDynamicPricingConfigInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.ExportMultisigConfig;
    } & ParsedExportMultisigConfigInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.ExportReportEntry;
    } & ParsedExportReportEntryInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.ExportResourceConstraints;
    } & ParsedExportResourceConstraintsInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.ExportRuleCondition;
    } & ParsedExportRuleConditionInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.AcceptJobApplication;
    } & ParsedAcceptJobApplicationInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.ActivateAgent;
    } & ParsedActivateAgentInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.AddMessageReaction;
    } & ParsedAddMessageReactionInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.AddTopAgent;
    } & ParsedAddTopAgentInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.ApplyToJob;
    } & ParsedApplyToJobInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.ApproveExtension;
    } & ParsedApproveExtensionInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.AssignArbitrator;
    } & ParsedAssignArbitratorInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.BatchReplicateAgents;
    } & ParsedBatchReplicateAgentsInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.CancelEscrow;
    } & ParsedCancelEscrowInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.CastVote;
    } & ParsedCastVoteInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.CompleteEscrow;
    } & ParsedCompleteEscrowInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.CreateA2aSession;
    } & ParsedCreateA2aSessionInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.CreateAnalyticsDashboard;
    } & ParsedCreateAnalyticsDashboardInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.CreateBulkDeal;
    } & ParsedCreateBulkDealInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.CreateChannel;
    } & ParsedCreateChannelInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.CreateDynamicPricingEngine;
    } & ParsedCreateDynamicPricingEngineInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.CreateEnhancedChannel;
    } & ParsedCreateEnhancedChannelInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.CreateEscrow;
    } & ParsedCreateEscrowInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.CreateIncentiveProgram;
    } & ParsedCreateIncentiveProgramInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.CreateJobPosting;
    } & ParsedCreateJobPostingInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.CreateMarketAnalytics;
    } & ParsedCreateMarketAnalyticsInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.CreateMultisig;
    } & ParsedCreateMultisigInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.CreateReplicationTemplate;
    } & ParsedCreateReplicationTemplateInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.CreateRoyaltyStream;
    } & ParsedCreateRoyaltyStreamInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.CreateServiceAuction;
    } & ParsedCreateServiceAuctionInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.CreateServiceListing;
    } & ParsedCreateServiceListingInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.CreateToken2022Mint;
    } & ParsedCreateToken2022MintInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.CreateWorkOrder;
    } & ParsedCreateWorkOrderInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.DeactivateAgent;
    } & ParsedDeactivateAgentInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.DelegateVote;
    } & ParsedDelegateVoteInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.DisputeEscrow;
    } & ParsedDisputeEscrowInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.DistributeIncentives;
    } & ParsedDistributeIncentivesInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.ExecuteBulkDealBatch;
    } & ParsedExecuteBulkDealBatchInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.ExecuteProposal;
    } & ParsedExecuteProposalInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.ExtendAuctionForReserve;
    } & ParsedExtendAuctionForReserveInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.FileDispute;
    } & ParsedFileDisputeInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.FinalizeAuction;
    } & ParsedFinalizeAuctionInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.GenerateComplianceReport;
    } & ParsedGenerateComplianceReportInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.InitializeAuditTrail;
    } & ParsedInitializeAuditTrailInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.InitializeConfidentialTransferMint;
    } & ParsedInitializeConfidentialTransferMintInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.InitializeDefaultAccountState;
    } & ParsedInitializeDefaultAccountStateInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.InitializeGovernanceProposal;
    } & ParsedInitializeGovernanceProposalInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.InitializeInterestBearingConfig;
    } & ParsedInitializeInterestBearingConfigInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.InitializeMintCloseAuthority;
    } & ParsedInitializeMintCloseAuthorityInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.InitializeRbacConfig;
    } & ParsedInitializeRbacConfigInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.InitializeTransferFeeConfig;
    } & ParsedInitializeTransferFeeConfigInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.InitiateNegotiation;
    } & ParsedInitiateNegotiationInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.JoinChannel;
    } & ParsedJoinChannelInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.LeaveChannel;
    } & ParsedLeaveChannelInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.ListAgentForResale;
    } & ParsedListAgentForResaleInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.MakeCounterOffer;
    } & ParsedMakeCounterOfferInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.ManageAgentStatus;
    } & ParsedManageAgentStatusInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.PlaceAuctionBid;
    } & ParsedPlaceAuctionBidInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.PlaceDutchAuctionBid;
    } & ParsedPlaceDutchAuctionBidInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.ProcessEscrowPayment;
    } & ParsedProcessEscrowPaymentInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.ProcessPartialRefund;
    } & ParsedProcessPartialRefundInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.ProcessPayment;
    } & ParsedProcessPaymentInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.PurchaseService;
    } & ParsedPurchaseServiceInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.RefundExpiredEscrow;
    } & ParsedRefundExpiredEscrowInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.RegisterAgent;
    } & ParsedRegisterAgentInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.RegisterAgentCompressed;
    } & ParsedRegisterAgentCompressedInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.RegisterExtension;
    } & ParsedRegisterExtensionInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.RejectWorkDelivery;
    } & ParsedRejectWorkDeliveryInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.ReplicateAgent;
    } & ParsedReplicateAgentInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.ResolveDispute;
    } & ParsedResolveDisputeInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.SendA2aMessage;
    } & ParsedSendA2aMessageInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.SendEnhancedMessage;
    } & ParsedSendEnhancedMessageInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.SendMessage;
    } & ParsedSendMessageInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.SubmitDisputeEvidence;
    } & ParsedSubmitDisputeEvidenceInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.SubmitEvidenceBatch;
    } & ParsedSubmitEvidenceBatchInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.SubmitWorkDelivery;
    } & ParsedSubmitWorkDeliveryInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.TallyVotes;
    } & ParsedTallyVotesInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.UpdateA2aStatus;
    } & ParsedUpdateA2aStatusInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.UpdateAgent;
    } & ParsedUpdateAgentInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.UpdateAgentReputation;
    } & ParsedUpdateAgentReputationInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.UpdateAgentService;
    } & ParsedUpdateAgentServiceInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.UpdateAnalyticsDashboard;
    } & ParsedUpdateAnalyticsDashboardInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.UpdateAuctionReservePrice;
    } & ParsedUpdateAuctionReservePriceInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.UpdateChannelSettings;
    } & ParsedUpdateChannelSettingsInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.UpdateDynamicPricing;
    } & ParsedUpdateDynamicPricingInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.UpdateMarketAnalytics;
    } & ParsedUpdateMarketAnalyticsInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.VerifyAgent;
    } & ParsedVerifyAgentInstruction<TProgram>)
  | ({
      instructionType: GhostspeakMarketplaceInstruction.VerifyWorkDelivery;
    } & ParsedVerifyWorkDeliveryInstruction<TProgram>);
