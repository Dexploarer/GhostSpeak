import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  type Codec,
  type Decoder,
  type Encoder
} from '@solana/codecs-core';
import {
  getUtf8Decoder,
  getUtf8Encoder
} from '@solana/codecs-strings';
import {
  getI64Decoder,
  getI64Encoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder
} from '@solana/codecs-numbers';
import {
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder
} from '@solana/codecs-data-structures';
import {
  getOptionDecoder,
  getOptionEncoder,
  type Option,
  type OptionOrNullable
} from '@solana/options';
import {
  getPolicyMetadataDecoder,
  getPolicyMetadataEncoder,
  getPolicyRuleDecoder,
  getPolicyRuleEncoder,
  getPolicyScopeDecoder,
  getPolicyScopeEncoder,
  getPolicyStatusDecoder,
  getPolicyStatusEncoder,
  getPolicyTypeDecoder,
  getPolicyTypeEncoder,
  type PolicyMetadata,
  type PolicyMetadataArgs,
  type PolicyRule,
  type PolicyRuleArgs,
  type PolicyScope,
  type PolicyScopeArgs,
  type PolicyStatus,
  type PolicyStatusArgs,
  type PolicyType,
  type PolicyTypeArgs,
} from '.';
/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

/** Access policy definition */
export type AccessPolicy = {
  /** Policy identifier */
  policyId: string;
  /** Policy name */
  name: string;
  /** Policy description */
  description: string;
  /** Policy type */
  policyType: PolicyType;
  /** Policy rules */
  rules: Array<PolicyRule>;
  /** Policy scope */
  scope: PolicyScope;
  /** Policy priority */
  priority: number;
  /** Policy status */
  status: PolicyStatus;
  /** Effective date */
  effectiveDate: bigint;
  /** Expiration date */
  expirationDate: Option<bigint>;
  /** Policy metadata */
  metadata: PolicyMetadata;
};

export type AccessPolicyArgs = {
  /** Policy identifier */
  policyId: string;
  /** Policy name */
  name: string;
  /** Policy description */
  description: string;
  /** Policy type */
  policyType: PolicyTypeArgs;
  /** Policy rules */
  rules: Array<PolicyRuleArgs>;
  /** Policy scope */
  scope: PolicyScopeArgs;
  /** Policy priority */
  priority: number;
  /** Policy status */
  status: PolicyStatusArgs;
  /** Effective date */
  effectiveDate: number | bigint;
  /** Expiration date */
  expirationDate: OptionOrNullable<number | bigint>;
  /** Policy metadata */
  metadata: PolicyMetadataArgs;
};

export function getAccessPolicyEncoder(): Encoder<AccessPolicyArgs> {
  return getStructEncoder([
    ['policyId', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ['name', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ['description', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ['policyType', getPolicyTypeEncoder()],
    ['rules', getArrayEncoder(getPolicyRuleEncoder())],
    ['scope', getPolicyScopeEncoder()],
    ['priority', getU8Encoder()],
    ['status', getPolicyStatusEncoder()],
    ['effectiveDate', getI64Encoder()],
    ['expirationDate', getOptionEncoder(getI64Encoder())],
    ['metadata', getPolicyMetadataEncoder()],
  ]);
}

export function getAccessPolicyDecoder(): Decoder<AccessPolicy> {
  return getStructDecoder([
    ['policyId', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['name', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['description', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['policyType', getPolicyTypeDecoder()],
    ['rules', getArrayDecoder(getPolicyRuleDecoder())],
    ['scope', getPolicyScopeDecoder()],
    ['priority', getU8Decoder()],
    ['status', getPolicyStatusDecoder()],
    ['effectiveDate', getI64Decoder()],
    ['expirationDate', getOptionDecoder(getI64Decoder())],
    ['metadata', getPolicyMetadataDecoder()],
  ]);
}

export function getAccessPolicyCodec(): Codec<AccessPolicyArgs, AccessPolicy> {
  return combineCodec(getAccessPolicyEncoder(), getAccessPolicyDecoder());
}
