/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  type Codec,
  type Decoder,
  type Encoder,
} from '@solana/kit';
import {
  getApprovalLevelDecoder,
  getApprovalLevelEncoder,
  getBackupFrequencyDecoder,
  getBackupFrequencyEncoder,
  getReportingFrequencyDecoder,
  getReportingFrequencyEncoder,
  type ApprovalLevel,
  type ApprovalLevelArgs,
  type BackupFrequency,
  type BackupFrequencyArgs,
  type ReportingFrequency,
  type ReportingFrequencyArgs,
} from '.';

/** Audit trail configuration */
export type AuditConfig = {
  /** Maximum entries before archival */
  maxEntries: number;
  /** Retention period in seconds */
  retentionPeriod: bigint;
  /** Auto-archival enabled */
  autoArchive: boolean;
  /** Compliance reporting frequency */
  reportingFrequency: ReportingFrequency;
  /** Required approval levels */
  approvalLevels: Array<ApprovalLevel>;
  /** Encryption requirements */
  encryptionRequired: boolean;
  /** Backup frequency */
  backupFrequency: BackupFrequency;
};

export type AuditConfigArgs = {
  /** Maximum entries before archival */
  maxEntries: number;
  /** Retention period in seconds */
  retentionPeriod: number | bigint;
  /** Auto-archival enabled */
  autoArchive: boolean;
  /** Compliance reporting frequency */
  reportingFrequency: ReportingFrequencyArgs;
  /** Required approval levels */
  approvalLevels: Array<ApprovalLevelArgs>;
  /** Encryption requirements */
  encryptionRequired: boolean;
  /** Backup frequency */
  backupFrequency: BackupFrequencyArgs;
};

export function getAuditConfigEncoder(): Encoder<AuditConfigArgs> {
  return getStructEncoder([
    ['maxEntries', getU32Encoder()],
    ['retentionPeriod', getI64Encoder()],
    ['autoArchive', getBooleanEncoder()],
    ['reportingFrequency', getReportingFrequencyEncoder()],
    ['approvalLevels', getArrayEncoder(getApprovalLevelEncoder())],
    ['encryptionRequired', getBooleanEncoder()],
    ['backupFrequency', getBackupFrequencyEncoder()],
  ]);
}

export function getAuditConfigDecoder(): Decoder<AuditConfig> {
  return getStructDecoder([
    ['maxEntries', getU32Decoder()],
    ['retentionPeriod', getI64Decoder()],
    ['autoArchive', getBooleanDecoder()],
    ['reportingFrequency', getReportingFrequencyDecoder()],
    ['approvalLevels', getArrayDecoder(getApprovalLevelDecoder())],
    ['encryptionRequired', getBooleanDecoder()],
    ['backupFrequency', getBackupFrequencyDecoder()],
  ]);
}

export function getAuditConfigCodec(): Codec<AuditConfigArgs, AuditConfig> {
  return combineCodec(getAuditConfigEncoder(), getAuditConfigDecoder());
}
