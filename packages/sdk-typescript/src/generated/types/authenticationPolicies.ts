import {
  combineCodec,
  type Codec,
  type Decoder,
  type Encoder
} from '@solana/codecs-core';
import {
  getArrayDecoder,
  getArrayEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getStructDecoder,
  getStructEncoder
} from '@solana/codecs-data-structures';
import {
  getOptionDecoder,
  getOptionEncoder,
  type Option,
  type OptionOrNullable
} from '@solana/options';
import {
  getAccountLockoutPoliciesDecoder,
  getAccountLockoutPoliciesEncoder,
  getAuthenticationMethodDecoder,
  getAuthenticationMethodEncoder,
  getAuthenticationStrengthDecoder,
  getAuthenticationStrengthEncoder,
  getBiometricPoliciesDecoder,
  getBiometricPoliciesEncoder,
  type AccountLockoutPolicies,
  type AccountLockoutPoliciesArgs,
  type AuthenticationMethod,
  type AuthenticationMethodArgs,
  type AuthenticationStrength,
  type AuthenticationStrengthArgs,
  type BiometricPolicies,
  type BiometricPoliciesArgs,
} from '.';
/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

/** Authentication policies */
export type AuthenticationPolicies = {
  /** Multi-factor authentication required */
  mfaRequired: boolean;
  /** Supported authentication methods */
  supportedMethods: Array<AuthenticationMethod>;
  /** Authentication strength requirements */
  strengthRequirements: AuthenticationStrength;
  /** Account lockout policies */
  lockoutPolicies: AccountLockoutPolicies;
  /** Biometric policies */
  biometricPolicies: Option<BiometricPolicies>;
};

export type AuthenticationPoliciesArgs = {
  /** Multi-factor authentication required */
  mfaRequired: boolean;
  /** Supported authentication methods */
  supportedMethods: Array<AuthenticationMethodArgs>;
  /** Authentication strength requirements */
  strengthRequirements: AuthenticationStrengthArgs;
  /** Account lockout policies */
  lockoutPolicies: AccountLockoutPoliciesArgs;
  /** Biometric policies */
  biometricPolicies: OptionOrNullable<BiometricPoliciesArgs>;
};

export function getAuthenticationPoliciesEncoder(): Encoder<AuthenticationPoliciesArgs> {
  return getStructEncoder([
    ['mfaRequired', getBooleanEncoder()],
    ['supportedMethods', getArrayEncoder(getAuthenticationMethodEncoder())],
    ['strengthRequirements', getAuthenticationStrengthEncoder()],
    ['lockoutPolicies', getAccountLockoutPoliciesEncoder()],
    ['biometricPolicies', getOptionEncoder(getBiometricPoliciesEncoder())],
  ]);
}

export function getAuthenticationPoliciesDecoder(): Decoder<AuthenticationPolicies> {
  return getStructDecoder([
    ['mfaRequired', getBooleanDecoder()],
    ['supportedMethods', getArrayDecoder(getAuthenticationMethodDecoder())],
    ['strengthRequirements', getAuthenticationStrengthDecoder()],
    ['lockoutPolicies', getAccountLockoutPoliciesDecoder()],
    ['biometricPolicies', getOptionDecoder(getBiometricPoliciesDecoder())],
  ]);
}

export function getAuthenticationPoliciesCodec(): Codec<
  AuthenticationPoliciesArgs,
  AuthenticationPolicies
> {
  return combineCodec(
    getAuthenticationPoliciesEncoder(),
    getAuthenticationPoliciesDecoder()
  );
}
