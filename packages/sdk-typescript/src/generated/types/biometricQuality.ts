/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getStructDecoder,
  getStructEncoder,
  getTupleDecoder,
  getTupleEncoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  getU32Decoder,
  getU32Encoder,
  type Codec,
  type Decoder,
  type Encoder,
} from '@solana/kit';

/** Biometric quality requirements */
export type BiometricQuality = {
  /** Minimum quality score */
  minimumQuality: number;
  /** Quality assessment method */
  assessmentMethod: string;
  /** Multiple samples required */
  multipleSamples: boolean;
  /** Quality thresholds */
  qualityThresholds: Array<readonly [string, number]>;
};

export type BiometricQualityArgs = BiometricQuality;

export function getBiometricQualityEncoder(): Encoder<BiometricQualityArgs> {
  return getStructEncoder([
    ['minimumQuality', getU8Encoder()],
    ['assessmentMethod', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ['multipleSamples', getBooleanEncoder()],
    [
      'qualityThresholds',
      getArrayEncoder(
        getTupleEncoder([
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
          getU8Encoder(),
        ])
      ),
    ],
  ]);
}

export function getBiometricQualityDecoder(): Decoder<BiometricQuality> {
  return getStructDecoder([
    ['minimumQuality', getU8Decoder()],
    ['assessmentMethod', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['multipleSamples', getBooleanDecoder()],
    [
      'qualityThresholds',
      getArrayDecoder(
        getTupleDecoder([
          addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder()),
          getU8Decoder(),
        ])
      ),
    ],
  ]);
}

export function getBiometricQualityCodec(): Codec<BiometricQualityArgs, BiometricQuality> {
  return combineCodec(getBiometricQualityEncoder(), getBiometricQualityDecoder());
}