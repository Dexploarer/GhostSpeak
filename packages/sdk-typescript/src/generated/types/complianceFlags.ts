/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  getBooleanDecoder,
  getBooleanEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  type Codec,
  type Decoder,
  type Encoder,
  type Option,
  type OptionOrNullable,
} from '@solana/kit';

/** Compliance flags for audit entries */
export type ComplianceFlags = {
  /** Requires regulatory reporting */
  requiresReporting: boolean;
  /** High-risk transaction */
  highRisk: boolean;
  /** Sensitive data involved */
  sensitiveData: boolean;
  /** Cross-border transaction */
  crossBorder: boolean;
  /** Large amount transaction */
  largeAmount: boolean;
  /** Suspicious activity detected */
  suspicious: boolean;
  /** Manual review required */
  manualReview: boolean;
  /** Regulatory jurisdiction */
  jurisdiction: Option<string>;
};

export type ComplianceFlagsArgs = {
  /** Requires regulatory reporting */
  requiresReporting: boolean;
  /** High-risk transaction */
  highRisk: boolean;
  /** Sensitive data involved */
  sensitiveData: boolean;
  /** Cross-border transaction */
  crossBorder: boolean;
  /** Large amount transaction */
  largeAmount: boolean;
  /** Suspicious activity detected */
  suspicious: boolean;
  /** Manual review required */
  manualReview: boolean;
  /** Regulatory jurisdiction */
  jurisdiction: OptionOrNullable<string>;
};

export function getComplianceFlagsEncoder(): Encoder<ComplianceFlagsArgs> {
  return getStructEncoder([
    ['requiresReporting', getBooleanEncoder()],
    ['highRisk', getBooleanEncoder()],
    ['sensitiveData', getBooleanEncoder()],
    ['crossBorder', getBooleanEncoder()],
    ['largeAmount', getBooleanEncoder()],
    ['suspicious', getBooleanEncoder()],
    ['manualReview', getBooleanEncoder()],
    [
      'jurisdiction',
      getOptionEncoder(addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())),
    ],
  ]);
}

export function getComplianceFlagsDecoder(): Decoder<ComplianceFlags> {
  return getStructDecoder([
    ['requiresReporting', getBooleanDecoder()],
    ['highRisk', getBooleanDecoder()],
    ['sensitiveData', getBooleanDecoder()],
    ['crossBorder', getBooleanDecoder()],
    ['largeAmount', getBooleanDecoder()],
    ['suspicious', getBooleanDecoder()],
    ['manualReview', getBooleanDecoder()],
    [
      'jurisdiction',
      getOptionDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
  ]);
}

export function getComplianceFlagsCodec(): Codec<
  ComplianceFlagsArgs,
  ComplianceFlags
> {
  return combineCodec(getComplianceFlagsEncoder(), getComplianceFlagsDecoder());
}
