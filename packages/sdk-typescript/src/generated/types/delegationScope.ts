/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getDiscriminatedUnionDecoder,
  getDiscriminatedUnionEncoder,
  getStructDecoder,
  getStructEncoder,
  getTupleDecoder,
  getTupleEncoder,
  getUnitDecoder,
  getUnitEncoder,
  type Codec,
  type Decoder,
  type Encoder,
  type GetDiscriminatedUnionVariant,
  type GetDiscriminatedUnionVariantContent,
} from '@solana/kit';
import {
  getProposalTypeDecoder,
  getProposalTypeEncoder,
  type ProposalType,
  type ProposalTypeArgs,
} from '.';

/** Scope of vote delegation */
export type DelegationScope =
  | { __kind: 'All' }
  | { __kind: 'ProposalType'; fields: readonly [ProposalType] }
  | { __kind: 'SingleProposal' }
  | { __kind: 'Limited' };

export type DelegationScopeArgs =
  | { __kind: 'All' }
  | { __kind: 'ProposalType'; fields: readonly [ProposalTypeArgs] }
  | { __kind: 'SingleProposal' }
  | { __kind: 'Limited' };

export function getDelegationScopeEncoder(): Encoder<DelegationScopeArgs> {
  return getDiscriminatedUnionEncoder([
    ['All', getUnitEncoder()],
    [
      'ProposalType',
      getStructEncoder([
        ['fields', getTupleEncoder([getProposalTypeEncoder()])],
      ]),
    ],
    ['SingleProposal', getUnitEncoder()],
    ['Limited', getUnitEncoder()],
  ]);
}

export function getDelegationScopeDecoder(): Decoder<DelegationScope> {
  return getDiscriminatedUnionDecoder([
    ['All', getUnitDecoder()],
    [
      'ProposalType',
      getStructDecoder([
        ['fields', getTupleDecoder([getProposalTypeDecoder()])],
      ]),
    ],
    ['SingleProposal', getUnitDecoder()],
    ['Limited', getUnitDecoder()],
  ]);
}

export function getDelegationScopeCodec(): Codec<
  DelegationScopeArgs,
  DelegationScope
> {
  return combineCodec(getDelegationScopeEncoder(), getDelegationScopeDecoder());
}

// Data Enum Helpers.
export function delegationScope(
  kind: 'All'
): GetDiscriminatedUnionVariant<DelegationScopeArgs, '__kind', 'All'>;
export function delegationScope(
  kind: 'ProposalType',
  data: GetDiscriminatedUnionVariantContent<
    DelegationScopeArgs,
    '__kind',
    'ProposalType'
  >['fields']
): GetDiscriminatedUnionVariant<DelegationScopeArgs, '__kind', 'ProposalType'>;
export function delegationScope(
  kind: 'SingleProposal'
): GetDiscriminatedUnionVariant<
  DelegationScopeArgs,
  '__kind',
  'SingleProposal'
>;
export function delegationScope(
  kind: 'Limited'
): GetDiscriminatedUnionVariant<DelegationScopeArgs, '__kind', 'Limited'>;
export function delegationScope<K extends DelegationScopeArgs['__kind'], Data>(
  kind: K,
  data?: Data
) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isDelegationScope<K extends DelegationScope['__kind']>(
  kind: K,
  value: DelegationScope
): value is DelegationScope & { __kind: K } {
  return value.__kind === kind;
}
