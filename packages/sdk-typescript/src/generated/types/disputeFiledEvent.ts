import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  type Codec,
  type Decoder,
  type Encoder
} from '@solana/codecs-core';
import {
  getUtf8Decoder,
  getUtf8Encoder
} from '@solana/codecs-strings';
import {
  getU32Decoder,
  getU32Encoder
} from '@solana/codecs-numbers';
import {
  getStructDecoder,
  getStructEncoder
} from '@solana/codecs-data-structures';
import {
  getAddressDecoder,
  getAddressEncoder,
  type Address
} from '@solana/addresses';
/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

export type DisputeFiledEvent = {
  dispute: Address;
  complainant: Address;
  respondent: Address;
  reason: string;
};

export type DisputeFiledEventArgs = DisputeFiledEvent;

export function getDisputeFiledEventEncoder(): Encoder<DisputeFiledEventArgs> {
  return getStructEncoder([
    ['dispute', getAddressEncoder()],
    ['complainant', getAddressEncoder()],
    ['respondent', getAddressEncoder()],
    ['reason', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
  ]);
}

export function getDisputeFiledEventDecoder(): Decoder<DisputeFiledEvent> {
  return getStructDecoder([
    ['dispute', getAddressDecoder()],
    ['complainant', getAddressDecoder()],
    ['respondent', getAddressDecoder()],
    ['reason', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getDisputeFiledEventCodec(): Codec<
  DisputeFiledEventArgs,
  DisputeFiledEvent
> {
  return combineCodec(
    getDisputeFiledEventEncoder(),
    getDisputeFiledEventDecoder()
  );
}
