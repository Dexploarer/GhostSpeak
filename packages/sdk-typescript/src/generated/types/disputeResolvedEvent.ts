import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  type Codec,
  type Decoder,
  type Encoder
} from '@solana/codecs-core';
import {
  getUtf8Decoder,
  getUtf8Encoder
} from '@solana/codecs-strings';
import {
  getI64Decoder,
  getI64Encoder,
  getU32Decoder,
  getU32Encoder
} from '@solana/codecs-numbers';
import {
  getBooleanDecoder,
  getBooleanEncoder,
  getStructDecoder,
  getStructEncoder
} from '@solana/codecs-data-structures';
import {
  getAddressDecoder,
  getAddressEncoder,
  type Address
} from '@solana/addresses';
/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

export type DisputeResolvedEvent = {
  dispute: Address;
  arbitrator: Address;
  awardToComplainant: boolean;
  resolution: string;
  timestamp: bigint;
};

export type DisputeResolvedEventArgs = {
  dispute: Address;
  arbitrator: Address;
  awardToComplainant: boolean;
  resolution: string;
  timestamp: number | bigint;
};

export function getDisputeResolvedEventEncoder(): Encoder<DisputeResolvedEventArgs> {
  return getStructEncoder([
    ['dispute', getAddressEncoder()],
    ['arbitrator', getAddressEncoder()],
    ['awardToComplainant', getBooleanEncoder()],
    ['resolution', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ['timestamp', getI64Encoder()],
  ]);
}

export function getDisputeResolvedEventDecoder(): Decoder<DisputeResolvedEvent> {
  return getStructDecoder([
    ['dispute', getAddressDecoder()],
    ['arbitrator', getAddressDecoder()],
    ['awardToComplainant', getBooleanDecoder()],
    ['resolution', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['timestamp', getI64Decoder()],
  ]);
}

export function getDisputeResolvedEventCodec(): Codec<
  DisputeResolvedEventArgs,
  DisputeResolvedEvent
> {
  return combineCodec(
    getDisputeResolvedEventEncoder(),
    getDisputeResolvedEventDecoder()
  );
}
