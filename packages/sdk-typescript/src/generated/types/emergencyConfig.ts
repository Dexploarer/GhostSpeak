import {
  combineCodec,
  type Codec,
  type Decoder,
  type Encoder
} from '@solana/codecs-core';
import {
  getI64Decoder,
  getI64Encoder,
  getU8Decoder,
  getU8Encoder
} from '@solana/codecs-numbers';
import {
  getArrayDecoder,
  getArrayEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getStructDecoder,
  getStructEncoder
} from '@solana/codecs-data-structures';
import {
  getOptionDecoder,
  getOptionEncoder,
  type Option,
  type OptionOrNullable
} from '@solana/options';
import {
  getAddressDecoder,
  getAddressEncoder,
  type Address
} from '@solana/addresses';
import {
  getTransactionTypeDecoder,
  getTransactionTypeEncoder,
  type TransactionType,
  type TransactionTypeArgs,
} from '.';
/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

/** Emergency configuration for multisig */
export type EmergencyConfig = {
  /** Emergency contacts */
  emergencyContacts: Array<Address>;
  /** Emergency threshold override */
  emergencyThreshold: number;
  /** Emergency timeout (shorter than normal) */
  emergencyTimeout: bigint;
  /** Allowed emergency transaction types */
  emergencyTransactionTypes: Array<TransactionType>;
  /** Emergency freeze enabled */
  freezeEnabled: boolean;
  /** Current freeze status */
  frozen: boolean;
  /** Freeze timestamp */
  frozenAt: Option<bigint>;
  /** Auto-unfreeze after duration */
  autoUnfreezeDuration: Option<bigint>;
};

export type EmergencyConfigArgs = {
  /** Emergency contacts */
  emergencyContacts: Array<Address>;
  /** Emergency threshold override */
  emergencyThreshold: number;
  /** Emergency timeout (shorter than normal) */
  emergencyTimeout: number | bigint;
  /** Allowed emergency transaction types */
  emergencyTransactionTypes: Array<TransactionTypeArgs>;
  /** Emergency freeze enabled */
  freezeEnabled: boolean;
  /** Current freeze status */
  frozen: boolean;
  /** Freeze timestamp */
  frozenAt: OptionOrNullable<number | bigint>;
  /** Auto-unfreeze after duration */
  autoUnfreezeDuration: OptionOrNullable<number | bigint>;
};

export function getEmergencyConfigEncoder(): Encoder<EmergencyConfigArgs> {
  return getStructEncoder([
    ['emergencyContacts', getArrayEncoder(getAddressEncoder())],
    ['emergencyThreshold', getU8Encoder()],
    ['emergencyTimeout', getI64Encoder()],
    ['emergencyTransactionTypes', getArrayEncoder(getTransactionTypeEncoder())],
    ['freezeEnabled', getBooleanEncoder()],
    ['frozen', getBooleanEncoder()],
    ['frozenAt', getOptionEncoder(getI64Encoder())],
    ['autoUnfreezeDuration', getOptionEncoder(getI64Encoder())],
  ]);
}

export function getEmergencyConfigDecoder(): Decoder<EmergencyConfig> {
  return getStructDecoder([
    ['emergencyContacts', getArrayDecoder(getAddressDecoder())],
    ['emergencyThreshold', getU8Decoder()],
    ['emergencyTimeout', getI64Decoder()],
    ['emergencyTransactionTypes', getArrayDecoder(getTransactionTypeDecoder())],
    ['freezeEnabled', getBooleanDecoder()],
    ['frozen', getBooleanDecoder()],
    ['frozenAt', getOptionDecoder(getI64Decoder())],
    ['autoUnfreezeDuration', getOptionDecoder(getI64Decoder())],
  ]);
}

export function getEmergencyConfigCodec(): Codec<
  EmergencyConfigArgs,
  EmergencyConfig
> {
  return combineCodec(getEmergencyConfigEncoder(), getEmergencyConfigDecoder());
}
