/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getI64Decoder,
  getI64Encoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Option,
  type OptionOrNullable,
} from '@solana/kit';
import {
  getMessageMetadataDecoder,
  getMessageMetadataEncoder,
  getMessageTypeDecoder,
  getMessageTypeEncoder,
  type MessageMetadata,
  type MessageMetadataArgs,
  type MessageType,
  type MessageTypeArgs,
} from '.';

export type EnhancedMessageSentEvent = {
  message: Address;
  channel: Address;
  sender: Address;
  messageType: MessageType;
  metadata: MessageMetadata;
  contentPreview: string;
  timestamp: bigint;
  mentions: Array<Address>;
  threadId: Option<string>;
};

export type EnhancedMessageSentEventArgs = {
  message: Address;
  channel: Address;
  sender: Address;
  messageType: MessageTypeArgs;
  metadata: MessageMetadataArgs;
  contentPreview: string;
  timestamp: number | bigint;
  mentions: Array<Address>;
  threadId: OptionOrNullable<string>;
};

export function getEnhancedMessageSentEventEncoder(): Encoder<EnhancedMessageSentEventArgs> {
  return getStructEncoder([
    ['message', getAddressEncoder()],
    ['channel', getAddressEncoder()],
    ['sender', getAddressEncoder()],
    ['messageType', getMessageTypeEncoder()],
    ['metadata', getMessageMetadataEncoder()],
    ['contentPreview', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ['timestamp', getI64Encoder()],
    ['mentions', getArrayEncoder(getAddressEncoder())],
    [
      'threadId',
      getOptionEncoder(addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())),
    ],
  ]);
}

export function getEnhancedMessageSentEventDecoder(): Decoder<EnhancedMessageSentEvent> {
  return getStructDecoder([
    ['message', getAddressDecoder()],
    ['channel', getAddressDecoder()],
    ['sender', getAddressDecoder()],
    ['messageType', getMessageTypeDecoder()],
    ['metadata', getMessageMetadataDecoder()],
    ['contentPreview', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['timestamp', getI64Decoder()],
    ['mentions', getArrayDecoder(getAddressDecoder())],
    [
      'threadId',
      getOptionDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
  ]);
}

export function getEnhancedMessageSentEventCodec(): Codec<
  EnhancedMessageSentEventArgs,
  EnhancedMessageSentEvent
> {
  return combineCodec(
    getEnhancedMessageSentEventEncoder(),
    getEnhancedMessageSentEventDecoder()
  );
}
