/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  type Codec,
  type Decoder,
  type Encoder,
} from '@solana/kit';
import {
  getExtensionTypeDecoder,
  getExtensionTypeEncoder,
  type ExtensionType,
  type ExtensionTypeArgs,
} from '.';

export type ExtensionMetadata = {
  name: string;
  description: string;
  version: string;
  author: string;
  repository: string;
  license: string;
  dependencies: Array<string>;
  extensionType: ExtensionType;
};

export type ExtensionMetadataArgs = {
  name: string;
  description: string;
  version: string;
  author: string;
  repository: string;
  license: string;
  dependencies: Array<string>;
  extensionType: ExtensionTypeArgs;
};

export function getExtensionMetadataEncoder(): Encoder<ExtensionMetadataArgs> {
  return getStructEncoder([
    ['name', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ['description', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ['version', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ['author', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ['repository', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ['license', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    [
      'dependencies',
      getArrayEncoder(addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())),
    ],
    ['extensionType', getExtensionTypeEncoder()],
  ]);
}

export function getExtensionMetadataDecoder(): Decoder<ExtensionMetadata> {
  return getStructDecoder([
    ['name', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['description', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['version', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['author', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['repository', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['license', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    [
      'dependencies',
      getArrayDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
    ['extensionType', getExtensionTypeDecoder()],
  ]);
}

export function getExtensionMetadataCodec(): Codec<
  ExtensionMetadataArgs,
  ExtensionMetadata
> {
  return combineCodec(
    getExtensionMetadataEncoder(),
    getExtensionMetadataDecoder()
  );
}
