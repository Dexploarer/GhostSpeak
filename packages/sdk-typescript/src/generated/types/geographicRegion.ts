/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  type Codec,
  type Decoder,
  type Encoder,
  type Option,
  type OptionOrNullable,
} from '@solana/kit';
import {
  getLatitudeRangeDecoder,
  getLatitudeRangeEncoder,
  getLongitudeRangeDecoder,
  getLongitudeRangeEncoder,
  type LatitudeRange,
  type LatitudeRangeArgs,
  type LongitudeRange,
  type LongitudeRangeArgs,
} from '.';

/** Geographic region definition */
export interface GeographicRegion {
  /** Region name */
  name: string;
  /** Latitude boundaries */
  latitudeRange: LatitudeRange;
  /** Longitude boundaries */
  longitudeRange: LongitudeRange;
  /** Radius for circular regions (meters) */
  radius: Option<number>;
}

export interface GeographicRegionArgs {
  /** Region name */
  name: string;
  /** Latitude boundaries */
  latitudeRange: LatitudeRangeArgs;
  /** Longitude boundaries */
  longitudeRange: LongitudeRangeArgs;
  /** Radius for circular regions (meters) */
  radius: OptionOrNullable<number>;
}

export function getGeographicRegionEncoder(): Encoder<GeographicRegionArgs> {
  return getStructEncoder([
    ['name', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ['latitudeRange', getLatitudeRangeEncoder()],
    ['longitudeRange', getLongitudeRangeEncoder()],
    ['radius', getOptionEncoder(getU32Encoder())],
  ]);
}

export function getGeographicRegionDecoder(): Decoder<GeographicRegion> {
  return getStructDecoder([
    ['name', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['latitudeRange', getLatitudeRangeDecoder()],
    ['longitudeRange', getLongitudeRangeDecoder()],
    ['radius', getOptionDecoder(getU32Decoder())],
  ]);
}

export function getGeographicRegionCodec(): Codec<
  GeographicRegionArgs,
  GeographicRegion
> {
  return combineCodec(
    getGeographicRegionEncoder(),
    getGeographicRegionDecoder()
  );
}
