/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  type Codec,
  type Decoder,
  type Encoder,
} from '@solana/kit';
import {
  getGeographicRegionDecoder,
  getGeographicRegionEncoder,
  type GeographicRegion,
  type GeographicRegionArgs,
} from '.';

/** Location-based access constraints */
export type LocationConstraints = {
  /** Allowed countries (ISO codes) */
  allowedCountries: Array<string>;
  /** Blocked countries (ISO codes) */
  blockedCountries: Array<string>;
  /** Allowed IP address ranges (CIDR) */
  allowedIpRanges: Array<string>;
  /** Blocked IP address ranges (CIDR) */
  blockedIpRanges: Array<string>;
  /** Geofencing enabled */
  geofencingEnabled: boolean;
  /** Allowed geographic regions */
  allowedRegions: Array<GeographicRegion>;
};

export type LocationConstraintsArgs = {
  /** Allowed countries (ISO codes) */
  allowedCountries: Array<string>;
  /** Blocked countries (ISO codes) */
  blockedCountries: Array<string>;
  /** Allowed IP address ranges (CIDR) */
  allowedIpRanges: Array<string>;
  /** Blocked IP address ranges (CIDR) */
  blockedIpRanges: Array<string>;
  /** Geofencing enabled */
  geofencingEnabled: boolean;
  /** Allowed geographic regions */
  allowedRegions: Array<GeographicRegionArgs>;
};

export function getLocationConstraintsEncoder(): Encoder<LocationConstraintsArgs> {
  return getStructEncoder([
    [
      'allowedCountries',
      getArrayEncoder(addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())),
    ],
    [
      'blockedCountries',
      getArrayEncoder(addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())),
    ],
    [
      'allowedIpRanges',
      getArrayEncoder(addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())),
    ],
    [
      'blockedIpRanges',
      getArrayEncoder(addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())),
    ],
    ['geofencingEnabled', getBooleanEncoder()],
    ['allowedRegions', getArrayEncoder(getGeographicRegionEncoder())],
  ]);
}

export function getLocationConstraintsDecoder(): Decoder<LocationConstraints> {
  return getStructDecoder([
    [
      'allowedCountries',
      getArrayDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
    [
      'blockedCountries',
      getArrayDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
    [
      'allowedIpRanges',
      getArrayDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
    [
      'blockedIpRanges',
      getArrayDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
    ['geofencingEnabled', getBooleanDecoder()],
    ['allowedRegions', getArrayDecoder(getGeographicRegionDecoder())],
  ]);
}

export function getLocationConstraintsCodec(): Codec<
  LocationConstraintsArgs,
  LocationConstraints
> {
  return combineCodec(
    getLocationConstraintsEncoder(),
    getLocationConstraintsDecoder()
  );
}
