/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  getArrayDecoder,
  getArrayEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  type Codec,
  type Decoder,
  type Encoder,
} from '@solana/kit';
import {
  getTransactionTypeDecoder,
  getTransactionTypeEncoder,
  type TransactionType,
  type TransactionTypeArgs,
} from '.';

export type MultisigConfig = {
  /** Maximum number of signers */
  maxSigners: number;
  /** Default transaction timeout (seconds) */
  defaultTimeout: bigint;
  /** Allow threshold changes */
  allowThresholdChanges: boolean;
  /** Allow signer updates */
  allowSignerUpdates: boolean;
  /** Require sequential signing */
  requireSequentialSigning: boolean;
  /** Allow partial execution */
  allowPartialExecution: boolean;
  /** Transaction types allowed */
  allowedTransactionTypes: Array<TransactionType>;
  /** Cooldown period between transactions (seconds) */
  cooldownPeriod: bigint;
  /** Maximum pending transactions */
  maxPendingTransactions: number;
};

export type MultisigConfigArgs = {
  /** Maximum number of signers */
  maxSigners: number;
  /** Default transaction timeout (seconds) */
  defaultTimeout: number | bigint;
  /** Allow threshold changes */
  allowThresholdChanges: boolean;
  /** Allow signer updates */
  allowSignerUpdates: boolean;
  /** Require sequential signing */
  requireSequentialSigning: boolean;
  /** Allow partial execution */
  allowPartialExecution: boolean;
  /** Transaction types allowed */
  allowedTransactionTypes: Array<TransactionTypeArgs>;
  /** Cooldown period between transactions (seconds) */
  cooldownPeriod: number | bigint;
  /** Maximum pending transactions */
  maxPendingTransactions: number;
};

export function getMultisigConfigEncoder(): Encoder<MultisigConfigArgs> {
  return getStructEncoder([
    ['maxSigners', getU8Encoder()],
    ['defaultTimeout', getI64Encoder()],
    ['allowThresholdChanges', getBooleanEncoder()],
    ['allowSignerUpdates', getBooleanEncoder()],
    ['requireSequentialSigning', getBooleanEncoder()],
    ['allowPartialExecution', getBooleanEncoder()],
    ['allowedTransactionTypes', getArrayEncoder(getTransactionTypeEncoder())],
    ['cooldownPeriod', getI64Encoder()],
    ['maxPendingTransactions', getU8Encoder()],
  ]);
}

export function getMultisigConfigDecoder(): Decoder<MultisigConfig> {
  return getStructDecoder([
    ['maxSigners', getU8Decoder()],
    ['defaultTimeout', getI64Decoder()],
    ['allowThresholdChanges', getBooleanDecoder()],
    ['allowSignerUpdates', getBooleanDecoder()],
    ['requireSequentialSigning', getBooleanDecoder()],
    ['allowPartialExecution', getBooleanDecoder()],
    ['allowedTransactionTypes', getArrayDecoder(getTransactionTypeDecoder())],
    ['cooldownPeriod', getI64Decoder()],
    ['maxPendingTransactions', getU8Decoder()],
  ]);
}

export function getMultisigConfigCodec(): Codec<MultisigConfigArgs, MultisigConfig> {
  return combineCodec(getMultisigConfigEncoder(), getMultisigConfigDecoder());
}