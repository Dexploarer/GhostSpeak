/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  type Codec,
  type Decoder,
  type Encoder,
} from '@solana/kit';


// Define MultisigConfig interface
export interface MultisigConfig {
  requireSequentialSigning: boolean;
  allowOwnerOffCurve: boolean;
}

export type MultisigConfigArgs = MultisigConfig;

// Define encoder/decoder for MultisigConfig
import { getBooleanEncoder, getBooleanDecoder } from '@solana/kit';

export function getMultisigConfigEncoder(): Encoder<MultisigConfigArgs> {
  return getStructEncoder([
    ['requireSequentialSigning', getBooleanEncoder()],
    ['allowOwnerOffCurve', getBooleanEncoder()]
  ]);
}

export function getMultisigConfigDecoder(): Decoder<MultisigConfig> {
  return getStructDecoder([
    ['requireSequentialSigning', getBooleanDecoder()],
    ['allowOwnerOffCurve', getBooleanDecoder()]
  ]);
}

export type MultisigConfigExport = { data: MultisigConfig };

export type MultisigConfigExportArgs = { data: MultisigConfigArgs };

export function getMultisigConfigExportEncoder(): Encoder<MultisigConfigExportArgs> {
  return getStructEncoder([['data', getMultisigConfigEncoder()]]);
}

export function getMultisigConfigExportDecoder(): Decoder<MultisigConfigExport> {
  return getStructDecoder([['data', getMultisigConfigDecoder()]]);
}

export function getMultisigConfigExportCodec(): Codec<
  MultisigConfigExportArgs,
  MultisigConfigExport
> {
  return combineCodec(
    getMultisigConfigExportEncoder(),
    getMultisigConfigExportDecoder()
  );
}
