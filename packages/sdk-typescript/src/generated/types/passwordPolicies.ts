/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  type Codec,
  type Decoder,
  type Encoder,
} from '@solana/kit';

export type PasswordPolicies = {
  minimumLength: number;
  complexityRequirements: Array<string>;
  historyCount: number;
  maxAge: bigint;
};

export type PasswordPoliciesArgs = {
  minimumLength: number;
  complexityRequirements: Array<string>;
  historyCount: number;
  maxAge: number | bigint;
};

export function getPasswordPoliciesEncoder(): Encoder<PasswordPoliciesArgs> {
  return getStructEncoder([
    ['minimumLength', getU8Encoder()],
    [
      'complexityRequirements',
      getArrayEncoder(addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())),
    ],
    ['historyCount', getU8Encoder()],
    ['maxAge', getI64Encoder()],
  ]);
}

export function getPasswordPoliciesDecoder(): Decoder<PasswordPolicies> {
  return getStructDecoder([
    ['minimumLength', getU8Decoder()],
    [
      'complexityRequirements',
      getArrayDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
    ['historyCount', getU8Decoder()],
    ['maxAge', getI64Decoder()],
  ]);
}

export function getPasswordPoliciesCodec(): Codec<
  PasswordPoliciesArgs,
  PasswordPolicies
> {
  return combineCodec(
    getPasswordPoliciesEncoder(),
    getPasswordPoliciesDecoder()
  );
}
