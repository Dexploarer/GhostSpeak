/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Option,
  type OptionOrNullable,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getExecutionConditionDecoder,
  getExecutionConditionEncoder,
  getMultisigSignatureDecoder,
  getMultisigSignatureEncoder,
  getTimeLockDecoder,
  getTimeLockEncoder,
  getTransactionPriorityDecoder,
  getTransactionPriorityEncoder,
  getTransactionStatusDecoder,
  getTransactionStatusEncoder,
  getTransactionTypeDecoder,
  getTransactionTypeEncoder,
  type ExecutionCondition,
  type ExecutionConditionArgs,
  type MultisigSignature,
  type MultisigSignatureArgs,
  type TimeLock,
  type TimeLockArgs,
  type TransactionPriority,
  type TransactionPriorityArgs,
  type TransactionStatus,
  type TransactionStatusArgs,
  type TransactionType,
  type TransactionTypeArgs,
} from '.';

/** Pending transaction in multisig queue */
export type PendingTransaction = {
  /** Transaction ID */
  transactionId: bigint;
  /** Transaction type */
  transactionType: TransactionType;
  /** Target program/account */
  target: Address;
  /** Transaction data */
  data: ReadonlyUint8Array;
  /** Required signatures */
  requiredSignatures: number;
  /** Current signatures */
  signatures: Array<MultisigSignature>;
  /** Creation timestamp */
  createdAt: bigint;
  /** Expiration timestamp */
  expiresAt: bigint;
  /** Transaction priority */
  priority: TransactionPriority;
  /** Execution conditions */
  executionConditions: Array<ExecutionCondition>;
  /** Transaction status */
  status: TransactionStatus;
  /** Time lock (if applicable) */
  timeLock: Option<TimeLock>;
};

export type PendingTransactionArgs = {
  /** Transaction ID */
  transactionId: number | bigint;
  /** Transaction type */
  transactionType: TransactionTypeArgs;
  /** Target program/account */
  target: Address;
  /** Transaction data */
  data: ReadonlyUint8Array;
  /** Required signatures */
  requiredSignatures: number;
  /** Current signatures */
  signatures: Array<MultisigSignatureArgs>;
  /** Creation timestamp */
  createdAt: number | bigint;
  /** Expiration timestamp */
  expiresAt: number | bigint;
  /** Transaction priority */
  priority: TransactionPriorityArgs;
  /** Execution conditions */
  executionConditions: Array<ExecutionConditionArgs>;
  /** Transaction status */
  status: TransactionStatusArgs;
  /** Time lock (if applicable) */
  timeLock: OptionOrNullable<TimeLockArgs>;
};

export function getPendingTransactionEncoder(): Encoder<PendingTransactionArgs> {
  return getStructEncoder([
    ['transactionId', getU64Encoder()],
    ['transactionType', getTransactionTypeEncoder()],
    ['target', getAddressEncoder()],
    ['data', addEncoderSizePrefix(getBytesEncoder(), getU32Encoder())],
    ['requiredSignatures', getU8Encoder()],
    ['signatures', getArrayEncoder(getMultisigSignatureEncoder())],
    ['createdAt', getI64Encoder()],
    ['expiresAt', getI64Encoder()],
    ['priority', getTransactionPriorityEncoder()],
    ['executionConditions', getArrayEncoder(getExecutionConditionEncoder())],
    ['status', getTransactionStatusEncoder()],
    ['timeLock', getOptionEncoder(getTimeLockEncoder())],
  ]);
}

export function getPendingTransactionDecoder(): Decoder<PendingTransaction> {
  return getStructDecoder([
    ['transactionId', getU64Decoder()],
    ['transactionType', getTransactionTypeDecoder()],
    ['target', getAddressDecoder()],
    ['data', addDecoderSizePrefix(getBytesDecoder(), getU32Decoder())],
    ['requiredSignatures', getU8Decoder()],
    ['signatures', getArrayDecoder(getMultisigSignatureDecoder())],
    ['createdAt', getI64Decoder()],
    ['expiresAt', getI64Decoder()],
    ['priority', getTransactionPriorityDecoder()],
    ['executionConditions', getArrayDecoder(getExecutionConditionDecoder())],
    ['status', getTransactionStatusDecoder()],
    ['timeLock', getOptionDecoder(getTimeLockDecoder())],
  ]);
}

export function getPendingTransactionCodec(): Codec<
  PendingTransactionArgs,
  PendingTransaction
> {
  return combineCodec(
    getPendingTransactionEncoder(),
    getPendingTransactionDecoder()
  );
}
