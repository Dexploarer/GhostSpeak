import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  type Codec,
  type Decoder,
  type Encoder
} from '@solana/codecs-core';
import {
  getUtf8Decoder,
  getUtf8Encoder
} from '@solana/codecs-strings';
import {
  getU32Decoder,
  getU32Encoder
} from '@solana/codecs-numbers';
import {
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder
} from '@solana/codecs-data-structures';
import {
  getActionDecoder,
  getActionEncoder,
  getPermissionConstraintDecoder,
  getPermissionConstraintEncoder,
  getPermissionMetadataDecoder,
  getPermissionMetadataEncoder,
  getPermissionScopeDecoder,
  getPermissionScopeEncoder,
  type Action,
  type ActionArgs,
  type PermissionConstraint,
  type PermissionConstraintArgs,
  type PermissionMetadata,
  type PermissionMetadataArgs,
  type PermissionScope,
  type PermissionScopeArgs,
} from '.';
/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

/** Permission definition */
export type Permission = {
  /** Permission identifier */
  permissionId: string;
  /** Permission name */
  name: string;
  /** Permission description */
  description: string;
  /** Resource type this permission applies to */
  resourceType: string;
  /** Actions allowed by this permission */
  actions: Array<Action>;
  /** Permission scope */
  scope: PermissionScope;
  /** Permission constraints */
  constraints: Array<PermissionConstraint>;
  /** Permission metadata */
  metadata: PermissionMetadata;
};

export type PermissionArgs = {
  /** Permission identifier */
  permissionId: string;
  /** Permission name */
  name: string;
  /** Permission description */
  description: string;
  /** Resource type this permission applies to */
  resourceType: string;
  /** Actions allowed by this permission */
  actions: Array<ActionArgs>;
  /** Permission scope */
  scope: PermissionScopeArgs;
  /** Permission constraints */
  constraints: Array<PermissionConstraintArgs>;
  /** Permission metadata */
  metadata: PermissionMetadataArgs;
};

export function getPermissionEncoder(): Encoder<PermissionArgs> {
  return getStructEncoder([
    ['permissionId', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ['name', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ['description', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ['resourceType', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ['actions', getArrayEncoder(getActionEncoder())],
    ['scope', getPermissionScopeEncoder()],
    ['constraints', getArrayEncoder(getPermissionConstraintEncoder())],
    ['metadata', getPermissionMetadataEncoder()],
  ]);
}

export function getPermissionDecoder(): Decoder<Permission> {
  return getStructDecoder([
    ['permissionId', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['name', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['description', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['resourceType', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['actions', getArrayDecoder(getActionDecoder())],
    ['scope', getPermissionScopeDecoder()],
    ['constraints', getArrayDecoder(getPermissionConstraintDecoder())],
    ['metadata', getPermissionMetadataDecoder()],
  ]);
}

export function getPermissionCodec(): Codec<PermissionArgs, Permission> {
  return combineCodec(getPermissionEncoder(), getPermissionDecoder());
}
