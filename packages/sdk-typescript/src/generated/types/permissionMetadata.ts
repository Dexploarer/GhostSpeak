import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  type Codec,
  type Decoder,
  type Encoder
} from '@solana/codecs-core';
import {
  getUtf8Decoder,
  getUtf8Encoder
} from '@solana/codecs-strings';
import {
  getI64Decoder,
  getI64Encoder,
  getU32Decoder,
  getU32Encoder
} from '@solana/codecs-numbers';
import {
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder
} from '@solana/codecs-data-structures';
import {
  getOptionDecoder,
  getOptionEncoder,
  type Option,
  type OptionOrNullable
} from '@solana/options';
import {
  getAddressDecoder,
  getAddressEncoder,
  type Address
} from '@solana/addresses';
import {
  getRiskAssessmentDecoder,
  getRiskAssessmentEncoder,
  type RiskAssessment,
  type RiskAssessmentArgs,
} from '.';
/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

/** Permission metadata */
export type PermissionMetadata = {
  /** Business justification */
  businessJustification: string;
  /** Risk assessment */
  riskAssessment: RiskAssessment;
  /** Compliance mapping */
  complianceMapping: Array<string>;
  /** Related permissions */
  relatedPermissions: Array<string>;
  /** Permission owner */
  owner: Option<Address>;
  /** Last review */
  lastReview: Option<bigint>;
  /** Review frequency */
  reviewFrequency: bigint;
};

export type PermissionMetadataArgs = {
  /** Business justification */
  businessJustification: string;
  /** Risk assessment */
  riskAssessment: RiskAssessmentArgs;
  /** Compliance mapping */
  complianceMapping: Array<string>;
  /** Related permissions */
  relatedPermissions: Array<string>;
  /** Permission owner */
  owner: OptionOrNullable<Address>;
  /** Last review */
  lastReview: OptionOrNullable<number | bigint>;
  /** Review frequency */
  reviewFrequency: number | bigint;
};

export function getPermissionMetadataEncoder(): Encoder<PermissionMetadataArgs> {
  return getStructEncoder([
    [
      'businessJustification',
      addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
    ],
    ['riskAssessment', getRiskAssessmentEncoder()],
    [
      'complianceMapping',
      getArrayEncoder(addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())),
    ],
    [
      'relatedPermissions',
      getArrayEncoder(addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())),
    ],
    ['owner', getOptionEncoder(getAddressEncoder())],
    ['lastReview', getOptionEncoder(getI64Encoder())],
    ['reviewFrequency', getI64Encoder()],
  ]);
}

export function getPermissionMetadataDecoder(): Decoder<PermissionMetadata> {
  return getStructDecoder([
    [
      'businessJustification',
      addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder()),
    ],
    ['riskAssessment', getRiskAssessmentDecoder()],
    [
      'complianceMapping',
      getArrayDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
    [
      'relatedPermissions',
      getArrayDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
    ['owner', getOptionDecoder(getAddressDecoder())],
    ['lastReview', getOptionDecoder(getI64Decoder())],
    ['reviewFrequency', getI64Decoder()],
  ]);
}

export function getPermissionMetadataCodec(): Codec<
  PermissionMetadataArgs,
  PermissionMetadata
> {
  return combineCodec(
    getPermissionMetadataEncoder(),
    getPermissionMetadataDecoder()
  );
}
