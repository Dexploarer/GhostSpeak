/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getI64Decoder,
  getI64Encoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Option,
  type OptionOrNullable,
} from '@solana/kit';
import {
  getReviewScheduleDecoder,
  getReviewScheduleEncoder,
  type ReviewSchedule,
  type ReviewScheduleArgs,
} from '.';

/** Policy metadata */
export type PolicyMetadata = {
  /** Policy author */
  author: Option<Address>;
  /** Policy approver */
  approver: Option<Address>;
  /** Approval date */
  approvalDate: Option<bigint>;
  /** Business justification */
  businessJustification: string;
  /** Compliance references */
  complianceReferences: Array<string>;
  /** Risk assessment */
  riskAssessment: Option<string>;
  /** Review schedule */
  reviewSchedule: ReviewSchedule;
};

export type PolicyMetadataArgs = {
  /** Policy author */
  author: OptionOrNullable<Address>;
  /** Policy approver */
  approver: OptionOrNullable<Address>;
  /** Approval date */
  approvalDate: OptionOrNullable<number | bigint>;
  /** Business justification */
  businessJustification: string;
  /** Compliance references */
  complianceReferences: Array<string>;
  /** Risk assessment */
  riskAssessment: OptionOrNullable<string>;
  /** Review schedule */
  reviewSchedule: ReviewScheduleArgs;
};

export function getPolicyMetadataEncoder(): Encoder<PolicyMetadataArgs> {
  return getStructEncoder([
    ['author', getOptionEncoder(getAddressEncoder())],
    ['approver', getOptionEncoder(getAddressEncoder())],
    ['approvalDate', getOptionEncoder(getI64Encoder())],
    [
      'businessJustification',
      addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
    ],
    [
      'complianceReferences',
      getArrayEncoder(addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())),
    ],
    [
      'riskAssessment',
      getOptionEncoder(addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())),
    ],
    ['reviewSchedule', getReviewScheduleEncoder()],
  ]);
}

export function getPolicyMetadataDecoder(): Decoder<PolicyMetadata> {
  return getStructDecoder([
    ['author', getOptionDecoder(getAddressDecoder())],
    ['approver', getOptionDecoder(getAddressDecoder())],
    ['approvalDate', getOptionDecoder(getI64Decoder())],
    [
      'businessJustification',
      addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder()),
    ],
    [
      'complianceReferences',
      getArrayDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
    [
      'riskAssessment',
      getOptionDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
    ['reviewSchedule', getReviewScheduleDecoder()],
  ]);
}

export function getPolicyMetadataCodec(): Codec<
  PolicyMetadataArgs,
  PolicyMetadata
> {
  return combineCodec(getPolicyMetadataEncoder(), getPolicyMetadataDecoder());
}
