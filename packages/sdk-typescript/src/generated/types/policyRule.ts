/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  type Codec,
  type Decoder,
  type Encoder,
} from '@solana/kit';
import {
  getRuleConditionDecoder,
  getRuleConditionEncoder,
  getRuleEffectDecoder,
  getRuleEffectEncoder,
  type RuleCondition,
  type RuleConditionArgs,
  type RuleEffect,
  type RuleEffectArgs,
} from '.';

/** Policy rule definition */
export type PolicyRule = {
  /** Rule identifier */
  ruleId: string;
  /** Rule conditions */
  conditions: Array<RuleCondition>;
  /** Rule effect */
  effect: RuleEffect;
  /** Rule priority */
  priority: number;
  /** Rule enabled */
  enabled: boolean;
};

export type PolicyRuleArgs = {
  /** Rule identifier */
  ruleId: string;
  /** Rule conditions */
  conditions: Array<RuleConditionArgs>;
  /** Rule effect */
  effect: RuleEffectArgs;
  /** Rule priority */
  priority: number;
  /** Rule enabled */
  enabled: boolean;
};

export function getPolicyRuleEncoder(): Encoder<PolicyRuleArgs> {
  return getStructEncoder([
    ['ruleId', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ['conditions', getArrayEncoder(getRuleConditionEncoder())],
    ['effect', getRuleEffectEncoder()],
    ['priority', getU8Encoder()],
    ['enabled', getBooleanEncoder()],
  ]);
}

export function getPolicyRuleDecoder(): Decoder<PolicyRule> {
  return getStructDecoder([
    ['ruleId', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['conditions', getArrayDecoder(getRuleConditionDecoder())],
    ['effect', getRuleEffectDecoder()],
    ['priority', getU8Decoder()],
    ['enabled', getBooleanDecoder()],
  ]);
}

export function getPolicyRuleCodec(): Codec<PolicyRuleArgs, PolicyRule> {
  return combineCodec(getPolicyRuleEncoder(), getPolicyRuleDecoder());
}
