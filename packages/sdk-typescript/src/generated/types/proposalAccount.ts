/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
} from '@solana/kit';

/** Account specification for proposal instruction */
export type ProposalAccount = {
  /** Account public key */
  pubkey: Address;
  /** Is signer required */
  isSigner: boolean;
  /** Is writable */
  isWritable: boolean;
  /** Account description */
  description: string;
};

export type ProposalAccountArgs = ProposalAccount;

export function getProposalAccountEncoder(): Encoder<ProposalAccountArgs> {
  return getStructEncoder([
    ['pubkey', getAddressEncoder()],
    ['isSigner', getBooleanEncoder()],
    ['isWritable', getBooleanEncoder()],
    ['description', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
  ]);
}

export function getProposalAccountDecoder(): Decoder<ProposalAccount> {
  return getStructDecoder([
    ['pubkey', getAddressDecoder()],
    ['isSigner', getBooleanDecoder()],
    ['isWritable', getBooleanDecoder()],
    ['description', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getProposalAccountCodec(): Codec<
  ProposalAccountArgs,
  ProposalAccount
> {
  return combineCodec(getProposalAccountEncoder(), getProposalAccountDecoder());
}
