/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getProposalAccountDecoder,
  getProposalAccountEncoder,
  type ProposalAccount,
  type ProposalAccountArgs,
} from '.';

/** Individual instruction in proposal */
export type ProposalInstruction = {
  /** Target program */
  programId: Address;
  /** Accounts required */
  accounts: Array<ProposalAccount>;
  /** Instruction data */
  data: ReadonlyUint8Array;
  /** Instruction description */
  description: string;
};

export type ProposalInstructionArgs = {
  /** Target program */
  programId: Address;
  /** Accounts required */
  accounts: Array<ProposalAccountArgs>;
  /** Instruction data */
  data: ReadonlyUint8Array;
  /** Instruction description */
  description: string;
};

export function getProposalInstructionEncoder(): Encoder<ProposalInstructionArgs> {
  return getStructEncoder([
    ['programId', getAddressEncoder()],
    ['accounts', getArrayEncoder(getProposalAccountEncoder())],
    ['data', addEncoderSizePrefix(getBytesEncoder(), getU32Encoder())],
    ['description', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
  ]);
}

export function getProposalInstructionDecoder(): Decoder<ProposalInstruction> {
  return getStructDecoder([
    ['programId', getAddressDecoder()],
    ['accounts', getArrayDecoder(getProposalAccountDecoder())],
    ['data', addDecoderSizePrefix(getBytesDecoder(), getU32Decoder())],
    ['description', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getProposalInstructionCodec(): Codec<
  ProposalInstructionArgs,
  ProposalInstruction
> {
  return combineCodec(
    getProposalInstructionEncoder(),
    getProposalInstructionDecoder()
  );
}
