import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  type Codec,
  type Decoder,
  type Encoder
} from '@solana/codecs-core';
import {
  getUtf8Decoder,
  getUtf8Encoder
} from '@solana/codecs-strings';
import {
  getU32Decoder,
  getU32Encoder
} from '@solana/codecs-numbers';
import {
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder
} from '@solana/codecs-data-structures';
import {
  getOptionDecoder,
  getOptionEncoder,
  type Option,
  type OptionOrNullable
} from '@solana/options';
/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

/** Proposal metadata */
export type ProposalMetadata = {
  /** IPFS hash for detailed proposal */
  ipfsHash: Option<string>;
  /** External references */
  externalReferences: Array<string>;
  /** Proposal tags */
  tags: Array<string>;
  /** Risk assessment */
  riskAssessment: Option<string>;
  /** Impact analysis */
  impactAnalysis: Option<string>;
  /** Implementation timeline */
  implementationTimeline: Option<string>;
};

export type ProposalMetadataArgs = {
  /** IPFS hash for detailed proposal */
  ipfsHash: OptionOrNullable<string>;
  /** External references */
  externalReferences: Array<string>;
  /** Proposal tags */
  tags: Array<string>;
  /** Risk assessment */
  riskAssessment: OptionOrNullable<string>;
  /** Impact analysis */
  impactAnalysis: OptionOrNullable<string>;
  /** Implementation timeline */
  implementationTimeline: OptionOrNullable<string>;
};

export function getProposalMetadataEncoder(): Encoder<ProposalMetadataArgs> {
  return getStructEncoder([
    [
      'ipfsHash',
      getOptionEncoder(addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())),
    ],
    [
      'externalReferences',
      getArrayEncoder(addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())),
    ],
    [
      'tags',
      getArrayEncoder(addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())),
    ],
    [
      'riskAssessment',
      getOptionEncoder(addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())),
    ],
    [
      'impactAnalysis',
      getOptionEncoder(addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())),
    ],
    [
      'implementationTimeline',
      getOptionEncoder(addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())),
    ],
  ]);
}

export function getProposalMetadataDecoder(): Decoder<ProposalMetadata> {
  return getStructDecoder([
    [
      'ipfsHash',
      getOptionDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
    [
      'externalReferences',
      getArrayDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
    [
      'tags',
      getArrayDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
    [
      'riskAssessment',
      getOptionDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
    [
      'impactAnalysis',
      getOptionDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
    [
      'implementationTimeline',
      getOptionDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
  ]);
}

export function getProposalMetadataCodec(): Codec<
  ProposalMetadataArgs,
  ProposalMetadata
> {
  return combineCodec(
    getProposalMetadataEncoder(),
    getProposalMetadataDecoder()
  );
}
