/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getI64Decoder,
  getI64Encoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  getU32Decoder,
  getU32Encoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Option,
} from '@solana/kit';
import {
  getAddressDecoder,
  getAddressEncoder,
} from '@solana/kit';
// Simplified to avoid dependencies

/** Individual report entry */
export type ReportEntry = {
  /** Entry timestamp */
  timestamp: bigint;
  /** Transaction/event ID */
  eventId: string;
  /** Entry type */
  entryType: string;
  /** Amount (if financial) */
  amount: Option<bigint>;
  /** Parties involved */
  parties: Array<Address>;
  /** Risk score */
  riskScore: Option<number>;
  /** Compliance flags (bitmap) */
  complianceFlags: number;
  /** Additional metadata */
  metadata: Array<string>;
};

export type ReportEntryArgs = {
  /** Entry timestamp */
  timestamp: number | bigint;
  /** Transaction/event ID */
  eventId: string;
  /** Entry type */
  entryType: string;
  /** Amount (if financial) */
  amount: Option<number | bigint>;
  /** Parties involved */
  parties: Array<Address>;
  /** Risk score */
  riskScore: Option<number>;
  /** Compliance flags (bitmap) */
  complianceFlags: number;
  /** Additional metadata */
  metadata: Array<string>;
};

export function getReportEntryEncoder(): Encoder<ReportEntryArgs> {
  return getStructEncoder([
    ['timestamp', getI64Encoder()],
    ['eventId', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ['entryType', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ['amount', getOptionEncoder(getU64Encoder())],
    ['parties', getArrayEncoder(getAddressEncoder())],
    ['riskScore', getOptionEncoder(getU8Encoder())],
    ['complianceFlags', getU32Encoder()],
    ['metadata', getArrayEncoder(addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()))],
  ]);
}

export function getReportEntryDecoder(): Decoder<ReportEntry> {
  return getStructDecoder([
    ['timestamp', getI64Decoder()],
    ['eventId', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['entryType', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['amount', getOptionDecoder(getU64Decoder())],
    ['parties', getArrayDecoder(getAddressDecoder())],
    ['riskScore', getOptionDecoder(getU8Decoder())],
    ['complianceFlags', getU32Decoder()],
    ['metadata', getArrayDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder()))],
  ]);
}

export function getReportEntryCodec(): Codec<ReportEntryArgs, ReportEntry> {
  return combineCodec(getReportEntryEncoder(), getReportEntryDecoder());
}