/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
  getTupleDecoder,
  getTupleEncoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  getU32Decoder,
  getU32Encoder,
  type Codec,
  type Decoder,
  type Encoder,
} from '@solana/kit';
// Simplified to avoid dependencies

/** Resource-based access constraints */
export type ResourceConstraints = {
  /** Allowed resource types */
  allowedResourceTypes: Array<string>;
  /** Blocked resource types */
  blockedResourceTypes: Array<string>;
  /** Resource access limits */
  accessLimits: Array<readonly [string, bigint]>;
  /** Resource quotas (simplified) */
  quotas: Array<readonly [string, bigint]>;
  /** Compartmentalized access */
  compartments: Array<string>;
};

export type ResourceConstraintsArgs = {
  /** Allowed resource types */
  allowedResourceTypes: Array<string>;
  /** Blocked resource types */
  blockedResourceTypes: Array<string>;
  /** Resource access limits */
  accessLimits: Array<readonly [string, number | bigint]>;
  /** Resource quotas (simplified) */
  quotas: Array<readonly [string, number | bigint]>;
  /** Compartmentalized access */
  compartments: Array<string>;
};

export function getResourceConstraintsEncoder(): Encoder<ResourceConstraintsArgs> {
  return getStructEncoder([
    [
      'allowedResourceTypes',
      getArrayEncoder(addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())),
    ],
    [
      'blockedResourceTypes',
      getArrayEncoder(addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())),
    ],
    [
      'accessLimits',
      getArrayEncoder(
        getTupleEncoder([
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
          getU64Encoder(),
        ])
      ),
    ],
    [
      'quotas',
      getArrayEncoder(
        getTupleEncoder([
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
          getU64Encoder(),
        ])
      ),
    ],
    [
      'compartments',
      getArrayEncoder(addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())),
    ],
  ]);
}

export function getResourceConstraintsDecoder(): Decoder<ResourceConstraints> {
  return getStructDecoder([
    [
      'allowedResourceTypes',
      getArrayDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
    [
      'blockedResourceTypes',
      getArrayDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
    [
      'accessLimits',
      getArrayDecoder(
        getTupleDecoder([
          addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder()),
          getU64Decoder(),
        ])
      ),
    ],
    [
      'quotas',
      getArrayDecoder(
        getTupleDecoder([
          addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder()),
          getU64Decoder(),
        ])
      ),
    ],
    [
      'compartments',
      getArrayDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
  ]);
}

export function getResourceConstraintsCodec(): Codec<ResourceConstraintsArgs, ResourceConstraints> {
  return combineCodec(getResourceConstraintsEncoder(), getResourceConstraintsDecoder());
}