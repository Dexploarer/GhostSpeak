/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  type Codec,
  type Decoder,
  type Encoder,
} from '@solana/kit';
import {
  getRiskAcceptanceDecoder,
  getRiskAcceptanceEncoder,
  getRiskFactorDecoder,
  getRiskFactorEncoder,
  type RiskAcceptance,
  type RiskAcceptanceArgs,
  type RiskFactor,
  type RiskFactorArgs,
} from '.';

/** Risk assessment for permissions */
export interface RiskAssessment {
  /** Overall risk score */
  riskScore: number;
  /** Risk factors */
  riskFactors: RiskFactor[];
  /** Mitigation measures */
  mitigationMeasures: string[];
  /** Risk acceptance */
  riskAcceptance: RiskAcceptance;
}

export interface RiskAssessmentArgs {
  /** Overall risk score */
  riskScore: number;
  /** Risk factors */
  riskFactors: RiskFactorArgs[];
  /** Mitigation measures */
  mitigationMeasures: string[];
  /** Risk acceptance */
  riskAcceptance: RiskAcceptanceArgs;
}

export function getRiskAssessmentEncoder(): Encoder<RiskAssessmentArgs> {
  return getStructEncoder([
    ['riskScore', getU8Encoder()],
    ['riskFactors', getArrayEncoder(getRiskFactorEncoder())],
    [
      'mitigationMeasures',
      getArrayEncoder(addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())),
    ],
    ['riskAcceptance', getRiskAcceptanceEncoder()],
  ]);
}

export function getRiskAssessmentDecoder(): Decoder<RiskAssessment> {
  return getStructDecoder([
    ['riskScore', getU8Decoder()],
    ['riskFactors', getArrayDecoder(getRiskFactorDecoder())],
    [
      'mitigationMeasures',
      getArrayDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
    ['riskAcceptance', getRiskAcceptanceDecoder()],
  ]);
}

export function getRiskAssessmentCodec(): Codec<
  RiskAssessmentArgs,
  RiskAssessment
> {
  return combineCodec(getRiskAssessmentEncoder(), getRiskAssessmentDecoder());
}
