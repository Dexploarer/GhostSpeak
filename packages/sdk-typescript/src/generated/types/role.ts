/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  type Codec,
  type Decoder,
  type Encoder,
} from '@solana/kit';
import {
  getRoleConstraintsDecoder,
  getRoleConstraintsEncoder,
  getRoleMetadataDecoder,
  getRoleMetadataEncoder,
  getRoleStatusDecoder,
  getRoleStatusEncoder,
  getRoleTypeDecoder,
  getRoleTypeEncoder,
  type RoleConstraints,
  type RoleConstraintsArgs,
  type RoleMetadata,
  type RoleMetadataArgs,
  type RoleStatus,
  type RoleStatusArgs,
  type RoleType,
  type RoleTypeArgs,
} from '.';

/** Role definition with permissions and constraints */
export interface Role {
  /** Role identifier */
  roleId: string;
  /** Role name */
  name: string;
  /** Role description */
  description: string;
  /** Role type */
  roleType: RoleType;
  /** Permission assignments */
  permissions: string[];
  /** Role constraints */
  constraints: RoleConstraints;
  /** Inheritance relationships */
  inheritsFrom: string[];
  /** Role metadata */
  metadata: RoleMetadata;
  /** Role status */
  status: RoleStatus;
  /** Creation timestamp */
  createdAt: bigint;
  /** Last modification timestamp */
  modifiedAt: bigint;
}

export interface RoleArgs {
  /** Role identifier */
  roleId: string;
  /** Role name */
  name: string;
  /** Role description */
  description: string;
  /** Role type */
  roleType: RoleTypeArgs;
  /** Permission assignments */
  permissions: string[];
  /** Role constraints */
  constraints: RoleConstraintsArgs;
  /** Inheritance relationships */
  inheritsFrom: string[];
  /** Role metadata */
  metadata: RoleMetadataArgs;
  /** Role status */
  status: RoleStatusArgs;
  /** Creation timestamp */
  createdAt: number | bigint;
  /** Last modification timestamp */
  modifiedAt: number | bigint;
}

export function getRoleEncoder(): Encoder<RoleArgs> {
  return getStructEncoder([
    ['roleId', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ['name', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ['description', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ['roleType', getRoleTypeEncoder()],
    [
      'permissions',
      getArrayEncoder(addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())),
    ],
    ['constraints', getRoleConstraintsEncoder()],
    [
      'inheritsFrom',
      getArrayEncoder(addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())),
    ],
    ['metadata', getRoleMetadataEncoder()],
    ['status', getRoleStatusEncoder()],
    ['createdAt', getI64Encoder()],
    ['modifiedAt', getI64Encoder()],
  ]);
}

export function getRoleDecoder(): Decoder<Role> {
  return getStructDecoder([
    ['roleId', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['name', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['description', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['roleType', getRoleTypeDecoder()],
    [
      'permissions',
      getArrayDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
    ['constraints', getRoleConstraintsDecoder()],
    [
      'inheritsFrom',
      getArrayDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
    ['metadata', getRoleMetadataDecoder()],
    ['status', getRoleStatusDecoder()],
    ['createdAt', getI64Decoder()],
    ['modifiedAt', getI64Decoder()],
  ]);
}

export function getRoleCodec(): Codec<RoleArgs, Role> {
  return combineCodec(getRoleEncoder(), getRoleDecoder());
}
