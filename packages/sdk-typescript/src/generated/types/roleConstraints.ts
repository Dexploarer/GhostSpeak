/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  type Codec,
  type Decoder,
  type Encoder,
  type Option,
  type OptionOrNullable,
} from '@solana/kit';
import {
  getActivationRequirementDecoder,
  getActivationRequirementEncoder,
  getLocationConstraintsDecoder,
  getLocationConstraintsEncoder,
  getResourceConstraintsDecoder,
  getResourceConstraintsEncoder,
  getSessionConstraintsDecoder,
  getSessionConstraintsEncoder,
  getSodConstraintDecoder,
  getSodConstraintEncoder,
  getTimeConstraintsDecoder,
  getTimeConstraintsEncoder,
  type ActivationRequirement,
  type ActivationRequirementArgs,
  type LocationConstraints,
  type LocationConstraintsArgs,
  type ResourceConstraints,
  type ResourceConstraintsArgs,
  type SessionConstraints,
  type SessionConstraintsArgs,
  type SodConstraint,
  type SodConstraintArgs,
  type TimeConstraints,
  type TimeConstraintsArgs,
} from '.';

/** Constraints applied to roles */
export type RoleConstraints = {
  /** Time-based constraints */
  timeConstraints: Option<TimeConstraints>;
  /** Location-based constraints */
  locationConstraints: Option<LocationConstraints>;
  /** Resource-based constraints */
  resourceConstraints: Option<ResourceConstraints>;
  /** Session-based constraints */
  sessionConstraints: Option<SessionConstraints>;
  /** Segregation of duties constraints */
  sodConstraints: Array<SodConstraint>;
  /** Maximum concurrent sessions */
  maxConcurrentSessions: Option<number>;
  /** Role activation requirements */
  activationRequirements: Array<ActivationRequirement>;
};

export type RoleConstraintsArgs = {
  /** Time-based constraints */
  timeConstraints: OptionOrNullable<TimeConstraintsArgs>;
  /** Location-based constraints */
  locationConstraints: OptionOrNullable<LocationConstraintsArgs>;
  /** Resource-based constraints */
  resourceConstraints: OptionOrNullable<ResourceConstraintsArgs>;
  /** Session-based constraints */
  sessionConstraints: OptionOrNullable<SessionConstraintsArgs>;
  /** Segregation of duties constraints */
  sodConstraints: Array<SodConstraintArgs>;
  /** Maximum concurrent sessions */
  maxConcurrentSessions: OptionOrNullable<number>;
  /** Role activation requirements */
  activationRequirements: Array<ActivationRequirementArgs>;
};

export function getRoleConstraintsEncoder(): Encoder<RoleConstraintsArgs> {
  return getStructEncoder([
    ['timeConstraints', getOptionEncoder(getTimeConstraintsEncoder())],
    ['locationConstraints', getOptionEncoder(getLocationConstraintsEncoder())],
    ['resourceConstraints', getOptionEncoder(getResourceConstraintsEncoder())],
    ['sessionConstraints', getOptionEncoder(getSessionConstraintsEncoder())],
    ['sodConstraints', getArrayEncoder(getSodConstraintEncoder())],
    ['maxConcurrentSessions', getOptionEncoder(getU32Encoder())],
    [
      'activationRequirements',
      getArrayEncoder(getActivationRequirementEncoder()),
    ],
  ]);
}

export function getRoleConstraintsDecoder(): Decoder<RoleConstraints> {
  return getStructDecoder([
    ['timeConstraints', getOptionDecoder(getTimeConstraintsDecoder())],
    ['locationConstraints', getOptionDecoder(getLocationConstraintsDecoder())],
    ['resourceConstraints', getOptionDecoder(getResourceConstraintsDecoder())],
    ['sessionConstraints', getOptionDecoder(getSessionConstraintsDecoder())],
    ['sodConstraints', getArrayDecoder(getSodConstraintDecoder())],
    ['maxConcurrentSessions', getOptionDecoder(getU32Decoder())],
    [
      'activationRequirements',
      getArrayDecoder(getActivationRequirementDecoder()),
    ],
  ]);
}

export function getRoleConstraintsCodec(): Codec<
  RoleConstraintsArgs,
  RoleConstraints
> {
  return combineCodec(getRoleConstraintsEncoder(), getRoleConstraintsDecoder());
}
