import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  type Codec,
  type Decoder,
  type Encoder
} from '@solana/codecs-core';
import {
  getUtf8Decoder,
  getUtf8Encoder
} from '@solana/codecs-strings';
import {
  getI64Decoder,
  getI64Encoder,
  getU32Decoder,
  getU32Encoder
} from '@solana/codecs-numbers';
import {
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder
} from '@solana/codecs-data-structures';
import {
  getOptionDecoder,
  getOptionEncoder,
  type Option,
  type OptionOrNullable
} from '@solana/options';
import {
  getAddressDecoder,
  getAddressEncoder,
  type Address
} from '@solana/addresses';
import {
  getDataAccessLevelDecoder,
  getDataAccessLevelEncoder,
  getRiskLevelDecoder,
  getRiskLevelEncoder,
  type DataAccessLevel,
  type DataAccessLevelArgs,
  type RiskLevel,
  type RiskLevelArgs,
} from '.';
/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

/** Role metadata for additional information */
export type RoleMetadata = {
  /** Business purpose */
  businessPurpose: string;
  /** Risk level */
  riskLevel: RiskLevel;
  /** Data access level */
  dataAccessLevel: DataAccessLevel;
  /** Compliance requirements */
  complianceRequirements: Array<string>;
  /** Role owner */
  roleOwner: Option<Address>;
  /** Role custodian */
  roleCustodian: Option<Address>;
  /** Review frequency */
  reviewFrequency: bigint;
  /** Last review timestamp */
  lastReview: Option<bigint>;
  /** Next review due */
  nextReview: Option<bigint>;
};

export type RoleMetadataArgs = {
  /** Business purpose */
  businessPurpose: string;
  /** Risk level */
  riskLevel: RiskLevelArgs;
  /** Data access level */
  dataAccessLevel: DataAccessLevelArgs;
  /** Compliance requirements */
  complianceRequirements: Array<string>;
  /** Role owner */
  roleOwner: OptionOrNullable<Address>;
  /** Role custodian */
  roleCustodian: OptionOrNullable<Address>;
  /** Review frequency */
  reviewFrequency: number | bigint;
  /** Last review timestamp */
  lastReview: OptionOrNullable<number | bigint>;
  /** Next review due */
  nextReview: OptionOrNullable<number | bigint>;
};

export function getRoleMetadataEncoder(): Encoder<RoleMetadataArgs> {
  return getStructEncoder([
    [
      'businessPurpose',
      addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
    ],
    ['riskLevel', getRiskLevelEncoder()],
    ['dataAccessLevel', getDataAccessLevelEncoder()],
    [
      'complianceRequirements',
      getArrayEncoder(addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())),
    ],
    ['roleOwner', getOptionEncoder(getAddressEncoder())],
    ['roleCustodian', getOptionEncoder(getAddressEncoder())],
    ['reviewFrequency', getI64Encoder()],
    ['lastReview', getOptionEncoder(getI64Encoder())],
    ['nextReview', getOptionEncoder(getI64Encoder())],
  ]);
}

export function getRoleMetadataDecoder(): Decoder<RoleMetadata> {
  return getStructDecoder([
    [
      'businessPurpose',
      addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder()),
    ],
    ['riskLevel', getRiskLevelDecoder()],
    ['dataAccessLevel', getDataAccessLevelDecoder()],
    [
      'complianceRequirements',
      getArrayDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
    ['roleOwner', getOptionDecoder(getAddressDecoder())],
    ['roleCustodian', getOptionDecoder(getAddressDecoder())],
    ['reviewFrequency', getI64Decoder()],
    ['lastReview', getOptionDecoder(getI64Decoder())],
    ['nextReview', getOptionDecoder(getI64Decoder())],
  ]);
}

export function getRoleMetadataCodec(): Codec<RoleMetadataArgs, RoleMetadata> {
  return combineCodec(getRoleMetadataEncoder(), getRoleMetadataDecoder());
}
