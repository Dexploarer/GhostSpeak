/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getUtf8Decoder,
  getUtf8Encoder,
  getStructDecoder,
  getStructEncoder,
  type Codec,
  type Decoder,
  type Encoder,
} from '@solana/kit';
import {
  getConditionTypeDecoder,
  getConditionTypeEncoder,
  getValueTypeDecoder,
  getValueTypeEncoder,
  type ConditionType,
  type ConditionTypeArgs,
  type ValueType,
  type ValueTypeArgs,
} from '.';

export type RuleCondition = {
  /** Condition type */
  conditionType: ConditionType;
  /** Field to evaluate */
  field: string;
  /** Operator (e.g., "equals", "greater_than") */
  operator: string;
  /** Expected value */
  value: string;
  /** Value type for parsing */
  valueType: ValueType;
};

export type RuleConditionArgs = {
  /** Condition type */
  conditionType: ConditionTypeArgs;
  /** Field to evaluate */
  field: string;
  /** Operator (e.g., "equals", "greater_than") */
  operator: string;
  /** Expected value */
  value: string;
  /** Value type for parsing */
  valueType: ValueTypeArgs;
};

export function getRuleConditionEncoder(): Encoder<RuleConditionArgs> {
  return getStructEncoder([
    ['conditionType', getConditionTypeEncoder()],
    ['field', getUtf8Encoder()],
    ['operator', getUtf8Encoder()],
    ['value', getUtf8Encoder()],
    ['valueType', getValueTypeEncoder()],
  ]);
}

export function getRuleConditionDecoder(): Decoder<RuleCondition> {
  return getStructDecoder([
    ['conditionType', getConditionTypeDecoder()],
    ['field', getUtf8Decoder()],
    ['operator', getUtf8Decoder()],
    ['value', getUtf8Decoder()],
    ['valueType', getValueTypeDecoder()],
  ]);
}

export function getRuleConditionCodec(): Codec<RuleConditionArgs, RuleCondition> {
  return combineCodec(getRuleConditionEncoder(), getRuleConditionDecoder());
}