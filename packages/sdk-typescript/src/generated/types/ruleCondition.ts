/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
  getTupleDecoder,
  getTupleEncoder,
  getUtf8Decoder,
  getUtf8Encoder,
  getU32Decoder,
  getU32Encoder,
  type Codec,
  type Decoder,
  type Encoder,
} from '@solana/kit';
// Simplified to avoid circular dependencies

/** Rule condition */
export type RuleCondition = {
  /** Condition type (enum index) */
  conditionType: number;
  /** Subject attributes */
  subjectAttributes: Array<readonly [string, string]>;
  /** Resource attributes */
  resourceAttributes: Array<readonly [string, string]>;
  /** Action attributes */
  actionAttributes: Array<readonly [string, string]>;
  /** Environment attributes */
  environmentAttributes: Array<readonly [string, string]>;
};

export type RuleConditionArgs = RuleCondition;

export function getRuleConditionEncoder(): Encoder<RuleConditionArgs> {
  return getStructEncoder([
    ['conditionType', getU32Encoder()],
    [
      'subjectAttributes',
      getArrayEncoder(
        getTupleEncoder([
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
        ])
      ),
    ],
    [
      'resourceAttributes',
      getArrayEncoder(
        getTupleEncoder([
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
        ])
      ),
    ],
    [
      'actionAttributes',
      getArrayEncoder(
        getTupleEncoder([
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
        ])
      ),
    ],
    [
      'environmentAttributes',
      getArrayEncoder(
        getTupleEncoder([
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
        ])
      ),
    ],
  ]);
}

export function getRuleConditionDecoder(): Decoder<RuleCondition> {
  return getStructDecoder([
    ['conditionType', getU32Decoder()],
    [
      'subjectAttributes',
      getArrayDecoder(
        getTupleDecoder([
          addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder()),
          addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder()),
        ])
      ),
    ],
    [
      'resourceAttributes',
      getArrayDecoder(
        getTupleDecoder([
          addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder()),
          addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder()),
        ])
      ),
    ],
    [
      'actionAttributes',
      getArrayDecoder(
        getTupleDecoder([
          addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder()),
          addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder()),
        ])
      ),
    ],
    [
      'environmentAttributes',
      getArrayDecoder(
        getTupleDecoder([
          addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder()),
          addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder()),
        ])
      ),
    ],
  ]);
}

export function getRuleConditionCodec(): Codec<RuleConditionArgs, RuleCondition> {
  return combineCodec(getRuleConditionEncoder(), getRuleConditionDecoder());
}