/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  type Codec,
  type Decoder,
  type Encoder,
} from '@solana/kit';
import {
  getAuthenticationPoliciesDecoder,
  getAuthenticationPoliciesEncoder,
  getAuthorizationPoliciesDecoder,
  getAuthorizationPoliciesEncoder,
  getCompliancePoliciesDecoder,
  getCompliancePoliciesEncoder,
  getDataProtectionPoliciesDecoder,
  getDataProtectionPoliciesEncoder,
  getIncidentResponsePoliciesDecoder,
  getIncidentResponsePoliciesEncoder,
  getNetworkSecurityPoliciesDecoder,
  getNetworkSecurityPoliciesEncoder,
  getPasswordPoliciesDecoder,
  getPasswordPoliciesEncoder,
  getSessionPoliciesDecoder,
  getSessionPoliciesEncoder,
  type AuthenticationPolicies,
  type AuthenticationPoliciesArgs,
  type AuthorizationPolicies,
  type AuthorizationPoliciesArgs,
  type CompliancePolicies,
  type CompliancePoliciesArgs,
  type DataProtectionPolicies,
  type DataProtectionPoliciesArgs,
  type IncidentResponsePolicies,
  type IncidentResponsePoliciesArgs,
  type NetworkSecurityPolicies,
  type NetworkSecurityPoliciesArgs,
  type PasswordPolicies,
  type PasswordPoliciesArgs,
  type SessionPolicies,
  type SessionPoliciesArgs,
} from '.';

/** Comprehensive security policies configuration */
export interface SecurityPolicies {
  /** Authentication policies */
  authentication: AuthenticationPolicies;
  /** Authorization policies */
  authorization: AuthorizationPolicies;
  /** Password policies */
  password: PasswordPolicies;
  /** Session policies */
  session: SessionPolicies;
  /** Data protection policies */
  dataProtection: DataProtectionPolicies;
  /** Network security policies */
  networkSecurity: NetworkSecurityPolicies;
  /** Incident response policies */
  incidentResponse: IncidentResponsePolicies;
  /** Compliance policies */
  compliance: CompliancePolicies;
}

export interface SecurityPoliciesArgs {
  /** Authentication policies */
  authentication: AuthenticationPoliciesArgs;
  /** Authorization policies */
  authorization: AuthorizationPoliciesArgs;
  /** Password policies */
  password: PasswordPoliciesArgs;
  /** Session policies */
  session: SessionPoliciesArgs;
  /** Data protection policies */
  dataProtection: DataProtectionPoliciesArgs;
  /** Network security policies */
  networkSecurity: NetworkSecurityPoliciesArgs;
  /** Incident response policies */
  incidentResponse: IncidentResponsePoliciesArgs;
  /** Compliance policies */
  compliance: CompliancePoliciesArgs;
}

export function getSecurityPoliciesEncoder(): Encoder<SecurityPoliciesArgs> {
  return getStructEncoder([
    ['authentication', getAuthenticationPoliciesEncoder()],
    ['authorization', getAuthorizationPoliciesEncoder()],
    ['password', getPasswordPoliciesEncoder()],
    ['session', getSessionPoliciesEncoder()],
    ['dataProtection', getDataProtectionPoliciesEncoder()],
    ['networkSecurity', getNetworkSecurityPoliciesEncoder()],
    ['incidentResponse', getIncidentResponsePoliciesEncoder()],
    ['compliance', getCompliancePoliciesEncoder()],
  ]);
}

export function getSecurityPoliciesDecoder(): Decoder<SecurityPolicies> {
  return getStructDecoder([
    ['authentication', getAuthenticationPoliciesDecoder()],
    ['authorization', getAuthorizationPoliciesDecoder()],
    ['password', getPasswordPoliciesDecoder()],
    ['session', getSessionPoliciesDecoder()],
    ['dataProtection', getDataProtectionPoliciesDecoder()],
    ['networkSecurity', getNetworkSecurityPoliciesDecoder()],
    ['incidentResponse', getIncidentResponsePoliciesDecoder()],
    ['compliance', getCompliancePoliciesDecoder()],
  ]);
}

export function getSecurityPoliciesCodec(): Codec<
  SecurityPoliciesArgs,
  SecurityPolicies
> {
  return combineCodec(
    getSecurityPoliciesEncoder(),
    getSecurityPoliciesDecoder()
  );
}
