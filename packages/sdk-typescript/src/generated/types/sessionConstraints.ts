import {
  combineCodec,
  type Codec,
  type Decoder,
  type Encoder
} from '@solana/codecs-core';
import {
  getI64Decoder,
  getI64Encoder
} from '@solana/codecs-numbers';
import {
  getBooleanDecoder,
  getBooleanEncoder,
  getStructDecoder,
  getStructEncoder
} from '@solana/codecs-data-structures';
/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

/** Session-based access constraints */
export type SessionConstraints = {
  /** Maximum session duration */
  maxSessionDuration: bigint;
  /** Idle timeout */
  idleTimeout: bigint;
  /** Re-authentication interval */
  reauthInterval: bigint;
  /** Multi-factor authentication required */
  mfaRequired: boolean;
  /** Device fingerprinting required */
  deviceFingerprinting: boolean;
  /** Session encryption required */
  sessionEncryption: boolean;
};

export type SessionConstraintsArgs = {
  /** Maximum session duration */
  maxSessionDuration: number | bigint;
  /** Idle timeout */
  idleTimeout: number | bigint;
  /** Re-authentication interval */
  reauthInterval: number | bigint;
  /** Multi-factor authentication required */
  mfaRequired: boolean;
  /** Device fingerprinting required */
  deviceFingerprinting: boolean;
  /** Session encryption required */
  sessionEncryption: boolean;
};

export function getSessionConstraintsEncoder(): Encoder<SessionConstraintsArgs> {
  return getStructEncoder([
    ['maxSessionDuration', getI64Encoder()],
    ['idleTimeout', getI64Encoder()],
    ['reauthInterval', getI64Encoder()],
    ['mfaRequired', getBooleanEncoder()],
    ['deviceFingerprinting', getBooleanEncoder()],
    ['sessionEncryption', getBooleanEncoder()],
  ]);
}

export function getSessionConstraintsDecoder(): Decoder<SessionConstraints> {
  return getStructDecoder([
    ['maxSessionDuration', getI64Decoder()],
    ['idleTimeout', getI64Decoder()],
    ['reauthInterval', getI64Decoder()],
    ['mfaRequired', getBooleanDecoder()],
    ['deviceFingerprinting', getBooleanDecoder()],
    ['sessionEncryption', getBooleanDecoder()],
  ]);
}

export function getSessionConstraintsCodec(): Codec<
  SessionConstraintsArgs,
  SessionConstraints
> {
  return combineCodec(
    getSessionConstraintsEncoder(),
    getSessionConstraintsDecoder()
  );
}
