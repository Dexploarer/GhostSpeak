import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  type Codec,
  type Decoder,
  type Encoder
} from '@solana/codecs-core';
import {
  getUtf8Decoder,
  getUtf8Encoder
} from '@solana/codecs-strings';
import {
  getU32Decoder,
  getU32Encoder
} from '@solana/codecs-numbers';
import {
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder
} from '@solana/codecs-data-structures';
import {
  getEnforcementLevelDecoder,
  getEnforcementLevelEncoder,
  getSodConstraintTypeDecoder,
  getSodConstraintTypeEncoder,
  type EnforcementLevel,
  type EnforcementLevelArgs,
  type SodConstraintType,
  type SodConstraintTypeArgs,
} from '.';
/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

/** Segregation of duties constraint */
export type SodConstraint = {
  /** Constraint name */
  name: string;
  /** Conflicting roles */
  conflictingRoles: Array<string>;
  /** Constraint type */
  constraintType: SodConstraintType;
  /** Enforcement level */
  enforcementLevel: EnforcementLevel;
  /** Exception procedures */
  exceptionProcedures: Array<string>;
};

export type SodConstraintArgs = {
  /** Constraint name */
  name: string;
  /** Conflicting roles */
  conflictingRoles: Array<string>;
  /** Constraint type */
  constraintType: SodConstraintTypeArgs;
  /** Enforcement level */
  enforcementLevel: EnforcementLevelArgs;
  /** Exception procedures */
  exceptionProcedures: Array<string>;
};

export function getSodConstraintEncoder(): Encoder<SodConstraintArgs> {
  return getStructEncoder([
    ['name', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    [
      'conflictingRoles',
      getArrayEncoder(addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())),
    ],
    ['constraintType', getSodConstraintTypeEncoder()],
    ['enforcementLevel', getEnforcementLevelEncoder()],
    [
      'exceptionProcedures',
      getArrayEncoder(addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())),
    ],
  ]);
}

export function getSodConstraintDecoder(): Decoder<SodConstraint> {
  return getStructDecoder([
    ['name', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    [
      'conflictingRoles',
      getArrayDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
    ['constraintType', getSodConstraintTypeDecoder()],
    ['enforcementLevel', getEnforcementLevelDecoder()],
    [
      'exceptionProcedures',
      getArrayDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
  ]);
}

export function getSodConstraintCodec(): Codec<
  SodConstraintArgs,
  SodConstraint
> {
  return combineCodec(getSodConstraintEncoder(), getSodConstraintDecoder());
}
