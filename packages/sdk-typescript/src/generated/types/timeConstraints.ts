/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  type Codec,
  type Decoder,
  type Encoder,
  type Option,
  type OptionOrNullable,
  type ReadonlyUint8Array,
} from '@solana/kit';

/** Time-based access constraints */
export interface TimeConstraints {
  /** Allowed hours (0-23) */
  allowedHours: ReadonlyUint8Array;
  /** Allowed days of week (1-7) */
  allowedDays: ReadonlyUint8Array;
  /** Timezone for time calculations */
  timezone: string;
  /** Maximum session duration (seconds) */
  maxSessionDuration: Option<bigint>;
  /** Role expiration timestamp */
  expiresAt: Option<bigint>;
  /** Periodic reactivation required */
  reactivationPeriod: Option<bigint>;
}

export interface TimeConstraintsArgs {
  /** Allowed hours (0-23) */
  allowedHours: ReadonlyUint8Array;
  /** Allowed days of week (1-7) */
  allowedDays: ReadonlyUint8Array;
  /** Timezone for time calculations */
  timezone: string;
  /** Maximum session duration (seconds) */
  maxSessionDuration: OptionOrNullable<number | bigint>;
  /** Role expiration timestamp */
  expiresAt: OptionOrNullable<number | bigint>;
  /** Periodic reactivation required */
  reactivationPeriod: OptionOrNullable<number | bigint>;
}

export function getTimeConstraintsEncoder(): Encoder<TimeConstraintsArgs> {
  return getStructEncoder([
    ['allowedHours', addEncoderSizePrefix(getBytesEncoder(), getU32Encoder())],
    ['allowedDays', addEncoderSizePrefix(getBytesEncoder(), getU32Encoder())],
    ['timezone', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ['maxSessionDuration', getOptionEncoder(getI64Encoder())],
    ['expiresAt', getOptionEncoder(getI64Encoder())],
    ['reactivationPeriod', getOptionEncoder(getI64Encoder())],
  ]);
}

export function getTimeConstraintsDecoder(): Decoder<TimeConstraints> {
  return getStructDecoder([
    ['allowedHours', addDecoderSizePrefix(getBytesDecoder(), getU32Decoder())],
    ['allowedDays', addDecoderSizePrefix(getBytesDecoder(), getU32Decoder())],
    ['timezone', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['maxSessionDuration', getOptionDecoder(getI64Decoder())],
    ['expiresAt', getOptionDecoder(getI64Decoder())],
    ['reactivationPeriod', getOptionDecoder(getI64Decoder())],
  ]);
}

export function getTimeConstraintsCodec(): Codec<
  TimeConstraintsArgs,
  TimeConstraints
> {
  return combineCodec(getTimeConstraintsEncoder(), getTimeConstraintsDecoder());
}
