/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  type Codec,
  type Decoder,
  type Encoder,
} from '@solana/kit';
import { getVoteDecoder, getVoteEncoder, type Vote, type VoteArgs } from '.';

/** Voting results for proposal */
export type VotingResults = {
  /** Total votes for */
  votesFor: bigint;
  /** Total votes against */
  votesAgainst: bigint;
  /** Total votes abstain */
  votesAbstain: bigint;
  /** Total voting power */
  totalVotingPower: bigint;
  /** Participation rate */
  participationRate: number;
  /** Individual votes */
  individualVotes: Array<Vote>;
  /** Weighted voting enabled */
  weightedVoting: boolean;
  /** Quorum reached */
  quorumReached: boolean;
  /** Approval threshold met */
  approvalThresholdMet: boolean;
};

export type VotingResultsArgs = {
  /** Total votes for */
  votesFor: number | bigint;
  /** Total votes against */
  votesAgainst: number | bigint;
  /** Total votes abstain */
  votesAbstain: number | bigint;
  /** Total voting power */
  totalVotingPower: number | bigint;
  /** Participation rate */
  participationRate: number;
  /** Individual votes */
  individualVotes: Array<VoteArgs>;
  /** Weighted voting enabled */
  weightedVoting: boolean;
  /** Quorum reached */
  quorumReached: boolean;
  /** Approval threshold met */
  approvalThresholdMet: boolean;
};

export function getVotingResultsEncoder(): Encoder<VotingResultsArgs> {
  return getStructEncoder([
    ['votesFor', getU64Encoder()],
    ['votesAgainst', getU64Encoder()],
    ['votesAbstain', getU64Encoder()],
    ['totalVotingPower', getU64Encoder()],
    ['participationRate', getU8Encoder()],
    ['individualVotes', getArrayEncoder(getVoteEncoder())],
    ['weightedVoting', getBooleanEncoder()],
    ['quorumReached', getBooleanEncoder()],
    ['approvalThresholdMet', getBooleanEncoder()],
  ]);
}

export function getVotingResultsDecoder(): Decoder<VotingResults> {
  return getStructDecoder([
    ['votesFor', getU64Decoder()],
    ['votesAgainst', getU64Decoder()],
    ['votesAbstain', getU64Decoder()],
    ['totalVotingPower', getU64Decoder()],
    ['participationRate', getU8Decoder()],
    ['individualVotes', getArrayDecoder(getVoteDecoder())],
    ['weightedVoting', getBooleanDecoder()],
    ['quorumReached', getBooleanDecoder()],
    ['approvalThresholdMet', getBooleanDecoder()],
  ]);
}

export function getVotingResultsCodec(): Codec<
  VotingResultsArgs,
  VotingResults
> {
  return combineCodec(getVotingResultsEncoder(), getVotingResultsDecoder());
}
