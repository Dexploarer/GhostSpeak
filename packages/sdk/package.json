{
  "name": "@ghostspeak/sdk",
  "version": "1.0.0",
  "author": "GhostSpeak Team",
  "type": "module",
  "main": "./dist/cjs-fixed/index.js",
  "module": "./dist/esm-fixed/index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/ghostspeak/ghostspeak.git",
    "directory": "packages/sdk"
  },
  "homepage": "https://ghostspeak.com",
  "bugs": {
    "url": "https://github.com/ghostspeak/ghostspeak/issues"
  },
  "dependencies": {
    "@solana/addresses": "2.1.1",
    "@solana/codecs": "2.1.1",
    "@solana/rpc": "2.1.1",
    "@solana/rpc-types": "2.1.1",
    "@solana/signers": "2.1.1",
    "bs58": "6.0.0"
  },
  "peerDependencies": {
    "@codama/nodes-from-anchor": "1.2.1",
    "@codama/renderers-js": "1.2.14",
    "@solana-program/token-2022": "^0.4.2",
    "@solana/codecs-strings": "2.1.1",
    "@solana/kit": "2.1.1",
    "@solana/spl-token": "^0.4.13",
    "@solana/spl-token-metadata": "^0.1.6",
    "borsh": "^2.0.0",
    "codama": "1.3.0",
    "pino": "^9.7.0",
    "pino-pretty": "^13.0.0",
    "uuid": "^11.0.3"
  },
  "peerDependenciesMeta": {
    "@codama/nodes-from-anchor": { "optional": true },
    "@codama/renderers-js": { "optional": true },
    "@solana-program/token-2022": { "optional": true },
    "@solana/codecs-strings": { "optional": true },
    "@solana/kit": { "optional": true },
    "@solana/spl-token": { "optional": true },
    "@solana/spl-token-metadata": { "optional": true },
    "borsh": { "optional": true },
    "codama": { "optional": true },
    "pino": { "optional": true },
    "pino-pretty": { "optional": true },
    "uuid": { "optional": true }
  },
  "devDependencies": {
    "@types/node": "24.0.7",
    "@types/uuid": "^10.0.0",
    "@typescript-eslint/eslint-plugin": "8.35.1",
    "@typescript-eslint/parser": "8.35.0",
    "bun-types": "1.2.18",
    "docsify-cli": "^4.4.4",
    "eslint": "9.30.0",
    "typescript": "^5.8.3",
    "wasm-pack": "^0.13.1",
    "webpack-bundle-analyzer": "^4.10.2"
  },
  "exports": {
    ".": {
      "import": "./dist/esm-fixed/index.js",
      "require": "./dist/cjs-fixed/index.js",
      "types": "./dist/types/index.d.ts"
    },
    "./optimized": {
      "import": "./dist/optimized/index-optimized.js",
      "types": "./dist/types/index-optimized.d.ts"
    },
    "./core": {
      "import": "./dist/optimized/index-optimized.js",
      "types": "./dist/types/index-optimized.d.ts"
    },
    "./src": {
      "import": "./src/index.ts",
      "types": "./src/index.ts"
    },
    "./services/*": {
      "import": "./src/services/*.ts",
      "types": "./src/services/*.ts"
    },
    "./utils/*": {
      "import": "./src/utils/*.ts",
      "types": "./src/utils/*.ts"
    },
    "./types": {
      "import": "./src/types.ts",
      "types": "./src/types.ts"
    },
    "./generated-v2/*": {
      "import": "./src/generated-v2/*.ts",
      "types": "./src/generated-v2/*.ts"
    },
    "./observability": {
      "import": "./src/observability/index.ts",
      "types": "./src/observability/index.ts"
    },
    "./observability/*": {
      "import": "./src/observability/*.ts",
      "types": "./src/observability/*.ts"
    },
    "./examples/*": {
      "import": "./src/examples/*.ts",
      "types": "./src/examples/*.ts"
    },
    "./package.json": "./package.json"
  },
  "description": "TypeScript SDK for GhostSpeak Protocol - Decentralized AI Agent Commerce on Solana",
  "engines": {
    "node": ">=18.0.0",
    "bun": ">=1.0.0"
  },
  "files": [
    "dist",
    "src"
  ],
  "keywords": [
    "solana",
    "blockchain",
    "ai",
    "agents",
    "ghostspeak",
    "protocol",
    "typescript",
    "sdk",
    "web3",
    "decentralized",
    "marketplace",
    "zk-compression",
    "confidential-transfers",
    "compressed-nfts"
  ],
  "license": "MIT",
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "build:esm": "node build-fixed.js",
    "build:cjs": "node build-fixed.js",
    "build:minimal": "bun build --target=node --outdir=dist/minimal src/index-minimal.ts --splitting --external @solana/rpc-subscriptions --external @solana/functional --external @solana/transaction-messages --external @solana/transactions --external @solana/keys --external @solana/accounts",
    "build:optimized": "node build-fixed.js",
    "build:core": "bun build --target=node --outdir=dist/optimized src/index-optimized.ts --splitting --external @solana/addresses --external @solana/codecs --external @solana/rpc --external @solana/rpc-types --external @solana/signers --external bs58",
    "build:performance": "bun build --target=node --outdir=dist/performance src/performance/index.ts --splitting",
    "build:full": "npm run clean && npm run build:esm",
    "build": "npm run build:full",
    "build:types": "tsc --emitDeclarationOnly --declaration --outDir dist/types || echo 'Type generation skipped'",
    "build:production": "npm run clean && npm run build:optimized && npm run build:types && npm run analyze:bundle",
    "clean": "rm -rf dist",
    "codama": "node scripts/codama-generate.mjs || echo 'Codama generation skipped'",
    "generate": "bun run codama",
    "dev": "bun --watch src/index.ts",
    "dev:optimized": "bun --watch src/index-optimized.ts",
    "test": "bun test",
    "test:performance": "bun test src/performance/**/*.test.ts",
    "benchmark": "bun run src/performance/benchmarks.ts",
    "benchmark:all": "bun run benchmark && bun run test:performance",
    "performance:analyze": "bun run src/performance/index.ts",
    "performance:optimize": "bun run src/performance/index.ts --optimize",
    "performance:baseline": "bun run src/performance/index.ts --create-baseline",
    "performance:report": "bun run src/performance/index.ts --generate-report",
    "test:bundle": "bun test --timeout 30000 bundle.test.ts",
    "lint": "eslint src/**/*.ts --fix || echo 'Linting skipped'",
    "lint:strict": "eslint src/**/*.ts --max-warnings 0",
    "type-check": "tsc --noEmit --strict || echo 'Type checking skipped'",
    "type-check:strict": "tsc --noEmit --strict --exactOptionalPropertyTypes --noImplicitReturns",
    "analyze": "ls -la dist/esm/ && du -h dist/esm/index.js",
    "analyze:performance": "bun run performance:analyze",
    "analyze:memory": "bun --inspect src/performance/memory-optimization.ts",
    "monitor": "bun run src/performance/monitoring.ts",
    "cache:optimize": "bun run src/performance/advanced-cache.ts",
    "scaling:test": "bun run src/performance/scaling.ts",
    "analyze:bundle": "bun run build:optimized && node -e \"console.log('ðŸ“Š Bundle analysis complete. Check dist/bundle-report.json')\"",
    "analyze:deps": "bunx madge --circular --extensions ts,js src/",
    "optimize": "npm run build:optimized && npm run analyze:bundle",
    "size-check": "bundlesize --config bundlesize.config.json",
    "prepack": "npm run build:production",
    "observability:demo": "bun run src/examples/observability-example.ts",
    "observability:dashboard": "bun run src/observability/dashboard.ts",
    "test:observability": "bun test src/observability/**/*.test.ts",
    "monitor:start": "bun run observability:demo",
    "monitor:health": "curl http://localhost:3001 | head -20"
  },
  "types": "./dist/esm/index.d.ts"
}
